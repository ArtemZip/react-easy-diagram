{"version":3,"sources":["../../src/components/BackgroundDefault.tsx","../../src/hooks/useNotifyRef.ts","../../src/components/LinkWrapper.tsx","../../src/components/LinksLayer.tsx","../../src/hooks/userInteractions/useDragHandlers.ts","../../src/hooks/userInteractions/useUserAbilityToSelectSwitcher.ts","../../src/hooks/userInteractions/useNodeUserInteraction.ts","../../src/hooks/userInteractions/common.ts","../../src/components/NodeWrapper.tsx","../../src/components/NodesLayer.tsx","../../src/utils.ts","../../src/hooks/userInteractions/useDiagramUserInteraction.ts","../../src/hooks/userInteractions/useDiagramPinchHandlers.ts","../../src/hooks/userInteractions/useDiagramWheelHandler.ts","../../src/components/MiniControlWrapper.tsx","../../src/components/DiagramInner.tsx","../../../node_modules/style-inject/dist/style-inject.es.js","../../src/states/callbacks.ts","../../src/linkConstructors/curved.ts","../../src/states/htmlElementRefState.ts","../../src/states/diagramState.ts","../../src/states/LinkPointEndpointState.ts","../../src/states/linkCreationState.ts","../../src/states/linkPointEndpointState.ts","../../src/states/linkPortEndpointState.ts","../../src/components/LinkDefault.tsx","../../src/states/visualComponents.ts","../../src/states/linksSettings.ts","../../src/types/common.ts","../../src/states/linkState.ts","../../src/states/linksStore.ts","../../src/components/NodeDefault.tsx","../../src/states/nodesSettings.ts","../../src/states/portState.ts","../../src/states/nodeState.ts","../../src/states/nodesStore.ts","../../src/components/PortWrapper.tsx","../../src/hooks/userInteractions/usePortUserInteraction.ts","../../src/components/PortsContainerDefault.tsx","../../src/states/portsSettings.ts","../../src/states/visualComponentState.ts","../../src/states/visualComponentWithDefault.ts","../../src/states/diagramSettings.ts","../../src/states/rootStore.ts","../../src/components/Diagram.tsx","../../src/hooks/useRootStore.ts","../../src/components/BackgroundWrapper.tsx","../../src/components/MiniControlDefault.tsx","ControlPanel.tsx","App.tsx","../../src/hooks/useDiagram.tsx","index.tsx"],"names":["diagramOffset","digramZoom","settings","defaultSettings","className","style","backgroundColor","color","backgroundImage","imageCreator","backgroundPosition","width","height","init","forceUpdate","ref","value","facade","i","LinkWrapper","observer","link","draggableRef","componentDefinition","component","entity","LinksLayer","linksStore","Object","values","links","map","key","id","linkCreation","useDragHandlers","activeRef","getPosition","setPosition","parentScaleGetter","cancel","onDrag","pinching","delta","current","parentScale","currentPosition","onDragStart","event","onDragEnd","DISABLED_USER_SELECT_CSS_CLASS","useUserAbilityToSelectSwitcher","active","elementToSwitchUserSelectOn","classList","contains","add","remove","cancelPortsEvents","targets","composedPath","length","target","eventPathContainsClass","NodeWrapper","node","userInteractionElemRef","nodeState","enable","diagramStore","dragHandlers","position","zoom","domTarget","eventOptions","passive","enabled","ownerDocument","body","left","top","NodesLayer","nodesStore","nodes","generateTransform","translate","scale","translatePart","roundPoint","point","Math","round","addPoints","a","b","subtractPoints","multiplyPoint","m","clampValue","interval","min","max","guidS4","floor","random","toString","substring","guid","guidForcedUniqueness","alreadyExistedItemsWithIdAsKey","deepCopy","JSON","parse","stringify","diagramState","cancelGesture","diagramInnerRef","offset","setOffset","undefined","pinchHandlers","elemToAttachToRef","state","pinchState","distance","origin","onPinch","originDiff","rect","getBoundingClientRect","originPositionOnElement","tranlsateAndZoomInto","onPinchStart","onPinchEnd","useDiagramPinchHandlers","wheelHandler","onWheel","direction","yDirection","clientX","clientY","mousePositionOnElement","factor","useDiagramWheelHandler","transform","transformString","MiniControlWrapper","rootStore","minicontrolComponentState","diagramSettings","miniControlComponentState","InnerDiagram","props","diagramStyles","BackgroundWrapper","displayName","css","insertAt","document","head","getElementsByTagName","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","import","callbacks","_validateLinkEndpoints","validateLinkEndpoints","export","this","_rootStore","curvedLinkPathConstructor","source","sourcePortType","targetPortType","sourceStr","targetStr","directionFactor","tweakDirectionFactorBasedOnDistance","sqrt","pow","getControl","endpoint","portType","portTypeToLinkDirectionMapping","defualtSettings","right","bottom","createCurvedLinkPathConstructor","initValue","offsetRelativeToParent","parent","iterElement","acumLeft","acumTop","offsetLeft","offsetTop","parentElement","_currentInternal","clientWidth","clientHeight","setZoom","_offset","_zoom","newOffset","newZoom","scaleInterval","zoomIn","zoomIntoCenter","zoomOut","setTransformation","zoomInto","pointToZoomInto","zoomMultiplicator","pointDisplacementAfterZoom","translateBy","diagramRealSize","_diagramInnerRef","realSize","pos","pointToTranslateBy","_point","_source","_target","_targetPortCandidate","startLinking","portState","eventOffsetRelativeToTarget","targetPoint","_resetProps","nodeId","offsetRelativeToNode","sourcePoint","setTargetPortCandidate","canAddLink","portId","success","validForConnection","resetTargetPortCandidate","stopLinking","addLink","port","linksSettings","getComponent","linkCreationComponentType","createLinkPath","_nodeId","_portId","getNodeOrThrowException","getPortOrThrowException","linkPortEndpointsEquals","linkDefaultSettings","path","d","svgPath","stroke","strokeWidth","fill","cx","cy","r","cirleRadius","createLinkDefault","finaleSettings","defaultComponents","_defaultType","componentDefaultType","obj","setDefaultType","defaultNodeType","_components","_defaultComponents","_createComponentCollection","components","finalComponentType","defaultType","componentsObjects","collection","entries","forEach","_pathConstructor","defaultPathConstructor","_visualComponents","setPathConstructor","pathConstructor","ErrorResult","error","_createEndpointState","setComponentType","componentType","setSegments","segments","setExtra","extra","_id","_componentType","_segments","_extra","newLinks","_links","_nodesLinksCollection","l","getNodeLinks","removeNodeLinks","removeLink","removePortLinks","endpointToRemove","canAdd","newLink","_addLinkToNodeLinksCollection","linkId","linkToRemove","_removeLinkFromNodeLinksCollection","isSourceValid","isEndpointValid","isTargetValid","areEndpointsConnected","getEndpointPort","ex","getLinkForEndpointsIfExists","find","push","filter","_linkCreation","portsSettings","generatePortsContainer","ports","portsType","portsToShow","portsContainer","portsContainerVisualComponents","_ref","_dragging","_hovered","_validForConnection","setLabel","_label","setType","_type","label","newState","_ports","addPort","_position","p","getPort","newPort","removePort","nodesSettings","_nodes","newNodes","addNode","n","rewriteIfExists","newNode","removeNode","getNode","PortWrapper","handlers","dragging","releasePointerCapture","pointerId","offsetX","offsetY","onPointerEnter","hovered","onPointerLeave","bind","finalSettings","portsContainerDefaultSettings","gapBetweenPorts","createPortsContainerDefault","_portsContainerVisualComponents","horizontal","vertical","portsContainerComponents","_settings","newComponent","_component","defaultComponent","_innerComponent","_defaultComponent","_scaleInterval","defaultScaleInterval","_backgroundComponentState","backgroundComponent","_miniControlComponentState","miniControlComponent","setScaleInterval","createDefaultBackground","createDefaultMiniControl","importState","_nodesStore","_linksStore","importSettings","_diagramSettings","diagram","_nodesSettings","_linksSettings","_portsSettings","_callbacks","Callbacks","_diagramState","RootStoreContext","createContext","store","RootStore","initState","storeRef","Provider","backgroundComponentState","diagramZoom","getOffsetStyles","containerStyle","buttons","size","buttonsSize","onClick","children","parentOffset","useStyles","makeStyles","form","display","flexDirection","margin","visibilityBtn","borderRadius","minWidth","padding","header","marginBottom","alignItems","ControlPanel","classes","useState","row","setRow","col","setCol","visible","setVisible","Box","clone","Card","Button","variant","aria-label","Tune","Typography","noValidate","autoComplete","onSubmit","e","preventDefault","colNum","rowNum","getNodeId","j","generateLargeDiagram","TextField","onChange","parseInt","marginTop","console","log","controlPanel","App","Diagram","useDiagram","default","attention","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3e7949e8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { IComponentDefinition } from '..';\r\nimport { IBackgroundComponentProps } from '../states/diagramSettings';\r\n\r\nconst BackgroundDefault: React.FC<\r\n  IBackgroundComponentProps<IBackgroundDefaultSettings>\r\n> = ({ diagramOffset, diagramZoom: digramZoom, settings }) => {\r\n  settings = settings ?? defaultSettings;\r\n\r\n  return (\r\n    <div\r\n      className='react_fast_diagram_Background_Default'\r\n      style={{\r\n        backgroundColor: settings.color,\r\n        backgroundImage: settings.imageCreator(\r\n          100 * digramZoom,\r\n          100 * digramZoom\r\n        ),\r\n        backgroundPosition: `${diagramOffset[0]}px ${diagramOffset[1]}px`,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport const createGridImage: ImageCreator = (width, height) => {\r\n  return `url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='${width}' height='${height}' viewBox='0 0 100 100'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.3'%3E%3Cpath opacity='.5' d='M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z'/%3E%3Cpath d='M6 5V0H5v5H0v1h5v94h1V6h94V5H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")`;\r\n};\r\n\r\nexport const createImageWithCrosses: ImageCreator = (width, height) => {\r\n  return `url(\"data:image/svg+xml,%3Csvg width='${width * 0.3}' height='${\r\n    height * 0.3\r\n  }' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%2395bcbd' fill-opacity='0.3'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")`;\r\n};\r\n\r\nconst defaultSettings: IBackgroundDefaultSettings = {\r\n  imageCreator: createGridImage,\r\n  color: '#ececec',\r\n};\r\n\r\nexport const createDefaultBackground = (\r\n  settings?: Partial<IBackgroundDefaultSettings>\r\n): IComponentDefinition<\r\n  IBackgroundComponentProps,\r\n  IBackgroundDefaultSettings\r\n> => {\r\n  const finalSettings = {\r\n    ...defaultSettings,\r\n    ...(settings ? settings : {}),\r\n  };\r\n\r\n  return {\r\n    component: BackgroundDefault,\r\n    settings: finalSettings,\r\n  };\r\n};\r\n\r\nexport type ImageCreator = (width: number, height: number) => string;\r\n\r\n/**\r\n * @property {function}  imageCreator       - Function to create string for css's backgroundUrl property.\r\n * You can use for example services like listed in this article https://css-tricks.com/websites-generate-svg-patterns/\r\n * to generate this string.\r\n */\r\nexport interface IBackgroundDefaultSettings {\r\n  imageCreator: ImageCreator;\r\n  color: string;\r\n}\r\n","import { useState } from 'react';\r\n\r\nexport const useNotifyRef = <TValue>(\r\n  init: TValue\r\n): React.MutableRefObject<TValue> => {\r\n  const [_, forceUpdate] = useState(0);\r\n  const [ref] = useState(() => ({\r\n    value: init,\r\n    facade: {\r\n      get current() {\r\n        return ref.value;\r\n      },\r\n      set current(value) {\r\n        const last = ref.value;\r\n        if (last !== value) {\r\n          ref.value = value;\r\n          forceUpdate((i) => i + 1);\r\n        }\r\n      },\r\n    },\r\n  }));\r\n\r\n  return ref.facade;\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useNotifyRef } from '../hooks/useNotifyRef';\r\nimport { LinkCreationState } from '../states';\r\nimport { LinkState } from '../states/linkState';\r\n\r\nexport const LinkWrapper = observer<{ link: LinkState | LinkCreationState }>(({ link }) => {\r\n  const draggableRef = useNotifyRef(null);\r\n\r\n  return (\r\n    <g>\r\n      <link.componentDefinition.component\r\n        draggableRef={draggableRef}\r\n        entity={link}\r\n        settings={link.componentDefinition.settings}\r\n      />\r\n    </g>\r\n  );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { LinksStore } from '../states/linksStore';\r\nimport { LinkWrapper } from './LinkWrapper';\r\n\r\nexport const LinksLayer = observer<{linksStore: LinksStore}>(({linksStore}) => {\r\n  return (\r\n    <svg>\r\n      {Object.values(linksStore.links).map((link) => (\r\n        <LinkWrapper key={link.id} link={link} />\r\n      ))}\r\n      {<LinkWrapper key='__creation__' link={linksStore.linkCreation} />}\r\n    </svg>\r\n  );\r\n});\r\n","import { useMemo } from 'react';\r\nimport { Handler } from 'react-use-gesture/dist/types';\r\nimport { Point } from '../../types/common';\r\nimport { IUserInteractionTranslate } from './common';\r\n\r\ntype DragEventHandler =\r\n  | Handler<'drag', React.PointerEvent<Element> | PointerEvent>\r\n  | undefined;\r\n\r\nexport interface IDragHandlers {\r\n  onDrag: DragEventHandler;\r\n  onDragStart: DragEventHandler;\r\n  onDragEnd: DragEventHandler;\r\n}\r\n\r\nexport function useDragHandlers(\r\n  activeRef: React.MutableRefObject<boolean>,\r\n  getPosition: () => Point,\r\n  setPosition: (position: Point) => any,\r\n  parentScaleGetter?: () => number,\r\n  cancel?: (event: React.PointerEvent<Element> | PointerEvent) => boolean\r\n): IDragHandlers {\r\n  const handlers = useMemo<IDragHandlers>(\r\n    () => ({\r\n      onDrag: ({ pinching, delta }) => {\r\n        if (!activeRef.current || pinching) {\r\n          return;\r\n        }\r\n        const parentScale = parentScaleGetter ? parentScaleGetter() : 1;\r\n        const currentPosition = getPosition();\r\n        setPosition([\r\n          currentPosition[0] + delta[0] / parentScale,\r\n          currentPosition[1] + delta[1] / parentScale,\r\n        ]);\r\n      },\r\n      onDragStart: ({ event }) => {\r\n        if (cancel && cancel(event)) {\r\n          return;\r\n        }\r\n        activeRef.current = true;\r\n      },\r\n      onDragEnd: () => (activeRef.current = false),\r\n    }),\r\n    [activeRef, getPosition, setPosition, parentScaleGetter, cancel]\r\n  );\r\n\r\n  return handlers;\r\n}\r\n","import { useEffect } from \"react\";\r\n\r\nexport const DISABLED_USER_SELECT_CSS_CLASS =\r\n  'react_fast_diagram_disabled_user_select';\r\n\r\nexport function useUserAbilityToSelectSwitcher(\r\n  active: boolean,\r\n  elementToSwitchUserSelectOn: HTMLElement | undefined\r\n) {\r\n  useEffect(() => {\r\n    if (!active || !elementToSwitchUserSelectOn) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      elementToSwitchUserSelectOn.classList.contains(\r\n        DISABLED_USER_SELECT_CSS_CLASS\r\n      )\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    elementToSwitchUserSelectOn.classList.add(DISABLED_USER_SELECT_CSS_CLASS);\r\n\r\n    return () => {\r\n      elementToSwitchUserSelectOn.classList.remove(\r\n        DISABLED_USER_SELECT_CSS_CLASS\r\n      );\r\n    };\r\n  }, [active, elementToSwitchUserSelectOn]);\r\n}\r\n","import React, { useCallback, useRef } from 'react';\r\nimport { useGesture } from 'react-use-gesture';\r\nimport { NodeState } from '../../states/nodeState';\r\nimport { useNotifyRef } from '../useNotifyRef';\r\nimport { useRootStore } from '../useRootStore';\r\nimport { eventPathContainsClass } from './common';\r\nimport { useDragHandlers } from './useDragHandlers';\r\nimport { useUserAbilityToSelectSwitcher } from './useUserAbilityToSelectSwitcher';\r\n\r\nexport const useNodeUserInteraction = (\r\n  nodeState: NodeState,\r\n  enable?: boolean\r\n): IUseNodeUserInteractionResult => {\r\n  const { diagramState: diagramStore } = useRootStore();\r\n\r\n  // Should trigger rendering on change, otherwise useUserSelectSwitcher will not be invoked\r\n  const activeRef = useNotifyRef(false);\r\n  const userInteractionElemRef = useRef<HTMLElement>(null);\r\n\r\n  const getPosition = useCallback(() => nodeState.position, [nodeState]);\r\n  const setPosition = useCallback(nodeState.setPosition, [nodeState]);\r\n  const getDiagramZoom = useCallback(() => diagramStore.zoom, [diagramStore]);\r\n\r\n  const dragHandlers = useDragHandlers(\r\n    activeRef,\r\n    getPosition,\r\n    setPosition,\r\n    getDiagramZoom,\r\n    cancelPortsEvents\r\n  );\r\n\r\n  useGesture(dragHandlers, {\r\n    domTarget: userInteractionElemRef,\r\n    eventOptions: { passive: false },\r\n    enabled: enable,\r\n  });\r\n\r\n  useUserAbilityToSelectSwitcher(\r\n    activeRef.current,\r\n    userInteractionElemRef.current?.ownerDocument?.body\r\n  );\r\n\r\n  return {\r\n    active: activeRef.current,\r\n    userInteractionElemRef,\r\n  };\r\n};\r\n\r\nfunction cancelPortsEvents(event: React.PointerEvent<Element> | PointerEvent) {\r\n  return eventPathContainsClass(event, 'react_fast_diagram_PortWrapper');\r\n}\r\n\r\nexport interface IUseNodeUserInteractionResult {\r\n  active: boolean;\r\n  userInteractionElemRef: React.RefObject<HTMLElement>;\r\n}\r\n","import { Point } from '../../types/common';\r\n\r\nexport const eventPathContainsClass = (\r\n  event: PointerEvent | React.PointerEvent<Element>,\r\n  className: string\r\n) => {\r\n  const typedEvent = event as Event;\r\n  if ('composedPath' in typedEvent) {\r\n    const targets = typedEvent.composedPath();\r\n    for (let i = 0; i < targets.length; i++) {\r\n      const target = targets[i];\r\n      if ('classList' in target) {\r\n        if ((target as Element).classList.contains(className)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport function allTouchTargetsContainsClass(\r\n  event: TouchEvent | React.TouchEvent<Element>,\r\n  listenOnlyClass: string | undefined,\r\n  ignoreClass: string | undefined\r\n): boolean {\r\n  for (let i = 0; i < event.touches.length; i++) {\r\n    if (\r\n      !eventTargetContainsClass(\r\n        event.touches[i].target,\r\n        listenOnlyClass,\r\n        ignoreClass\r\n      )\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport function eventTargetContainsClass(\r\n  eventTarget: EventTarget | null,\r\n  listenOnlyClass: string | undefined,\r\n  ignoreClass: string | undefined\r\n): boolean {\r\n  if (eventTarget && 'classList' in eventTarget) {\r\n    const targetElement = eventTarget as Element;\r\n    return (\r\n      (!listenOnlyClass || targetElement.classList.contains(listenOnlyClass)) &&\r\n      (!ignoreClass || !targetElement.classList.contains(ignoreClass))\r\n    );\r\n  } else return false;\r\n}\r\n\r\nexport interface IUserInteractionTranslate {\r\n  offset: Point;\r\n  setOffset: (newOffset: Point) => any;\r\n}\r\n\r\nexport interface IUserInteractionTranslateAndZoom {\r\n  offset: Point;\r\n  zoom: number;\r\n  tranlsateAndZoomInto: (\r\n    translateBy: Point,\r\n    pointToZoomInto: Point,\r\n    changeZoomBy: number\r\n  ) => any;\r\n}\r\n","import React from 'react';\r\nimport { useNodeUserInteraction } from '../hooks/userInteractions/useNodeUserInteraction';\r\nimport { NodeState } from '../states/nodeState';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport const NodeWrapper = observer<{node: NodeState}>(({ node }) => {\r\n  const { userInteractionElemRef } = useNodeUserInteraction(node);\r\n\r\n  return (\r\n    <div\r\n      id={node.id}\r\n      className='react_fast_diagram_NodeWrapper'\r\n      style={{\r\n        left: node.position[0],\r\n        top: node.position[1]\r\n      }}\r\n      ref={node.ref}\r\n    >\r\n      <node.componentDefinition.component\r\n        draggableRef={userInteractionElemRef}\r\n        entity={node}\r\n        settings={node.componentDefinition.settings}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { NodesStore } from '../states/nodesStore';\r\nimport { NodeWrapper } from './NodeWrapper';\r\n\r\nexport const NodesLayer = observer<{nodesStore: NodesStore}>(({nodesStore}) => {\r\n  return (\r\n    <div>\r\n      {Object.values(nodesStore.nodes).map((node) => (\r\n        <NodeWrapper key={node.id} node={node} />\r\n      ))}\r\n    </div>\r\n  );\r\n});\r\n","import { Point } from './types/common';\r\n\r\nexport const generateTransform = (translate: Point, scale?: number): string => {\r\n  const translatePart = `translate(${translate[0]}px, ${translate[1]}px)`;\r\n  if (scale) {\r\n    const scalePart = `scale(${scale})`;\r\n    return translatePart + ' ' + scalePart;\r\n  } else {\r\n    return translatePart;\r\n  }\r\n};\r\n\r\nexport interface ITransformation {\r\n  zoom: number;\r\n  offset: Point;\r\n}\r\n\r\nexport const distanceBetweenPoints = (a: Point, b: Point): number =>\r\n  Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2));\r\n\r\nexport const roundPoint = (point: Point) =>\r\n  [Math.round(point[0]), Math.round(point[1])] as Point;\r\n\r\nexport const addPoints = (a: Point, b: Point): Point => [\r\n  a[0] + b[0],\r\n  a[1] + b[1],\r\n];\r\n\r\nexport const subtractPoints = (a: Point, b: Point): Point => [\r\n  a[0] - b[0],\r\n  a[1] - b[1],\r\n];\r\n\r\nexport const multiplyPoint = (a: Point, m: number): Point => [\r\n  a[0] * m,\r\n  a[1] * m,\r\n];\r\n\r\nexport const arePointsEqual = (a: Point, b: Point): boolean =>\r\n  a === b || (a && b && a[0] === b[0] && a[1] === b[1]);\r\n\r\nexport const areTranformationsEqual = (\r\n  a: ITransformation,\r\n  b: ITransformation\r\n): boolean =>\r\n  a === b ||\r\n  (a && b && a.zoom === b.zoom && arePointsEqual(a.offset, b.offset));\r\n\r\nexport function clampValue(value: number, interval: Point) {\r\n  return Math.min(Math.max(value, interval[0]), interval[1]);\r\n}\r\n\r\nfunction guidS4() {\r\n  return Math.floor((1 + Math.random()) * 0x10000)\r\n    .toString(16)\r\n    .substring(1);\r\n}\r\n\r\nexport function guid() {\r\n  //return id of format 'aaaaaaaa'-'aaaa'-'aaaa'-'aaaa'-'aaaaaaaaaaaa'\r\n  return (\r\n    guidS4() +\r\n    guidS4() +\r\n    '-' +\r\n    guidS4() +\r\n    '-' +\r\n    guidS4() +\r\n    '-' +\r\n    guidS4() +\r\n    '-' +\r\n    guidS4() +\r\n    guidS4() +\r\n    guidS4()\r\n  );\r\n}\r\n\r\nexport function guidForcedUniqueness(alreadyExistedItemsWithIdAsKey: object) {\r\n  let id = guid();\r\n  while (id in alreadyExistedItemsWithIdAsKey) {\r\n    id = guid();\r\n  }\r\n\r\n  return id;\r\n}\r\n\r\nexport function deepCopy<TValue>(value: TValue) : TValue {\r\n  return JSON.parse(JSON.stringify(value));\r\n}","import React, { useCallback, useContext, useRef } from 'react';\r\nimport { useGesture } from 'react-use-gesture';\r\nimport { WebKitGestureEvent } from 'react-use-gesture/dist/types';\r\nimport { useNotifyRef } from '../useNotifyRef';\r\nimport { useRootStore } from '../useRootStore';\r\nimport { useDragHandlers } from './useDragHandlers';\r\nimport { useDiagramPinchHandlers } from './useDiagramPinchHandlers';\r\nimport { useUserAbilityToSelectSwitcher } from './useUserAbilityToSelectSwitcher';\r\nimport { useDiagramWheelHandler } from './useDiagramWheelHandler';\r\n\r\nexport const useDiagramUserInteraction = (\r\n  enable?: boolean\r\n): IUseDragAndZoomResult => {\r\n  const { diagramState } = useRootStore();\r\n  const activeRef = useNotifyRef(false);\r\n\r\n  const cancelGesture = useCallback(\r\n    (\r\n      event:\r\n        | TouchEvent\r\n        | React.TouchEvent<Element>\r\n        | React.WheelEvent<Element>\r\n        | WheelEvent\r\n        | WebKitGestureEvent\r\n        | React.PointerEvent<Element>\r\n        | PointerEvent\r\n    ) => event.target !== diagramState.diagramInnerRef.current,\r\n    [diagramState.diagramInnerRef]\r\n  );\r\n\r\n  const getOffset = useCallback(() => diagramState.offset, [diagramState]);\r\n  const setOffset = useCallback(diagramState.setOffset, [diagramState]);\r\n\r\n  const dragHandlers = useDragHandlers(\r\n    activeRef,\r\n    getOffset,\r\n    setOffset,\r\n    undefined,\r\n    cancelGesture\r\n  );\r\n\r\n  const pinchHandlers = useDiagramPinchHandlers(\r\n    diagramState.diagramInnerRef,\r\n    activeRef,\r\n    diagramState,\r\n    cancelGesture\r\n  );\r\n\r\n  const wheelHandler = useDiagramWheelHandler(\r\n    diagramState.diagramInnerRef,\r\n    activeRef,\r\n    diagramState\r\n  );\r\n\r\n  useGesture(\r\n    {\r\n      ...dragHandlers,\r\n      ...pinchHandlers,\r\n      ...wheelHandler,\r\n    },\r\n    {\r\n      domTarget: diagramState.diagramInnerRef,\r\n      eventOptions: { passive: false },\r\n      enabled: enable,\r\n    }\r\n  );\r\n\r\n  useUserAbilityToSelectSwitcher(\r\n    activeRef.current,\r\n    diagramState.diagramInnerRef.current?.ownerDocument?.body\r\n  );\r\n\r\n  return {\r\n    transform: diagramState.transformString,\r\n    active: activeRef.current,\r\n  };\r\n};\r\n\r\nexport interface IUseDragAndZoomResult {\r\n  transform: string;\r\n  active: boolean;\r\n}\r\n","import { useMemo, useRef } from 'react';\r\nimport {\r\n  Handler,\r\n  Vector2,\r\n  WebKitGestureEvent,\r\n} from 'react-use-gesture/dist/types';\r\nimport { subtractPoints } from '../../utils';\r\nimport { IUserInteractionTranslateAndZoom } from './common';\r\n\r\ntype PinchEvent =\r\n  | React.TouchEvent\r\n  | TouchEvent\r\n  | React.WheelEvent\r\n  | WheelEvent\r\n  | WebKitGestureEvent;\r\n\r\ntype PinchEventHandler = Handler<'pinch', PinchEvent> | undefined;\r\n\r\ninterface IPinchHandlers {\r\n  onPinch: PinchEventHandler;\r\n  onPinchStart: PinchEventHandler;\r\n  onPinchEnd: PinchEventHandler;\r\n}\r\n\r\nexport function useDiagramPinchHandlers(\r\n  elemToAttachToRef: React.RefObject<HTMLElement>,\r\n  activeRef: React.MutableRefObject<boolean>,\r\n  state: IUserInteractionTranslateAndZoom,\r\n  cancel?: (event: PinchEvent) => boolean\r\n): IPinchHandlers {\r\n  const pinchState = useRef<IPinchState>({\r\n    distance: 0,\r\n    origin: [0, 0],\r\n  });\r\n\r\n  const handlers = useMemo<IPinchHandlers>(\r\n    () => ({\r\n      onPinch: ({ da: [distance], origin }) => {\r\n        if (!activeRef.current || !elemToAttachToRef.current) {\r\n          return;\r\n        }\r\n        const originDiff = subtractPoints(origin, pinchState.current.origin);\r\n\r\n        const rect = elemToAttachToRef.current.getBoundingClientRect();\r\n        const originPositionOnElement = subtractPoints(origin, [\r\n          rect.left,\r\n          rect.top,\r\n        ]);\r\n\r\n        state.tranlsateAndZoomInto(\r\n          originDiff,\r\n          originPositionOnElement,\r\n          distance / pinchState.current.distance\r\n        );\r\n\r\n        pinchState.current = {\r\n          distance,\r\n          origin,\r\n        };\r\n      },\r\n      onPinchStart: ({ da: [distance], origin, event }) => {\r\n        if (cancel && cancel(event)) {\r\n          return;\r\n        }\r\n\r\n        pinchState.current = {\r\n          distance,\r\n          origin,\r\n        };\r\n        activeRef.current = true;\r\n      },\r\n      onPinchEnd: () => (activeRef.current = false),\r\n    }),\r\n    [elemToAttachToRef, activeRef, state, cancel]\r\n  );\r\n\r\n  return handlers;\r\n}\r\n\r\ninterface IPinchState {\r\n  distance: number;\r\n  origin: Vector2;\r\n}\r\n","import { useMemo } from 'react';\r\nimport { Handler } from 'react-use-gesture/dist/types';\r\nimport {\r\n  subtractPoints,\r\n} from '../../utils';\r\nimport { IUserInteractionTranslateAndZoom } from './common';\r\n\r\nexport function useDiagramWheelHandler(\r\n  elemToAttachToRef: React.RefObject<HTMLElement>,\r\n  activeRef: React.MutableRefObject<boolean>,\r\n  state: IUserInteractionTranslateAndZoom\r\n): IWheelHandler {\r\n  const handlers = useMemo<IWheelHandler>(\r\n    () => ({\r\n      onWheel: ({\r\n        direction: [_, yDirection],\r\n        event: { clientX, clientY },\r\n      }) => {\r\n        if (!elemToAttachToRef.current) return;\r\n        const rect = elemToAttachToRef.current.getBoundingClientRect();\r\n\r\n        const mousePositionOnElement = subtractPoints(\r\n          [clientX, clientY],\r\n          [rect.left, rect.top]\r\n        );\r\n\r\n        let factor = 0.9;\r\n        if (yDirection < 0) {\r\n          factor = 1 / factor;\r\n        }\r\n\r\n        state.tranlsateAndZoomInto(\r\n          [0, 0],\r\n          mousePositionOnElement,\r\n          factor\r\n        );\r\n      },\r\n    }),\r\n    [elemToAttachToRef, activeRef, state]\r\n  );\r\n\r\n  return handlers;\r\n}\r\n\r\ntype WheelEventHandler =\r\n  | Handler<'wheel', React.WheelEvent<Element> | WheelEvent>\r\n  | undefined;\r\n\r\ninterface IWheelHandler {\r\n  onWheel: WheelEventHandler;\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useRootStore } from '../hooks/useRootStore';\r\n\r\nexport const MiniControlWrapper = observer(() => {\r\n  const rootStore = useRootStore();\r\n  const minicontrolComponentState = rootStore.diagramSettings.miniControlComponentState;\r\n  return (\r\n    minicontrolComponentState.component && (\r\n      <minicontrolComponentState.component\r\n        rootStore={rootStore}\r\n        settings={minicontrolComponentState.settings}\r\n      />\r\n    )\r\n  );\r\n});\r\n","import React from 'react';\r\nimport { LinksLayer } from './LinksLayer';\r\nimport { NodesLayer } from './NodesLayer';\r\nimport { useDiagramUserInteraction } from '../hooks/userInteractions/useDiagramUserInteraction';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useRootStore } from '../hooks/useRootStore';\r\nimport { BackgroundWrapper } from './BackgroundWrapper';\r\nimport { MiniControlWrapper } from './MiniControlWrapper';\r\n\r\nexport interface IDiagramInnerProps {\r\n  diagramStyles?: React.CSSProperties;\r\n}\r\n\r\nexport const InnerDiagram = observer<IDiagramInnerProps>((props) => {\r\n  const rootStore = useRootStore();\r\n  const { transform } = useDiagramUserInteraction();\r\n\r\n  return (\r\n    <div\r\n      ref={rootStore.diagramState.diagramInnerRef}\r\n      style={{ ...props.diagramStyles }}\r\n      className='react_fast_diagram_DiagramInner'\r\n    >\r\n      <BackgroundWrapper />\r\n      <div\r\n        className='react_fast_diagram_DiagramInner_DraggablePart'\r\n        style={{\r\n          transform: transform,\r\n        }}\r\n      >\r\n        <LinksLayer linksStore={rootStore.linksStore} />\r\n        <NodesLayer nodesStore={rootStore.nodesStore} />\r\n      </div>\r\n      <MiniControlWrapper />\r\n    </div>\r\n  );\r\n});\r\n\r\nInnerDiagram.displayName = 'InnerDiagram';\r\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { PortState } from './portState';\r\nimport { RootStore } from './rootStore';\r\n\r\nexport class Callbacks implements ICallbacks {\r\n  private _validateLinkEndpoints?: (\r\n    source: PortState,\r\n    target: PortState,\r\n    rootStore: RootStore\r\n  ) => boolean;\r\n  private _rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this._rootStore = rootStore;\r\n  }\r\n\r\n  import = (callbacks?: ICallbacks) => {\r\n    this._validateLinkEndpoints = callbacks?.validateLinkEndpoints;\r\n  };\r\n\r\n  export = () => ({\r\n    validateLinkEndpoints: this._validateLinkEndpoints,\r\n  });\r\n\r\n  get validateLinkEndpoints() {\r\n    return this._validateLinkEndpoints;\r\n  }\r\n}\r\n\r\nexport interface ICallbacks {\r\n  validateLinkEndpoints?: Callbacks['validateLinkEndpoints'];\r\n}\r\n","import { ILinkPathConstructor } from '../states/linksSettings';\r\nimport { Point } from '../types/common';\r\nimport { distanceBetweenPoints, roundPoint } from '../utils';\r\n\r\nfunction curvedLinkPathConstructor(\r\n  source: Point,\r\n  target: Point,\r\n  sourcePortType: string | undefined,\r\n  targetPortType: string | undefined,\r\n  settings: ICurvedLinkPathConstructorSettings\r\n): string {\r\n  if (!source || !target) return '';\r\n  source = roundPoint(source);\r\n  target = roundPoint(target);\r\n\r\n  const sourceStr = `${source[0]}, ${source[1]}`;\r\n  const targetStr = `${target[0]}, ${target[1]}`;\r\n\r\n  const directionFactor = settings.tweakDirectionFactorBasedOnDistance(\r\n    distanceBetweenPoints(source, target),\r\n    settings.directionFactor\r\n  );\r\n\r\n  function getControl(endpoint: Point, portType: string | undefined): string {\r\n    const linkDirection =\r\n      portType && settings.portTypeToLinkDirectionMapping[portType];\r\n    switch (linkDirection) {\r\n      case 'left':\r\n        return `${endpoint[0] - directionFactor}, ${endpoint[1]}`;\r\n      case 'up':\r\n        return `${endpoint[0]}, ${endpoint[1] - directionFactor}`;\r\n      case 'right':\r\n        return `${endpoint[0] + directionFactor}, ${endpoint[1]}`;\r\n      case 'down':\r\n        return `${endpoint[0]}, ${endpoint[1] + directionFactor}`;\r\n      default:\r\n        return `${endpoint[0]}, ${endpoint[1]}`;\r\n    }\r\n  }\r\n\r\n  if (sourcePortType || targetPortType) {\r\n    const sourceControl = getControl(source, sourcePortType);\r\n    const targetControl = getControl(target, targetPortType);\r\n    return `M ${sourceStr} C ${sourceControl} ${targetControl}, ${targetStr}`;\r\n  } else {\r\n    return `M ${sourceStr} Q ${target[0]}, ${source[1]}, ${targetStr}`;\r\n  }\r\n}\r\n\r\nexport interface ICurvedLinkPathConstructorSettings {\r\n  portTypeToLinkDirectionMapping: {\r\n    [key: string]: 'left' | 'right' | 'up' | 'down';\r\n  };\r\n  directionFactor: number;\r\n  tweakDirectionFactorBasedOnDistance: (\r\n    distance: number,\r\n    directionFactor: number\r\n  ) => number;\r\n}\r\n\r\nconst defualtSettings: ICurvedLinkPathConstructorSettings = {\r\n  portTypeToLinkDirectionMapping: {\r\n    left: 'left',\r\n    right: 'right',\r\n    top: 'up',\r\n    bottom: 'down',\r\n  },\r\n  directionFactor: 60,\r\n  tweakDirectionFactorBasedOnDistance: (distance, directionFactor) => {\r\n    if (distance < 100) {\r\n      return directionFactor * (distance / 100);\r\n    }\r\n    return directionFactor;\r\n  },\r\n};\r\n\r\nexport function createCurvedLinkPathConstructor(\r\n  settings?: Partial<ICurvedLinkPathConstructorSettings>\r\n): ILinkPathConstructor {\r\n  return (\r\n    source: Point,\r\n    target: Point,\r\n    sourcePortType: string | undefined,\r\n    targetPortType: string | undefined\r\n  ) =>\r\n    curvedLinkPathConstructor(\r\n      source,\r\n      target,\r\n      sourcePortType,\r\n      targetPortType,\r\n      settings ? { ...defualtSettings, ...settings } : defualtSettings\r\n    );\r\n}\r\n","import { makeAutoObservable } from 'mobx';\r\nimport { Point } from '..';\r\n\r\nexport class HtmlElementRefState {\r\n  private _currentInternal: HTMLDivElement | null;\r\n\r\n  constructor(initValue: HTMLDivElement | null) {\r\n    this._currentInternal = initValue;\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  get current() {\r\n    return this._currentInternal;\r\n  }\r\n\r\n  set current(value: HTMLDivElement | null) {\r\n    this._currentInternal = value;\r\n  }\r\n\r\n  offsetRelativeToParent = (parent: HTMLElement): Point | null => {\r\n    if (this.current) {\r\n      let iterElement = this.current as HTMLElement | null;\r\n      let acumLeft = 0;\r\n      let acumTop = 0;\r\n\r\n      while (parent !== iterElement && iterElement) {\r\n        acumLeft += iterElement.offsetLeft;\r\n        acumTop += iterElement.offsetTop;\r\n        iterElement = iterElement.parentElement;\r\n      }\r\n\r\n      return [acumLeft, acumTop];\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  get realSize(): Point | null {\r\n    if (this.current) {\r\n      return [this.current.clientWidth, this.current.clientHeight];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport interface IHtmlElementRect {\r\n  left: number;\r\n  top: number;\r\n  width: number;\r\n  height: number;\r\n}\r\n","import { Point } from '../types/common';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { RootStore } from './rootStore';\r\nimport {\r\n  IUserInteractionTranslateAndZoom,\r\n  IUserInteractionTranslate,\r\n} from '../hooks/userInteractions/common';\r\nimport {\r\n  clampValue,\r\n  generateTransform,\r\n  subtractPoints,\r\n  multiplyPoint,\r\n  addPoints,\r\n  deepCopy,\r\n} from '../utils';\r\nimport { HtmlElementRefState } from './htmlElementRefState';\r\n\r\nexport class DiagramState\r\n  implements IUserInteractionTranslate, IUserInteractionTranslateAndZoom {\r\n  private _offset: Point;\r\n  private _zoom: number;\r\n  private _diagramInnerRef: HtmlElementRefState;\r\n  private _rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this._diagramInnerRef = new HtmlElementRefState(null);\r\n    this._rootStore = rootStore;\r\n    this.import();\r\n    \r\n    makeAutoObservable(this, {\r\n      // @ts-ignore\r\n      _rootStore: false,\r\n    });\r\n  }\r\n\r\n  import = (state?: IDiagramState) => {\r\n    this.setOffset(state?.offset);\r\n    this.setZoom(state?.zoom);\r\n  };\r\n\r\n  export = (): IDiagramState =>\r\n    deepCopy({\r\n      offset: this._offset,\r\n      zoom: this._zoom,\r\n    });\r\n\r\n  setOffset = (newOffset: Point | null | undefined) => {\r\n    this._offset = newOffset ?? [0, 0];\r\n  };\r\n\r\n  setZoom = (newZoom: number | null | undefined) => {\r\n    this._zoom = clampValue(\r\n      newZoom ?? 1,\r\n      this._rootStore.diagramSettings.scaleInterval\r\n    );\r\n  };\r\n\r\n  zoomIn = () => this._rootStore.diagramState.zoomIntoCenter(1 / 0.8);\r\n  zoomOut = () => this._rootStore.diagramState.zoomIntoCenter(0.8);\r\n\r\n  setTransformation = (newOffset: Point, newZoom: number) => {\r\n    this.setOffset(newOffset);\r\n    this.setZoom(newZoom);\r\n  };\r\n\r\n  // See: https://stackoverflow.com/a/30039971/9142642\r\n  zoomInto = (pointToZoomInto: Point, zoomMultiplicator: number) => {\r\n    const newZoom = clampValue(\r\n      this._zoom * zoomMultiplicator,\r\n      this._rootStore.diagramSettings.scaleInterval\r\n    );\r\n\r\n    const pointDisplacementAfterZoom = multiplyPoint(\r\n      subtractPoints(pointToZoomInto, this._offset),\r\n      newZoom / this._zoom\r\n    );\r\n\r\n    this.setTransformation(\r\n      // Compensate for the displacement by moving the point back under the cursor\r\n      subtractPoints(pointToZoomInto, pointDisplacementAfterZoom),\r\n      newZoom\r\n    );\r\n  };\r\n\r\n  translate = (translateBy: Point) => {\r\n    this.setOffset(addPoints(this._offset, translateBy));\r\n  };\r\n\r\n  tranlsateAndZoomInto = (\r\n    translateBy: Point,\r\n    pointToZoomInto: Point,\r\n    zoomMultiplicator: number\r\n  ) => {\r\n    this.translate(translateBy);\r\n    this.zoomInto(pointToZoomInto, zoomMultiplicator);\r\n  };\r\n\r\n  zoomIntoCenter = (zoomMultiplicator: number) => {\r\n    const diagramRealSize = this._diagramInnerRef.realSize;\r\n    if (!diagramRealSize) return;\r\n\r\n    this._rootStore.diagramState.zoomInto(\r\n      multiplyPoint(diagramRealSize, 0.5),\r\n      zoomMultiplicator\r\n    );\r\n  };\r\n\r\n  get transformString() {\r\n    return generateTransform(this._offset, this._zoom);\r\n  }\r\n\r\n  get diagramInnerRef() {\r\n    return this._diagramInnerRef;\r\n  }\r\n\r\n  get offset() {\r\n    return this._offset;\r\n  }\r\n\r\n  get zoom() {\r\n    return this._zoom;\r\n  }\r\n}\r\n\r\nexport interface IDiagramState {\r\n  offset: Point;\r\n  zoom: number;\r\n}\r\n","import { makeAutoObservable } from 'mobx';\r\nimport { Point } from '../types/common';\r\nimport { addPoints } from '../utils';\r\n\r\nexport class LinkPointEndpointState {\r\n  private _point: Point;\r\n\r\n  constructor(pos: Point) {\r\n    this._point = pos;\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  get point() {\r\n    return this._point;\r\n  }\r\n\r\n  translateBy = (pointToTranslateBy: Point) => {\r\n    this._point = addPoints(this._point, pointToTranslateBy);\r\n  };\r\n}\r\n","import { makeAutoObservable } from 'mobx';\r\nimport { createLinkPath, ILinkPath, LinkPortEndpointState, Point } from '..';\r\nimport { addPoints } from '../utils';\r\nimport { LinkPointEndpointState } from './LinkPointEndpointState';\r\nimport { PortState } from './portState';\r\nimport { RootStore } from './rootStore';\r\n\r\nexport class LinkCreationState {\r\n  private _source: LinkPortEndpointState | null = null;\r\n  private _target: LinkPointEndpointState | null = null;\r\n  private _targetPortCandidate: PortState | null = null;\r\n\r\n  private _rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    makeAutoObservable(this);\r\n    this._rootStore = rootStore;\r\n  }\r\n\r\n  get source() {\r\n    return this._source;\r\n  }\r\n\r\n  get target() {\r\n    return this._target;\r\n  }\r\n\r\n  get targetPortCandidate() {\r\n    return this._targetPortCandidate;\r\n  }\r\n\r\n  startLinking = (\r\n    portState: PortState,\r\n    eventOffsetRelativeToTarget: Point | undefined\r\n  ): boolean => {\r\n    this._resetProps();\r\n    this._source = new LinkPortEndpointState(\r\n      portState.nodeId,\r\n      portState.id,\r\n      this._rootStore\r\n    );\r\n\r\n    let targetPoint: Point;\r\n    if (portState.offsetRelativeToNode && eventOffsetRelativeToTarget) {\r\n      targetPoint = addPoints(\r\n        addPoints(portState.offsetRelativeToNode, portState.node.position),\r\n        eventOffsetRelativeToTarget\r\n      );\r\n    } else {\r\n      const sourcePoint = this._source.point;\r\n      if (sourcePoint) {\r\n        targetPoint = sourcePoint;\r\n      } else {\r\n        this._resetProps();\r\n        return false;\r\n      }\r\n    }\r\n\r\n    this._target = new LinkPointEndpointState(targetPoint);\r\n\r\n    return true;\r\n  };\r\n\r\n  setTargetPortCandidate = (portState: PortState) => {\r\n    if (!this._source) return;\r\n\r\n    const canAddLink = this._rootStore.linksStore.canAddLink({\r\n      source: {\r\n        nodeId: this._source.nodeId,\r\n        portId: this._source.portId,\r\n      },\r\n      target: {\r\n        nodeId: portState.nodeId,\r\n        portId: portState.id,\r\n      },\r\n    });\r\n\r\n    this._targetPortCandidate = portState;\r\n    if (canAddLink.success) {\r\n      portState.validForConnection = true;\r\n    } else {\r\n      portState.validForConnection = false;\r\n    }\r\n  };\r\n\r\n  resetTargetPortCandidate = (portState: PortState) => {\r\n    if (this._targetPortCandidate === portState) {\r\n      this._targetPortCandidate = null;\r\n    }\r\n    portState.validForConnection = true;\r\n  };\r\n\r\n  stopLinking = () => {\r\n    if (this._targetPortCandidate && this._source) {\r\n      this._rootStore.linksStore.addLink({\r\n        source: {\r\n          nodeId: this._source.nodeId,\r\n          portId: this._source.portId,\r\n        },\r\n        target: {\r\n          nodeId: this._targetPortCandidate.nodeId,\r\n          portId: this._targetPortCandidate.id,\r\n        },\r\n      });\r\n    }\r\n    this._resetProps();\r\n  };\r\n\r\n  get componentDefinition() {\r\n    const { visualComponents } = this._rootStore.linksSettings;\r\n    return visualComponents.getComponent(linkCreationComponentType);\r\n  }\r\n\r\n  get path(): ILinkPath | undefined {\r\n    if (!this._source || !this._target) return undefined;\r\n    else return createLinkPath(this._rootStore, this._source, this._target);\r\n  }\r\n\r\n  private _resetProps = () => {\r\n    if (this._source) {\r\n      this._source.port.validForConnection = true;\r\n      this._source = null;\r\n    }\r\n    this._target = null;\r\n    if (this._targetPortCandidate) {\r\n      this._targetPortCandidate.validForConnection = true;\r\n      this._targetPortCandidate = null;\r\n    }\r\n  };\r\n}\r\n\r\nexport const linkCreationComponentType: string = 'linkCreation';\r\n","import { makeAutoObservable } from 'mobx';\r\nimport { Point } from '../types/common';\r\nimport { addPoints } from '../utils';\r\n\r\nexport class LinkPointEndpointState {\r\n  private _point: Point;\r\n\r\n  constructor(pos: Point) {\r\n    this._point = pos;\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  get point() {\r\n    return this._point;\r\n  }\r\n\r\n  translateBy = (pointToTranslateBy: Point) => {\r\n    this._point = addPoints(this._point, pointToTranslateBy);\r\n  };\r\n}\r\n","import { makeAutoObservable } from 'mobx';\r\nimport { Point } from '../types/common';\r\nimport { RootStore } from './rootStore';\r\nimport { PortState } from './portState';\r\nimport { NodeState } from './nodeState';\r\nimport { addPoints, deepCopy, multiplyPoint } from '../utils';\r\n\r\nexport class LinkPortEndpointState implements ILinkPortEndpoint {\r\n  private _nodeId: string;\r\n  private _portId: string;\r\n\r\n  private _rootStore: RootStore;\r\n\r\n  constructor(nodeId: string, portId: string, rootStore: RootStore) {\r\n    this._nodeId = nodeId;\r\n    this._portId = portId;\r\n    rootStore.nodesStore\r\n      .getNodeOrThrowException(this._nodeId)\r\n      .getPortOrThrowException(this._portId);\r\n    makeAutoObservable(this);\r\n    this._rootStore = rootStore;\r\n  }\r\n\r\n  export = (): ILinkPortEndpoint =>\r\n    deepCopy({\r\n      nodeId: this._nodeId,\r\n      portId: this._portId,\r\n    });\r\n\r\n  get nodeId() {\r\n    return this._nodeId;\r\n  }\r\n\r\n  get portId() {\r\n    return this._portId;\r\n  }\r\n\r\n  get node(): NodeState {\r\n    return this._rootStore.nodesStore.getNodeOrThrowException(this._nodeId);\r\n  }\r\n\r\n  get port(): PortState {\r\n    return this.node.getPortOrThrowException(this._portId);\r\n  }\r\n\r\n  get point(): Point | undefined {\r\n    if (this.port.offsetRelativeToNode && this.port.realSize) {\r\n      return addPoints(\r\n        this.node.position,\r\n        addPoints(\r\n          this.port.offsetRelativeToNode,\r\n          multiplyPoint(this.port.realSize, 0.5)\r\n        )\r\n      );\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport interface ILinkPortEndpoint {\r\n  nodeId: string;\r\n  portId: string;\r\n}\r\n\r\nexport function linkPortEndpointsEquals(\r\n  a: ILinkPortEndpoint,\r\n  b: ILinkPortEndpoint\r\n): boolean {\r\n  return a.nodeId === b.nodeId && a.portId === b.portId;\r\n}\r\n","import React from 'react';\r\nimport { LinkCreationState } from '../states';\r\nimport { ILinkVisualComponentProps } from '../states/linksSettings';\r\nimport { IComponentDefinition } from '../states/visualComponentState';\r\n\r\nexport const LinkDefault: React.FC<\r\n  ILinkVisualComponentProps<ILinkDefaultSettings>\r\n> = (props) => {\r\n  const settings = props.settings ?? linkDefaultSettings;\r\n  const path = props.entity.path;\r\n  if (!path) return null;\r\n\r\n  return (\r\n    <g>\r\n      <path\r\n        ref={props.draggableRef}\r\n        d={path.svgPath}\r\n        stroke={settings.color}\r\n        strokeWidth={settings.strokeWidth}\r\n        fill='none'\r\n      />\r\n      {props.entity instanceof LinkCreationState && (\r\n        <circle\r\n          cx={path.target[0]}\r\n          cy={path.target[1]}\r\n          r={settings.cirleRadius}\r\n          fill='orange'\r\n        />\r\n      )}\r\n    </g>\r\n  );\r\n};\r\n\r\nexport interface ILinkDefaultSettings {\r\n  color: string;\r\n  strokeWidth: number;\r\n  cirleRadius: number;\r\n}\r\n\r\nconst linkDefaultSettings: ILinkDefaultSettings = {\r\n  color: 'LightBlue',\r\n  strokeWidth: 3,\r\n  cirleRadius: 3,\r\n};\r\n\r\nexport function createLinkDefault(\r\n  settings?: Partial<ILinkDefaultSettings>\r\n): IComponentDefinition<ILinkVisualComponentProps, ILinkDefaultSettings> {\r\n  const finaleSettings = {\r\n    ...linkDefaultSettings,\r\n    ...(settings ? settings : {}),\r\n  };\r\n\r\n  return {\r\n    component: LinkDefault,\r\n    settings: finaleSettings,\r\n  };\r\n}\r\n\r\n// <g>\r\n//       {/* Main line */}\r\n//       <path d={points} stroke={linkColor} strokeWidth=\"3\" fill=\"none\" />\r\n//       {/* Thick line to make selection easier */}\r\n//       <path\r\n//         d={points}\r\n//         stroke={linkColor}\r\n//         strokeWidth=\"20\"\r\n//         fill=\"none\"\r\n//         strokeLinecap=\"round\"\r\n//         strokeOpacity={isHovered || isSelected ? 0.1 : 0}\r\n//         onMouseEnter={() => onLinkMouseEnter({ config, linkId: link.id })}\r\n//         onMouseLeave={() => onLinkMouseLeave({ config, linkId: link.id })}\r\n//         onClick={(e) => {\r\n//           onLinkClick({ config, linkId: link.id })\r\n//           e.stopPropagation()\r\n//         }}\r\n//       />\r\n//     </g>\r\n","import { makeAutoObservable } from 'mobx';\r\nimport {\r\n  IComponentDefinition,\r\n  IVisualComponentProps,\r\n  VisualComponent,\r\n  VisualComponentState,\r\n} from '.';\r\nimport { Dictionary } from '../types/common';\r\n\r\nexport class VisualComponents<\r\n  TEntity,\r\n  TComponentProps extends IVisualComponentProps<TEntity>\r\n> {\r\n  private _defaultType: string = componentDefaultType;\r\n  private _defaultComponents: Dictionary<VisualComponentState<TComponentProps>>;\r\n  private _components: Dictionary<VisualComponentState<TComponentProps>>;\r\n\r\n  constructor(\r\n    defaultComponents: Dictionary<\r\n      IComponentDefinition<TComponentProps> | VisualComponent<TComponentProps>\r\n    >\r\n  ) {\r\n    this._defaultComponents = this._createComponentCollection(\r\n      defaultComponents\r\n    );\r\n    this._components = { ...this._defaultComponents };\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  import = (obj?: IVisualComponentsObject<TComponentProps>) => {\r\n    this.setDefaultType(obj?.defaultNodeType);\r\n\r\n    this._components = {\r\n      ...this._defaultComponents,\r\n      ...this._createComponentCollection(obj?.components),\r\n    };\r\n  };\r\n\r\n  getComponent = (\r\n    type: string | undefined | null\r\n  ): VisualComponentState<TComponentProps> => {\r\n    const finalComponentType = type ?? this.defaultType;\r\n    return (\r\n      this._components[finalComponentType] ?? this._components[this.defaultType]\r\n    );\r\n  };\r\n\r\n  get defaultType() {\r\n    return this._defaultType;\r\n  }\r\n\r\n  setDefaultType = (value: string | undefined | null) => {\r\n    this._defaultType = value ?? componentDefaultType;\r\n  };\r\n\r\n  private _createComponentCollection = (\r\n    componentsObjects?: Dictionary<\r\n      IComponentDefinition<TComponentProps> | VisualComponent<TComponentProps>\r\n    >\r\n  ): Dictionary<VisualComponentState<TComponentProps>> => {\r\n    const collection: Dictionary<VisualComponentState<TComponentProps>> = {};\r\n\r\n    componentsObjects &&\r\n      Object.entries(componentsObjects).forEach(([key, value]) => {\r\n        collection[key] = new VisualComponentState<TComponentProps>(value);\r\n      });\r\n\r\n    return collection;\r\n  };\r\n}\r\n\r\nexport const componentDefaultType = 'default';\r\n\r\nexport interface IVisualComponentsObject<TComponentProps> {\r\n  defaultNodeType?: string;\r\n  components: Dictionary<\r\n    IComponentDefinition<TComponentProps> | VisualComponent<TComponentProps>\r\n  >;\r\n}\r\n","import { createLinkDefault, LinkDefault } from '../components/LinkDefault';\r\nimport {\r\n  componentDefaultType,\r\n  IVisualComponentsObject,\r\n  VisualComponents,\r\n} from './visualComponents';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { LinkState } from './linkState';\r\nimport { createCurvedLinkPathConstructor } from '../linkConstructors/curved';\r\nimport { Point } from '../types/common';\r\nimport { IVisualComponentProps } from '.';\r\nimport {\r\n  linkCreationComponentType,\r\n  LinkCreationState,\r\n} from './linkCreationState';\r\n\r\nexport class LinksSettings {\r\n  private _pathConstructor = defaultPathConstructor;\r\n  private _visualComponents = new VisualComponents<\r\n    LinkState | LinkCreationState,\r\n    ILinkVisualComponentProps\r\n  >({\r\n    [componentDefaultType]: LinkDefault,\r\n    [linkCreationComponentType]: createLinkDefault({\r\n      color: '#49f860',\r\n      strokeWidth: 3,\r\n    }),\r\n  });\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  import = (obj?: ILinksSettings) => {\r\n    this._visualComponents.import(obj);\r\n    this.setPathConstructor(obj?.pathConstructor);\r\n  };\r\n\r\n  get pathConstructor() {\r\n    return this._pathConstructor;\r\n  }\r\n\r\n  setPathConstructor = (value: ILinkPathConstructor | null | undefined) => {\r\n    this._pathConstructor = value ?? defaultPathConstructor;\r\n  }\r\n\r\n  get visualComponents() {\r\n    return this._visualComponents;\r\n  }\r\n}\r\n\r\nconst defaultPathConstructor = createCurvedLinkPathConstructor();\r\n\r\nexport interface ILinkVisualComponentProps<TSettings extends {} = {}>\r\n  extends IVisualComponentProps<LinkState | LinkCreationState, TSettings> {\r\n  draggableRef: React.RefObject<any>;\r\n}\r\n\r\nexport interface ILinksSettings\r\n  extends IVisualComponentsObject<ILinkVisualComponentProps> {\r\n  pathConstructor: ILinkPathConstructor;\r\n}\r\n\r\nexport type ILinkPathConstructor = (\r\n  source: Point,\r\n  target: Point,\r\n  sourcePortType: string | undefined,\r\n  targetPortType: string | undefined\r\n) => string;\r\n","export type Point = [number, number];\r\n\r\nexport interface Dictionary<TValue> {\r\n  [key: string]: TValue;\r\n}\r\n\r\nexport type RelativePosition = 'left' | 'top' | 'right' | 'bottom';\r\n\r\nexport type CornerPosition =\r\n  | 'left-top'\r\n  | 'right-top'\r\n  | 'right-bottom'\r\n  | 'left-bottom';\r\n\r\nexport type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\r\n\r\nexport type SuccessOrErrorResult =\r\n  | { success: true }\r\n  | { success: false; error: string };\r\n\r\nexport const SuccessResult = () : SuccessOrErrorResult => ({success: true})\r\nexport const ErrorResult = (error: string) : SuccessOrErrorResult => ({success: false, error})","import { makeAutoObservable } from 'mobx';\r\nimport { Point } from '../types/common';\r\nimport { RootStore } from './rootStore';\r\nimport {\r\n  LinkPortEndpointState,\r\n  ILinkPortEndpoint,\r\n} from './linkPortEndpointState';\r\nimport { componentDefaultType } from './visualComponents';\r\nimport { LinkPointEndpointState } from './LinkPointEndpointState';\r\nimport { deepCopy } from '../utils';\r\n\r\nexport class LinkState implements ILinkState {\r\n  private _id: string;\r\n  private _componentType: string;\r\n  private _source: LinkPortEndpointState;\r\n  private _target: LinkPortEndpointState;\r\n  private _segments: ILinkSegment[];\r\n  private _extra: any;\r\n\r\n  private _rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore, id: string, state: ILinkStateWithoutId) {\r\n    this._rootStore = rootStore;\r\n\r\n    this._id = id;\r\n    this.import(state);\r\n\r\n    makeAutoObservable(this, {\r\n      // @ts-ignore\r\n      _rootStore: false,\r\n    });\r\n  }\r\n\r\n  import = (state: ILinkStateWithoutId) => {\r\n    this._source = this._createEndpointState(state.source);\r\n    this._target = this._createEndpointState(state.target);\r\n    this.setComponentType(state.componentType);\r\n    this.setSegments(state.segments);\r\n    this.setExtra(state.extra);\r\n  };\r\n\r\n  export = (): ILinkStateWithId => ({\r\n    source: this.source.export(),\r\n    target: this.target.export(),\r\n    ...deepCopy({\r\n      id: this._id,\r\n      componentType: this.componentType,\r\n      segments: this.segments,\r\n      extra: this.extra,\r\n    }),\r\n  });\r\n\r\n  get id() {\r\n    return this._id;\r\n  }\r\n\r\n  get componentType() {\r\n    return this._componentType;\r\n  }\r\n\r\n  setComponentType = (value: string | null | undefined) => {\r\n    this._componentType = value ?? componentDefaultType;\r\n  }\r\n\r\n  get segments() {\r\n    return this._segments;\r\n  }\r\n\r\n  setSegments = (value: ILinkSegment[] | null | undefined) => {\r\n    this._segments = value ?? [];\r\n  }\r\n\r\n  get path(): ILinkPath | undefined {\r\n    return createLinkPath(this._rootStore, this.source, this.target);\r\n  }\r\n\r\n  get componentDefinition() {\r\n    const { visualComponents } = this._rootStore.linksSettings;\r\n    return visualComponents.getComponent(this.componentType);\r\n  }\r\n\r\n  get extra() {\r\n    return this._extra;\r\n  }\r\n\r\n  get source() {\r\n    return this._source;\r\n  }\r\n\r\n  get target() {\r\n    return this._target;\r\n  }\r\n\r\n  setExtra = (value: any) => {\r\n    this._extra = value ?? null;\r\n  }\r\n\r\n  private _createEndpointState = (\r\n    endpoint: ILinkPortEndpoint\r\n  ): LinkPortEndpointState => {\r\n    return new LinkPortEndpointState(\r\n      endpoint.nodeId,\r\n      endpoint.portId,\r\n      this._rootStore\r\n    );\r\n  };\r\n}\r\n\r\nexport function createLinkPath(\r\n  rootStore: RootStore,\r\n  source: LinkPortEndpointState,\r\n  target: LinkPortEndpointState | LinkPointEndpointState\r\n): ILinkPath | undefined {\r\n  const { linksSettings } = rootStore;\r\n  if (!source.point || !target.point) {\r\n    return undefined;\r\n  }\r\n\r\n  const pathStr = linksSettings.pathConstructor(\r\n    source.point,\r\n    target.point,\r\n    source.port.type,\r\n    target instanceof LinkPointEndpointState ? undefined : target.port.type\r\n  );\r\n\r\n  return {\r\n    svgPath: pathStr,\r\n    source: source.point,\r\n    target: target.point,\r\n  };\r\n}\r\n\r\nexport interface ILinkStateWithoutId {\r\n  componentType?: string;\r\n  source: ILinkPortEndpoint;\r\n  target: ILinkPortEndpoint;\r\n  segments?: ILinkSegment[];\r\n  extra?: any;\r\n}\r\n\r\nexport interface ILinkStateWithId extends ILinkStateWithoutId {\r\n  id: string;\r\n}\r\n\r\nexport interface ILinkState extends ILinkStateWithoutId {\r\n  id?: string;\r\n}\r\n\r\nexport interface ILinkSegment {\r\n  position: Point;\r\n}\r\n\r\nexport interface ILinkPath {\r\n  svgPath: string;\r\n  source: Point;\r\n  target: Point;\r\n}\r\n","import { makeAutoObservable } from 'mobx';\r\nimport {\r\n  Dictionary,\r\n  ErrorResult,\r\n  SuccessOrErrorResult,\r\n  SuccessResult,\r\n} from '../types/common';\r\nimport { guidForcedUniqueness } from '../utils';\r\nimport { LinkCreationState } from './linkCreationState';\r\nimport {\r\n  ILinkPortEndpoint,\r\n  linkPortEndpointsEquals,\r\n} from './linkPortEndpointState';\r\nimport { ILinkState, LinkState } from './linkState';\r\nimport { PortState } from './portState';\r\nimport { RootStore } from './rootStore';\r\n\r\nexport class LinksStore {\r\n  private _links: Dictionary<LinkState>;\r\n  private _nodesLinksCollection: Dictionary<LinkState[]>;\r\n  private _linkCreation: LinkCreationState;\r\n\r\n  private _rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this._linkCreation = new LinkCreationState(rootStore);\r\n    this.import();\r\n    makeAutoObservable(this);\r\n    this._rootStore = rootStore;\r\n  }\r\n\r\n  import = (newLinks?: ILinkState[]) => {\r\n    this._links = {};\r\n    this._nodesLinksCollection = {};\r\n    newLinks && newLinks.forEach(this.addLink);\r\n  };\r\n\r\n  export = (): ILinkState[] =>\r\n    Object.values(this._links).map((l) => l.export());\r\n\r\n  get links(): Readonly<Dictionary<LinkState>> {\r\n    return this._links;\r\n  }\r\n\r\n  get linkCreation() {\r\n    return this._linkCreation;\r\n  }\r\n\r\n  getNodeLinks = (nodeId: string): LinkState[] => {\r\n    return this._nodesLinksCollection[nodeId] ?? [];\r\n  };\r\n\r\n  removeNodeLinks = (nodeId: string) => {\r\n    const links = this.getNodeLinks(nodeId);\r\n    links.forEach((l) => this.removeLink(l.id));\r\n  };\r\n\r\n  removePortLinks = (nodeId: string, portId: string) => {\r\n    if (!nodeId || !portId) return;\r\n\r\n    const links = this.getNodeLinks(nodeId);\r\n    const endpointToRemove = {\r\n      nodeId,\r\n      portId,\r\n    };\r\n    links.forEach((l) => {\r\n      if (\r\n        linkPortEndpointsEquals(l.source, endpointToRemove) ||\r\n        linkPortEndpointsEquals(l.target, endpointToRemove)\r\n      ) {\r\n        this.removeLink(l.id);\r\n      }\r\n    });\r\n  };\r\n\r\n  addLink = (link: ILinkState): SuccessOrErrorResult => {\r\n    const canAdd = this.canAddLink(link);\r\n    if (!canAdd.success) return canAdd;\r\n\r\n    const newLink = new LinkState(\r\n      this._rootStore,\r\n      link.id ?? guidForcedUniqueness(this._links),\r\n      link\r\n    );\r\n    this._links[newLink.id] = newLink;\r\n    this._addLinkToNodeLinksCollection(newLink, link.source.nodeId);\r\n    this._addLinkToNodeLinksCollection(newLink, link.target.nodeId);\r\n\r\n    return { success: true };\r\n  };\r\n\r\n  removeLink = (linkId: string): boolean => {\r\n    const linkToRemove = this._links[linkId];\r\n    if (linkToRemove) {\r\n      this._removeLinkFromNodeLinksCollection(\r\n        linkToRemove,\r\n        linkToRemove.source.nodeId\r\n      );\r\n      this._removeLinkFromNodeLinksCollection(\r\n        linkToRemove,\r\n        linkToRemove.target.nodeId\r\n      );\r\n\r\n      delete this._links[linkId];\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  canAddLink = (link: ILinkState): SuccessOrErrorResult => {\r\n    if (!link) return ErrorResult(`Cannot add empty`);\r\n    if (link.id && this._links[link.id])\r\n      return ErrorResult(\r\n        `Cannot add link with id '${link.id}', as it already exists`\r\n      );\r\n\r\n    const isSourceValid = this.isEndpointValid(link.source);\r\n    if (!isSourceValid.success) return isSourceValid;\r\n    const isTargetValid = this.isEndpointValid(link.target);\r\n    if (!isTargetValid.success) return isTargetValid;\r\n\r\n    if (link.source.nodeId === link.target.nodeId)\r\n      return ErrorResult(`Link's endpoints are located in the same node`);\r\n\r\n    if (this.areEndpointsConnected(link.source, link.target))\r\n      return ErrorResult(`Link's endpoints are already connected`);\r\n\r\n    if (\r\n      this._rootStore.callbacks.validateLinkEndpoints?.(\r\n        this.getEndpointPort(link.source),\r\n        this.getEndpointPort(link.target),\r\n        this._rootStore\r\n      ) === false\r\n    ) {\r\n      return ErrorResult(\r\n        `Link's endpoints are not valid according to validation callback`\r\n      );\r\n    }\r\n\r\n    return SuccessResult();\r\n  };\r\n\r\n  isEndpointValid = (endpoint: ILinkPortEndpoint): SuccessOrErrorResult => {\r\n    try {\r\n      this.getEndpointPort(endpoint);\r\n    } catch (ex) {\r\n      return ErrorResult('' + ex);\r\n    }\r\n\r\n    return SuccessResult();\r\n  };\r\n\r\n  getEndpointPort = (endpoint: ILinkPortEndpoint): PortState => {\r\n    return this._rootStore.nodesStore\r\n      .getNodeOrThrowException(endpoint.nodeId)\r\n      .getPortOrThrowException(endpoint.portId);\r\n  };\r\n\r\n  areEndpointsConnected = (\r\n    source: ILinkPortEndpoint,\r\n    target: ILinkPortEndpoint\r\n  ): boolean => {\r\n    return !!this.getLinkForEndpointsIfExists(source, target);\r\n  };\r\n\r\n  getLinkForEndpointsIfExists = (\r\n    source: ILinkPortEndpoint,\r\n    target: ILinkPortEndpoint\r\n  ): LinkState | undefined => {\r\n    if (this._nodesLinksCollection[source.nodeId]) {\r\n      return this._nodesLinksCollection[source.nodeId].find(\r\n        (l) =>\r\n          (linkPortEndpointsEquals(l.source, source) &&\r\n            linkPortEndpointsEquals(l.target, target)) ||\r\n          (linkPortEndpointsEquals(l.target, source) &&\r\n            linkPortEndpointsEquals(l.source, target))\r\n      );\r\n    }\r\n  }\r\n\r\n  private _addLinkToNodeLinksCollection = (link: LinkState, nodeId: string) => {\r\n    if (!this._nodesLinksCollection[nodeId])\r\n      this._nodesLinksCollection[nodeId] = [];\r\n    this._nodesLinksCollection[nodeId].push(link);\r\n  }\r\n\r\n  private _removeLinkFromNodeLinksCollection = (link: LinkState, nodeId: string) => {\r\n    let collection = this._nodesLinksCollection[nodeId];\r\n    if (collection) {\r\n      collection = collection.filter((l) => l.id === link.id);\r\n      if (collection.length > 0) {\r\n        this._nodesLinksCollection[nodeId] = collection;\r\n      } else {\r\n        delete this._nodesLinksCollection[nodeId];\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { INodeVisualComponentProps } from '../states/nodesSettings';\r\nimport { useRootStore } from '../hooks/useRootStore';\r\nimport { PortsSettings } from '../states/portsSettings';\r\nimport { IComponentDefinition, PortState } from '../states';\r\nimport { Dictionary, RelativePosition } from '..';\r\n\r\nexport interface INodeDefaultSettings {\r\n  style: React.CSSProperties;\r\n}\r\n\r\nexport const NodeDefault: React.FC<\r\n  INodeVisualComponentProps<INodeDefaultSettings>\r\n> = ({ entity, settings, draggableRef }) => {\r\n  const { portsSettings } = useRootStore();\r\n\r\n  return (\r\n    <div\r\n      ref={draggableRef}\r\n      className='react_fast_diagram_Node_Default'\r\n      style={settings?.style}\r\n    >\r\n      <span>{entity.id}</span>\r\n\r\n      {generatePortsContainer(portsSettings, entity.ports, 'left', 'left')}\r\n      {generatePortsContainer(portsSettings, entity.ports, 'top', 'top')}\r\n      {generatePortsContainer(portsSettings, entity.ports, 'right', 'right')}\r\n      {generatePortsContainer(portsSettings, entity.ports, 'bottom', 'bottom')}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport function generatePortsContainer(\r\n  portsSettings: PortsSettings,\r\n  ports: Dictionary<PortState>,\r\n  portsType: string,\r\n  position: RelativePosition\r\n) {\r\n  const portsToShow = Object.values(ports).filter(\r\n    (port) => port.type === portsType\r\n  );\r\n  const portsContainer = portsSettings.portsContainerVisualComponents.getComponent(\r\n    position === 'left' || position === 'right' ? 'vertical' : 'horizontal'\r\n  );\r\n\r\n  return (\r\n    portsToShow && (\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          left: position === 'left' ? 0 : undefined,\r\n          top:\r\n            position === 'left' || position === 'right' || position === 'top'\r\n              ? 0\r\n              : undefined,\r\n          right: position === 'right' ? 0 : undefined,\r\n          bottom: position === 'bottom' ? 0 : undefined,\r\n          height:\r\n            position === 'left' || position === 'right' ? '100%' : undefined,\r\n          width:\r\n            position === 'top' || position === 'bottom' ? '100%' : undefined,\r\n        }}\r\n      >\r\n        <portsContainer.component\r\n          entity={portsToShow}\r\n          settings={portsContainer.settings}\r\n        />\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport function createNodeDefault(\r\n  settings?: INodeDefaultSettings\r\n): IComponentDefinition<\r\n  INodeVisualComponentProps<INodeDefaultSettings>,\r\n  INodeDefaultSettings\r\n> {\r\n  return {\r\n    component: NodeDefault,\r\n    settings,\r\n  };\r\n}\r\n","import { makeAutoObservable } from 'mobx';\r\nimport { componentDefaultType, IVisualComponentProps } from '..';\r\nimport { NodeDefault } from '../components/NodeDefault';\r\nimport { NodeState } from './nodeState';\r\nimport { IVisualComponentsObject, VisualComponents } from './visualComponents';\r\n\r\nexport class NodesSettings {\r\n  private _visualComponents: VisualComponents<\r\n    NodeState,\r\n    INodeVisualComponentProps\r\n  > = new VisualComponents<NodeState, INodeVisualComponentProps>({\r\n    [componentDefaultType]: NodeDefault,\r\n  });\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  get visualComponents() {\r\n    return this._visualComponents;\r\n  }\r\n\r\n  import = (obj?: INodesSettings) => {\r\n    this._visualComponents.import(obj);\r\n  };\r\n}\r\n\r\nexport interface INodeVisualComponentProps<TSettings extends {} = {}>\r\n  extends IVisualComponentProps<NodeState, TSettings> {\r\n  draggableRef: React.RefObject<any>;\r\n}\r\n\r\nexport interface INodesSettings\r\n  extends IVisualComponentsObject<INodeVisualComponentProps> {}\r\n","import { Point } from '../types/common';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { HtmlElementRefState } from './htmlElementRefState';\r\nimport { componentDefaultType, NodeState, RootStore } from '.';\r\nimport { deepCopy } from '../utils';\r\n\r\nexport class PortState {\r\n  private _id: string;\r\n  private _nodeId: string;\r\n  private _label: string;\r\n  private _type: string;\r\n\r\n  private _ref: HtmlElementRefState = new HtmlElementRefState(null);\r\n  private _dragging: boolean = false;\r\n  private _hovered: boolean = false;\r\n  private _validForConnection: boolean = true;\r\n\r\n  private _rootStore: RootStore;\r\n\r\n  constructor(\r\n    rootStore: RootStore,\r\n    id: string,\r\n    nodeId: string,\r\n    state?: IPortStateWithoutIds\r\n  ) {\r\n    this._id = id;\r\n    this._nodeId = nodeId;\r\n    this.import(state);\r\n\r\n    makeAutoObservable(this);\r\n    this._rootStore = rootStore;\r\n  }\r\n\r\n  get id() {\r\n    return this._id;\r\n  }\r\n\r\n  get nodeId() {\r\n    return this._nodeId;\r\n  }\r\n\r\n  get ref() {\r\n    return this._ref;\r\n  }\r\n\r\n  get dragging() {\r\n    return this._dragging;\r\n  }\r\n\r\n  set dragging(value: boolean) {\r\n    this._dragging = value;\r\n  }\r\n\r\n  get hovered() {\r\n    return this._hovered;\r\n  }\r\n\r\n  set hovered(value: boolean) {\r\n    this._hovered = value;\r\n  }\r\n\r\n  get validForConnection() {\r\n    return this._validForConnection;\r\n  }\r\n\r\n  set validForConnection(value: boolean) {\r\n    this._validForConnection = value;\r\n  }\r\n\r\n  get label() {\r\n    return this._label;\r\n  }\r\n\r\n  setLabel = (value: string | null | undefined) => {\r\n    this._label = value ?? '';\r\n  }\r\n\r\n  get type() {\r\n    return this._type;\r\n  }\r\n\r\n  setType = (value: string | null | undefined) => {\r\n    this._type = value ?? componentDefaultType;\r\n  }\r\n\r\n  import = (state?: IPortStateWithoutIds) => {\r\n    this.setType(state?.type);\r\n    this.setLabel(state?.label);\r\n  };\r\n\r\n  export = (): IPortStateWithIds =>\r\n    deepCopy({\r\n      id: this._id,\r\n      nodeId: this._nodeId,\r\n      label: this._label,\r\n      type: this._type,\r\n    });\r\n\r\n  get node(): NodeState {\r\n    return this._rootStore.nodesStore.getNodeOrThrowException(this.nodeId);\r\n  }\r\n\r\n  get offsetRelativeToNode(): Point | null {\r\n    if (this.node.ref.current) {\r\n      return this._ref.offsetRelativeToParent(this.node.ref.current);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  get realSize(): Point | null {\r\n    return this._ref.realSize;\r\n  }\r\n}\r\n\r\nexport interface IPortStateWithoutIds {\r\n  label?: string;\r\n  type?: string;\r\n}\r\n\r\nexport interface IPortStateWithIds extends IPortStateWithoutIds {\r\n  id: string;\r\n  nodeId: string;\r\n}\r\n\r\nexport interface IPortState extends IPortStateWithoutIds {\r\n  id?: string;\r\n  nodeId?: string;\r\n}\r\n","import { Dictionary, Point } from '../types/common';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { IPortState, PortState } from './portState';\r\nimport { deepCopy, generateTransform, guidForcedUniqueness } from '../utils';\r\nimport { RootStore } from './rootStore';\r\nimport { HtmlElementRefState } from './htmlElementRefState';\r\nimport { componentDefaultType } from './visualComponents';\r\n\r\nexport class NodeState {\r\n  private _id: string;\r\n  private _position: Point;\r\n  private _ports: Dictionary<PortState>;\r\n  private _ref: HtmlElementRefState;\r\n  private _componentType: string;\r\n  private _extra: any;\r\n\r\n  private _rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore, id: string, state?: INodeStateWithoutId) {\r\n    this._rootStore = rootStore;\r\n\r\n    this._id = id;\r\n    this._ref = new HtmlElementRefState(null);\r\n    this.import(state);\r\n\r\n    makeAutoObservable(this, {\r\n      // @ts-ignore\r\n      _rootStore: false,\r\n    });\r\n  }\r\n\r\n  import = (newState?: INodeStateWithoutId) => {\r\n    this.setPosition(newState?.position);\r\n    this.setComponentType(newState?.componentType);\r\n    this.setExtra(newState?.extra);\r\n\r\n    this._ports = {};\r\n    newState?.ports && newState.ports.forEach(this.addPort);\r\n  };\r\n\r\n  export = (): INodeStateWithId => ({\r\n    ...deepCopy({\r\n      id: this._id,\r\n      position: this._position,\r\n      componentType: this.componentType,\r\n      extra: this.extra,\r\n    }),\r\n    ports: Object.values(this._ports).map((p) => p.export()),\r\n  });\r\n\r\n  get id() {\r\n    return this._id;\r\n  }\r\n\r\n  get position() {\r\n    return this._position;\r\n  }\r\n\r\n  setPosition = (value: Point | null | undefined) => {\r\n    this._position = value ?? [0, 0];\r\n  };\r\n\r\n  get componentType() {\r\n    return this._componentType;\r\n  }\r\n\r\n  setComponentType = (value: string | null | undefined) => {\r\n    this._componentType = value ?? componentDefaultType;\r\n  };\r\n\r\n  get extra() {\r\n    return this._extra;\r\n  }\r\n\r\n  setExtra = (value: any) => {\r\n    this._extra = value ?? null;\r\n  };\r\n\r\n  get ref() {\r\n    return this._ref;\r\n  }\r\n\r\n  get ports(): Readonly<Dictionary<PortState>> {\r\n    return this._ports;\r\n  }\r\n\r\n  get transformString() {\r\n    return generateTransform(this._position);\r\n  }\r\n\r\n  get componentDefinition() {\r\n    const { visualComponents } = this._rootStore.nodesSettings;\r\n    return visualComponents.getComponent(this.componentType);\r\n  }\r\n\r\n  get realSize(): Point | null {\r\n    return this._ref.realSize;\r\n  }\r\n\r\n  getPort = (portId: string): PortState | undefined => {\r\n    if (portId && this._ports[portId]) {\r\n      return this._ports[portId];\r\n    } else return undefined;\r\n  };\r\n\r\n  addPort = (port: IPortState): boolean => {\r\n    if (!port || (port.id && this._ports[port.id])) {\r\n      return false;\r\n    }\r\n    const newPort = new PortState(\r\n      this._rootStore,\r\n      port.id ?? guidForcedUniqueness(this._ports),\r\n      this._id,\r\n      port\r\n    );\r\n    this._ports[newPort.id] = newPort;\r\n    return true;\r\n  };\r\n\r\n  removePort = (portId: string): boolean => {\r\n    if (portId && this._ports[portId]) {\r\n      delete this._ports[portId];\r\n      this._rootStore.linksStore.removePortLinks(this._id, portId);\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  getPortOrThrowException = (portId: string): PortState => {\r\n    const port = this.getPort(portId);\r\n    if (port) return port;\r\n    else\r\n      throw `Port with id '${portId}' does not exist in the node '${this._id}'`;\r\n  };\r\n}\r\n\r\nexport interface INodeStateWithoutId {\r\n  position: Point;\r\n  ports?: IPortState[];\r\n  componentType?: string;\r\n  extra?: any;\r\n}\r\n\r\nexport interface INodeStateWithId extends INodeStateWithoutId {\r\n  id: string;\r\n}\r\n\r\nexport interface INodeState extends INodeStateWithoutId {\r\n  id?: string;\r\n}\r\n","import { Dictionary } from '../types/common';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { INodeState, NodeState } from './nodeState';\r\nimport { RootStore } from './rootStore';\r\nimport { guidForcedUniqueness } from '../utils';\r\n\r\nexport class NodesStore {\r\n  private _nodes: Dictionary<NodeState> = {};\r\n\r\n  private _rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    makeAutoObservable(this);\r\n    this._rootStore = rootStore;\r\n  }\r\n\r\n  get nodes(): Readonly<Dictionary<NodeState>> {\r\n    return this._nodes;\r\n  }\r\n\r\n  import = (newNodes?: INodeState[]) => {\r\n    this._nodes = {};\r\n    newNodes?.forEach((node) => this.addNode(node, true));\r\n  };\r\n\r\n  export = (): INodeState[] =>\r\n    Object.values(this._nodes).map((n) => n.export());\r\n\r\n  addNode = (node: INodeState, rewriteIfExists: boolean): boolean => {\r\n    if (!node || (!rewriteIfExists && node.id && this._nodes[node.id])) {\r\n      return false;\r\n    }\r\n    const newNode = new NodeState(\r\n      this._rootStore,\r\n      node.id ?? guidForcedUniqueness(this._nodes),\r\n      node\r\n    );\r\n    this._nodes[newNode.id] = newNode;\r\n    return true;\r\n  };\r\n\r\n  removeNode = (nodeId: string): boolean => {\r\n    if (nodeId && this._nodes[nodeId]) {\r\n      delete this._nodes[nodeId];\r\n      this._rootStore.linksStore.removeNodeLinks(nodeId);\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  getNode = (nodeId: string): NodeState | undefined => {\r\n    if (nodeId && this._nodes[nodeId]) {\r\n      return this._nodes[nodeId];\r\n    } else return undefined;\r\n  };\r\n\r\n  getNodeOrThrowException = (nodeId: string): NodeState => {\r\n    const node = this.getNode(nodeId);\r\n    if (node) return node;\r\n    else throw `Node with id '${nodeId}' does not exist`;\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { PortState } from '../states';\r\nimport { usePortUserInteraction } from '../hooks/userInteractions/usePortUserInteraction';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport const PortWrapper: React.FC<{ port: PortState }> = observer(\r\n  ({ port }) => {\r\n    const { userInteractionElemRef, bind } = usePortUserInteraction(port);\r\n\r\n    let color = '#6eb7ff';\r\n    if (port.dragging) color = '#49f860';\r\n    else if (port.hovered && port.validForConnection) color = '#49f860';\r\n    else if (port.hovered && !port.validForConnection) color = '#fa4040';\r\n\r\n    return (\r\n      <div\r\n        ref={{\r\n          set current(value: HTMLDivElement) {\r\n            userInteractionElemRef.current = value;\r\n            port.ref.current = value;\r\n          },\r\n        }}\r\n        {...bind()}\r\n        id={port.nodeId + ':' + port.id}\r\n        className='react_fast_diagram_PortWrapper'\r\n      >\r\n        <div\r\n          style={{\r\n            width: 10,\r\n            height: 10,\r\n            backgroundColor: color,\r\n          }}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import React, { useMemo, useRef } from 'react';\r\nimport { useGesture } from 'react-use-gesture';\r\nimport { ReactEventHandlers } from 'react-use-gesture/dist/types';\r\nimport { IDragHandlers, Point } from '../..';\r\nimport { PortState } from '../../states/portState';\r\nimport { multiplyPoint } from '../../utils';\r\nimport { useRootStore } from '../useRootStore';\r\nimport { useUserAbilityToSelectSwitcher } from './useUserAbilityToSelectSwitcher';\r\n\r\nexport const usePortUserInteraction = (\r\n  portState: PortState,\r\n  enable?: boolean\r\n): IUsePortUserInteractionResult => {\r\n  const {\r\n    linksStore: { linkCreation },\r\n    diagramState,\r\n  } = useRootStore();\r\n  const userInteractionElemRef = useRef<HTMLDivElement>(\r\n    null\r\n  ) as React.MutableRefObject<HTMLDivElement | null>;\r\n\r\n  const handlers = useMemo<IGestureHandlers>(\r\n    () => ({\r\n      onDrag: ({ delta }) => {\r\n        if (!portState.dragging) return;\r\n        const parentScale = diagramState.zoom;\r\n        linkCreation.target?.translateBy(multiplyPoint(delta, 1 / parentScale));\r\n      },\r\n      onDragStart: ({ event }) => {\r\n        // Important! Otherwise on touch display onPointerEnter will not work!\r\n        const portHtmlElement = event.target as Element;\r\n        portHtmlElement.releasePointerCapture(event.pointerId);\r\n\r\n        let eventOffsetRelativeToTarget;\r\n        // On the old browser these properties could be not available\r\n        if ('offsetX' in event && 'offsetY' in event) {\r\n          eventOffsetRelativeToTarget = [event.offsetX, event.offsetY] as Point;\r\n        }\r\n\r\n        if (linkCreation.startLinking(portState, eventOffsetRelativeToTarget)) {\r\n          portState.dragging = true;\r\n        }\r\n      },\r\n      onDragEnd: () => {\r\n        portState.dragging = false;\r\n        linkCreation.stopLinking();\r\n      },\r\n      onPointerEnter: () => {\r\n        portState.hovered = true;\r\n        linkCreation.setTargetPortCandidate(portState);\r\n      },\r\n      onPointerLeave: () => {\r\n        portState.hovered = false;\r\n        linkCreation.resetTargetPortCandidate(portState);\r\n      },\r\n    }),\r\n    [portState, linkCreation]\r\n  );\r\n\r\n  // Temporary bug fix when pointer events handlers are not reasigned. See https://github.com/pmndrs/react-use-gesture/issues/263 and https://github.com/pmndrs/react-use-gesture/issues/264\r\n  const bind = useGesture(handlers, {\r\n    eventOptions: { passive: false },\r\n    enabled: enable,\r\n  });\r\n\r\n  useUserAbilityToSelectSwitcher(\r\n    portState.dragging,\r\n    userInteractionElemRef.current?.ownerDocument?.body\r\n  );\r\n\r\n  return {\r\n    active: portState.dragging,\r\n    userInteractionElemRef,\r\n    bind,\r\n  };\r\n};\r\n\r\ninterface IGestureHandlers extends IDragHandlers {\r\n  onPointerEnter: () => void;\r\n  onPointerLeave: () => void;\r\n}\r\n\r\nexport interface IUsePortUserInteractionResult {\r\n  active: boolean;\r\n  userInteractionElemRef: React.MutableRefObject<HTMLDivElement | null>;\r\n  bind: (...args: any[]) => ReactEventHandlers;\r\n}\r\n","import React from 'react';\r\nimport { PortWrapper } from './PortWrapper';\r\nimport { IPortsContainerVisualComponentProps } from '../states/portsSettings';\r\nimport { IComponentDefinition } from '../states/visualComponentState';\r\n\r\nexport interface IPortsContainerDefaultSettings {\r\n  style?: React.CSSProperties;\r\n  direction: 'horizontal' | 'vertical';\r\n  gapBetweenPorts: string;\r\n}\r\n\r\nexport const PortsContainerDefault: React.FC<\r\n  IPortsContainerVisualComponentProps<IPortsContainerDefaultSettings>\r\n> = ({ entity, settings }) => {\r\n  const finalSettings = {\r\n    ...portsContainerDefaultSettings,\r\n    ...settings,\r\n  };\r\n\r\n  let className = 'react_fast_diagram_flex_gap ';\r\n  if (finalSettings.direction === 'horizontal') {\r\n    className += 'react_fast_diagram_flex_gap_x'\r\n  }\r\n  else {\r\n    className += 'react_fast_diagram_flex_gap_y';\r\n  }\r\n\r\n  return (\r\n    <div className={className} style={{\r\n      // @ts-ignore\r\n      '--gap': finalSettings.gapBetweenPorts\r\n    }}>\r\n      {Object.values(entity).map((port) => (\r\n        <PortWrapper key={port.id} port={port} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport function createPortsContainerDefault(\r\n  settings?: Partial<IPortsContainerDefaultSettings>\r\n): IComponentDefinition<\r\n  IPortsContainerVisualComponentProps,\r\n  IPortsContainerDefaultSettings\r\n> {\r\n  return {\r\n    component: PortsContainerDefault,\r\n    settings: {\r\n      ...portsContainerDefaultSettings,\r\n      ...settings\r\n    }\r\n  };\r\n}\r\n\r\nconst portsContainerDefaultSettings: IPortsContainerDefaultSettings = {\r\n  direction: 'horizontal',\r\n  gapBetweenPorts: '8px',\r\n};\r\n","import { IVisualComponentsObject, VisualComponents } from './visualComponents';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { PortState } from './portState';\r\nimport { createPortsContainerDefault } from '../components/PortsContainerDefault';\r\nimport { IVisualComponentProps } from './visualComponentState';\r\n\r\nexport class PortsSettings {\r\n  private _portsContainerVisualComponents: VisualComponents<\r\n    PortState[],\r\n    IPortsContainerVisualComponentProps\r\n  > = new VisualComponents<PortState[], IPortsContainerVisualComponentProps>({\r\n    horizontal: createPortsContainerDefault({ direction: 'horizontal' }),\r\n    vertical: createPortsContainerDefault({ direction: 'vertical' }),\r\n  });\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  get portsContainerVisualComponents() {\r\n    return this._portsContainerVisualComponents;\r\n  }\r\n\r\n  import = (obj?: IPortsSettings) => {\r\n    this.portsContainerVisualComponents.import(obj?.portsContainerComponents);\r\n  };\r\n}\r\n\r\nexport interface IPortsContainerVisualComponentProps<TSettings extends {} = {}>\r\n  extends IVisualComponentProps<PortState[], TSettings> {}\r\n\r\nexport interface IPortsSettings {\r\n  portsContainerComponents: IVisualComponentsObject<IPortsContainerVisualComponentProps>;\r\n}\r\n","import { makeAutoObservable } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport class VisualComponentState<TComponentProps> {\r\n  private _component: VisualComponent<TComponentProps>;\r\n  private _settings: object = {};\r\n\r\n  constructor(\r\n    component:\r\n      | IComponentDefinition<TComponentProps>\r\n      | VisualComponent<TComponentProps>\r\n  ) {\r\n    this.import(component);\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  import = (\r\n    newComponent:\r\n      | IComponentDefinition<TComponentProps>\r\n      | VisualComponent<TComponentProps>\r\n  ) => {\r\n    if ('component' in newComponent) {\r\n      this._component = observer(newComponent.component);\r\n      this._settings = newComponent.settings ?? {};\r\n    } else {\r\n      this._component = observer(newComponent);\r\n      this._settings = {};\r\n    }\r\n  };\r\n\r\n  get component() {\r\n    return this._component;\r\n  }\r\n  get settings() {\r\n    return this._settings;\r\n  }\r\n}\r\n\r\nexport interface IVisualComponentProps<TEntity, TSettings extends {} = {}> {\r\n  entity: TEntity;\r\n  settings?: TSettings;\r\n}\r\n\r\nexport type VisualComponent<\r\n  TComponentProps\r\n> = React.FunctionComponent<TComponentProps>;\r\n\r\nexport interface IComponentDefinition<\r\n  TComponentProps,\r\n  TSettings extends {} = {}\r\n> {\r\n  component: VisualComponent<TComponentProps>;\r\n  settings?: TSettings;\r\n}\r\n","import { makeAutoObservable } from 'mobx';\r\nimport {\r\n  IComponentDefinition,\r\n  VisualComponent,\r\n  VisualComponentState,\r\n} from './visualComponentState';\r\n\r\nexport class VisualComponentWithDefault<TComponentProps> {\r\n  private _innerComponent: VisualComponentState<TComponentProps>;\r\n  private _defaultComponent: VisualComponentState<TComponentProps>;\r\n\r\n  constructor(defaultComponent: IComponentDefinition<TComponentProps>) {\r\n    this._innerComponent = new VisualComponentState<TComponentProps>(\r\n      defaultComponent\r\n    );\r\n    this._defaultComponent = this._innerComponent;\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  get component() {\r\n    return this._innerComponent.component;\r\n  }\r\n\r\n  get settings() {\r\n    return this._innerComponent.settings;\r\n  }\r\n\r\n  import = (\r\n    newComponent?:\r\n      | IComponentDefinition<TComponentProps>\r\n      | VisualComponent<TComponentProps>\r\n  ) => {\r\n    this._innerComponent = newComponent\r\n      ? new VisualComponentState<TComponentProps>(newComponent)\r\n      : this._defaultComponent;\r\n  };\r\n}\r\n","import { makeAutoObservable } from 'mobx';\r\nimport { Point } from '../types/common';\r\nimport { createDefaultBackground } from '../components/BackgroundDefault';\r\nimport { IComponentDefinition, VisualComponent } from '.';\r\nimport { createDefaultMiniControl } from '..';\r\nimport { VisualComponentWithDefault } from './visualComponentWithDefault';\r\nimport { RootStore } from './rootStore';\r\n\r\nexport class DiagramSettings {\r\n  private _backgroundComponentState: VisualComponentWithDefault<IBackgroundComponentProps>;\r\n  private _miniControlComponentState: VisualComponentWithDefault<IMiniControlComponentProps>;\r\n  private _scaleInterval: Point = defaultScaleInterval;\r\n\r\n  constructor() {\r\n    this._backgroundComponentState = new VisualComponentWithDefault<IBackgroundComponentProps>(\r\n      createDefaultBackground()\r\n    );\r\n    this._miniControlComponentState = new VisualComponentWithDefault<IMiniControlComponentProps>(\r\n      createDefaultMiniControl()\r\n    );\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  import = (obj?: IDiagramSettings) => {\r\n    this._backgroundComponentState.import(obj?.backgroundComponent);\r\n    this._miniControlComponentState.import(obj?.miniControlComponent);\r\n    this.setScaleInterval(obj?.scaleInterval);\r\n  }\r\n\r\n  get backgroundComponentState() {\r\n    return this._backgroundComponentState;\r\n  }\r\n\r\n  get miniControlComponentState() {\r\n    return this._miniControlComponentState;\r\n  }\r\n\r\n  get scaleInterval() {\r\n    return this._scaleInterval;\r\n  }\r\n\r\n  setScaleInterval = (value: Point | null | undefined) => {\r\n    this._scaleInterval = value ?? defaultScaleInterval;\r\n  }\r\n}\r\n\r\nconst defaultScaleInterval: Point = [0.1, 3];\r\n\r\nexport interface IDiagramSettings {\r\n  backgroundComponent?:\r\n    | IComponentDefinition<IBackgroundComponentProps>\r\n    | VisualComponent<IBackgroundComponentProps>;\r\n  miniControlComponent?:\r\n    | IComponentDefinition<IMiniControlComponentProps>\r\n    | VisualComponent<IMiniControlComponentProps>;\r\n  scaleInterval?: Point;\r\n}\r\n\r\nexport interface IBackgroundComponentProps<TSettings = {}> {\r\n  diagramOffset: Point;\r\n  diagramZoom: number;\r\n  settings?: TSettings;\r\n}\r\n\r\nexport interface IMiniControlComponentProps<TSettings = {}> {\r\n  rootStore: RootStore;\r\n  settings?: TSettings;\r\n}\r\n","import { Callbacks, ICallbacks } from './callbacks';\r\nimport { DiagramSettings, IDiagramSettings } from './diagramSettings';\r\nimport { DiagramState } from './diagramState';\r\nimport { ILinksSettings, LinksSettings } from './linksSettings';\r\nimport { LinksStore } from './linksStore';\r\nimport { ILinkState } from './linkState';\r\nimport { INodesSettings, NodesSettings } from './nodesSettings';\r\nimport { NodesStore } from './nodesStore';\r\nimport { INodeState } from './nodeState';\r\nimport { IPortsSettings, PortsSettings } from './portsSettings';\r\n\r\nexport class RootStore {\r\n  private _diagramState: DiagramState;\r\n\r\n  private _nodesStore: NodesStore;\r\n  private _linksStore: LinksStore;\r\n\r\n  private _diagramSettings: DiagramSettings;\r\n  private _nodesSettings: NodesSettings;\r\n  private _portsSettings: PortsSettings;\r\n  private _linksSettings: LinksSettings;\r\n  private _callbacks: Callbacks;\r\n\r\n  constructor() {\r\n    this._diagramSettings = new DiagramSettings();\r\n    this._nodesSettings = new NodesSettings();\r\n    this._linksSettings = new LinksSettings();\r\n    this._portsSettings = new PortsSettings();\r\n    this._callbacks = new Callbacks(this);\r\n\r\n    this._diagramState = new DiagramState(this);\r\n\r\n    this._nodesStore = new NodesStore(this);\r\n    this._linksStore = new LinksStore(this);\r\n  }\r\n\r\n  get diagramState() {\r\n    return this._diagramState;\r\n  }\r\n\r\n  get nodesStore() {\r\n    return this._nodesStore;\r\n  }\r\n\r\n  get linksStore() {\r\n    return this._linksStore;\r\n  }\r\n\r\n  get diagramSettings() {\r\n    return this._diagramSettings;\r\n  }\r\n\r\n  get nodesSettings() {\r\n    return this._nodesSettings;\r\n  }\r\n\r\n  get linksSettings() {\r\n    return this._linksSettings;\r\n  }\r\n\r\n  get portsSettings() {\r\n    return this._portsSettings;\r\n  }\r\n\r\n  get callbacks() {\r\n    return this._callbacks;\r\n  }\r\n\r\n  importState = (nodes?: INodeState[], links?: ILinkState[]) => {\r\n    this._nodesStore.import(nodes);\r\n    this._linksStore.import(links);\r\n  };\r\n\r\n  export = (): { nodes: INodeState[]; links: ILinkState[] } => ({\r\n    nodes: this._nodesStore.export(),\r\n    links: this._linksStore.export(),\r\n  });\r\n\r\n  importSettings = (settings: ISettings) => {\r\n    this._diagramSettings.import(settings.diagram);\r\n    this._nodesSettings.import(settings.nodes);\r\n    this._linksSettings.import(settings.links);\r\n    this._portsSettings.import(settings.ports);\r\n    this._callbacks.import(settings.callbacks);\r\n  };\r\n}\r\n\r\nexport interface ISettings {\r\n  diagram?: IDiagramSettings;\r\n  nodes?: INodesSettings;\r\n  links?: ILinksSettings;\r\n  ports?: IPortsSettings;\r\n  callbacks?: ICallbacks;\r\n}\r\n","import React, { useEffect, useMemo } from 'react';\r\nimport { InnerDiagram } from './DiagramInner';\r\nimport '../Diagram.css';\r\nimport { ISettings, RootStore } from '../states/rootStore';\r\nimport { INodeState } from '../states/nodeState';\r\nimport { ILinkState } from '../states/linkState';\r\n\r\nimport '../Diagram.css';\r\n\r\nexport const RootStoreContext = React.createContext<RootStore | null>(null);\r\n\r\nexport const Diagram: React.FC<IDiagramProps> = (props) => {\r\n  const rootStore = useMemo(() => {\r\n    const store = new RootStore();\r\n    props.settings && store.importSettings(props.settings);\r\n    store.importState(\r\n      props.initState?.nodes ?? [],\r\n      props.initState?.links ?? []\r\n    );\r\n    return store;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.storeRef) {\r\n      props.storeRef.current = rootStore;\r\n    }\r\n  }, [rootStore, props.storeRef]);\r\n\r\n  return (\r\n    <RootStoreContext.Provider value={rootStore}>\r\n      <InnerDiagram />\r\n    </RootStoreContext.Provider>\r\n  );\r\n};\r\n\r\nexport interface IDiagramProps {\r\n  settings?: ISettings;\r\n  initState?: IDiagramInitState;\r\n  storeRef?: React.MutableRefObject<RootStore | null>;\r\n}\r\n\r\nexport interface IDiagramInitState {\r\n  nodes: INodeState[];\r\n  links: ILinkState[];\r\n}\r\n\r\nDiagram.displayName = 'Diagram';\r\n","import { useContext } from \"react\";\r\nimport { RootStoreContext } from \"../components/Diagram\";\r\nimport { RootStore } from \"../states/rootStore\";\r\n\r\nexport const useRootStore = () => useContext(RootStoreContext) as RootStore;","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useRootStore } from '../hooks/useRootStore';\r\n\r\nexport const BackgroundWrapper = observer(() => {\r\n  const { diagramSettings, diagramState } = useRootStore();\r\n\r\n  return (\r\n    <div className='react_fast_diagram_BackgroundWrapper'>\r\n      <diagramSettings.backgroundComponentState.component\r\n        diagramOffset={diagramState.offset}\r\n        diagramZoom={diagramState.zoom}\r\n        settings={diagramSettings.backgroundComponentState.settings}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport {\r\n  CornerPosition,\r\n  IComponentDefinition,\r\n  IMiniControlComponentProps,\r\n} from '..';\r\n\r\nconst MiniControlDefault: React.FC<\r\n  IMiniControlComponentProps<IMiniControlDefaultSettings>\r\n> = ({ rootStore, settings }) => {\r\n  settings = settings ?? defaultSettings;\r\n\r\n  return (\r\n    <div\r\n      className='react_fast_diagram_Minicontrol_Default'\r\n      style={{\r\n        ...getOffsetStyles(settings),\r\n        ...settings?.containerStyle,\r\n      }}\r\n    >\r\n      {settings.buttons.zoomIn && (\r\n        <MiniControlButton\r\n          size={settings.buttonsSize}\r\n          onClick={rootStore.diagramState.zoomIn}\r\n          children='+'\r\n        />\r\n      )}\r\n      {settings.buttons.zoomOut && (\r\n        <MiniControlButton\r\n          size={settings.buttonsSize}\r\n          onClick={rootStore.diagramState.zoomOut}\r\n          children='-'\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction getOffsetStyles(settings: IMiniControlDefaultSettings) {\r\n  return {\r\n    top:\r\n      settings.position == 'left-top' || settings.position == 'right-top'\r\n        ? settings.parentOffset\r\n        : undefined,\r\n    right:\r\n      settings.position == 'right-bottom' || settings.position == 'right-top'\r\n        ? settings.parentOffset\r\n        : undefined,\r\n    bottom:\r\n      settings.position == 'left-bottom' || settings.position == 'right-bottom'\r\n        ? settings.parentOffset\r\n        : undefined,\r\n    left:\r\n      settings.position == 'left-top' || settings.position == 'left-bottom'\r\n        ? settings.parentOffset\r\n        : undefined,\r\n  };\r\n}\r\n\r\nconst MiniControlButton: React.FC<{ size: number; onClick: () => any }> = (\r\n  props\r\n) => (\r\n  <div\r\n    onClick={props.onClick}\r\n    className='react_fast_diagram_Minicontrol_Default_Btn'\r\n    style={{\r\n      width: props.size + 'px',\r\n      height: props.size + 'px',\r\n    }}\r\n  >\r\n    <span>{props.children}</span>\r\n  </div>\r\n);\r\n\r\nexport const createDefaultMiniControl = (\r\n  settings?: Partial<IMiniControlDefaultSettings>\r\n): IComponentDefinition<\r\n  IMiniControlComponentProps,\r\n  IMiniControlDefaultSettings\r\n> => {\r\n  const finalSettings = {\r\n    ...defaultSettings,\r\n    ...(settings ? settings : {}),\r\n  };\r\n\r\n  return {\r\n    component: MiniControlDefault,\r\n    settings: finalSettings,\r\n  };\r\n};\r\n\r\nconst defaultSettings: IMiniControlDefaultSettings = {\r\n  position: 'left-bottom',\r\n  containerStyle: {},\r\n  buttonsSize: 30,\r\n  buttons: {\r\n    zoomIn: true,\r\n    zoomOut: true,\r\n  },\r\n  parentOffset: 20,\r\n};\r\n\r\nexport interface IMiniControlDefaultSettings {\r\n  position: CornerPosition;\r\n  containerStyle: React.CSSProperties;\r\n  buttons: ButtonsValue<boolean>;\r\n  buttonsSize: number;\r\n  parentOffset: number;\r\n}\r\n\r\ninterface ButtonsValue<TValue> {\r\n  zoomIn?: TValue;\r\n  zoomOut?: TValue;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Tune } from '@material-ui/icons';\r\nimport Card from '@material-ui/core/Card';\r\nimport { Box, Button, TextField, Typography } from '@material-ui/core';\r\nimport { IDiagramInitState, ILinkState, INodeState, RootStore } from '@react-easy-diagram/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    margin: '-8px 0',\r\n    '& > *': {\r\n      margin: '8px 0'\r\n    }\r\n  },\r\n  visibilityBtn: {\r\n    borderRadius: '25px',\r\n    minWidth: '24px',\r\n    padding: '8px 8px',\r\n    backgroundColor: 'white',\r\n  },\r\n  header: {\r\n    marginBottom: '15px',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    margin: '0 -14px',\r\n    '& > *': {\r\n      margin: '0 14px'\r\n    }\r\n  },\r\n}));\r\n\r\nconst generateLargeDiagram = (colNum: number, rowNum: number): IDiagramInitState => {\r\n  const nodes : INodeState[] = [];\r\n  const links : ILinkState[] = [];\r\n  const getNodeId = (i: number,j: number) => `node_${i}_${j}`;\r\n\r\n  for (let i = 0; i < colNum; i++) {\r\n    for (let j = 0; j < rowNum; j++) {\r\n      nodes.push({\r\n        id: getNodeId(i,j),\r\n        position: [i * 120, j * 120 ],\r\n        ports: [\r\n          {id: 'left', type: 'left'},\r\n          {id: 'top', type: 'top'},\r\n          {id: 'right', type: 'right'},\r\n          {id: 'bottom', type: 'bottom'},\r\n        ]\r\n      });\r\n      if (i - 1 >= 0) {\r\n        links.push({\r\n          source: {\r\n            nodeId: getNodeId(i - 1,j),\r\n            portId: 'right'\r\n          },\r\n          target: {\r\n            nodeId: getNodeId(i,j),\r\n            portId: 'left'\r\n          }\r\n        });\r\n      }\r\n      if (j - 1 >= 0) {\r\n        links.push({\r\n          source: {\r\n            nodeId: getNodeId(i,j - 1),\r\n            portId: 'bottom'\r\n          },\r\n          target: {\r\n            nodeId: getNodeId(i,j),\r\n            portId: 'top'\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return {nodes,links};\r\n};\r\n\r\nexport interface ControlPanelProps{\r\n  store: RootStore | null\r\n}\r\n\r\nexport const ControlPanel = (props: ControlPanelProps) => {\r\n  const classes = useStyles();\r\n\r\n  const [row, setRow] = useState(10);\r\n  const [col, setCol] = useState(10);\r\n\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const onFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (props.store) {\r\n      const newState = generateLargeDiagram(row, col);\r\n      props.store.importState(newState.nodes, newState.links);\r\n    }\r\n  };\r\n\r\n  if (visible) {\r\n    return (\r\n      <Box padding={3} clone>\r\n        <Card>\r\n          <div className={classes.header}>\r\n            <Button\r\n              className={classes.visibilityBtn}\r\n              variant='outlined'\r\n              aria-label='control-panel'\r\n              onClick={() => setVisible(false)}\r\n            >\r\n              <Tune />\r\n            </Button>\r\n            <Typography variant='h5'>Control Panel</Typography>\r\n          </div>\r\n          <form\r\n            className={classes.form}\r\n            noValidate\r\n            autoComplete='off'\r\n            onSubmit={onFormSubmit}\r\n          >\r\n            <TextField\r\n              id='rows'\r\n              value={row}\r\n              type='number'\r\n              label='Rows'\r\n              variant='outlined'\r\n              onChange={(e) => setRow(parseInt(e.target.value))}\r\n            />\r\n            <TextField\r\n              id='columns'\r\n              value={col}\r\n              type='number'\r\n              label='Columns'\r\n              variant='outlined'\r\n              onChange={(e) => setCol(parseInt(e.target.value))}\r\n            />\r\n            <Button variant='contained' type='submit'>\r\n              Generate new Diagram\r\n            </Button>\r\n          </form>\r\n          <Button style={{\r\n            marginTop: 10\r\n          }} variant='contained' onClick={() => {\r\n            console.log(props.store?.export())\r\n          }}>\r\n            Print state\r\n          </Button>\r\n        </Card>\r\n      </Box>\r\n    );\r\n  } else {\r\n    return (\r\n      <Button\r\n        variant='outlined'\r\n        className={classes.visibilityBtn}\r\n        aria-label='control-panel'\r\n        onClick={() => setVisible(true)}\r\n      >\r\n        <Tune />\r\n      </Button>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  createCurvedLinkPathConstructor,\r\n  createDefaultMiniControl,\r\n  createLinkDefault,\r\n  IDiagramInitState,\r\n  useDiagram,\r\n} from '@react-easy-diagram/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Box } from '@material-ui/core';\r\nimport { ControlPanel } from './ControlPanel';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  diagram: {\r\n    position: 'fixed',\r\n    top: 0,\r\n    bottom: 0,\r\n    right: 0,\r\n    left: 0,\r\n  },\r\n  controlPanel: {\r\n    position: 'absolute',\r\n    top: '20px',\r\n    left: '20px',\r\n  },\r\n}));\r\n\r\nexport const App = () => {\r\n  const classes = useStyles();\r\n  const { Diagram, storeRef } = useDiagram(initState, {\r\n    links: {\r\n      components: {\r\n        default: createLinkDefault(),\r\n        attention: createLinkDefault({ color: 'red' }),\r\n      },\r\n      pathConstructor: createCurvedLinkPathConstructor(),\r\n    },\r\n    diagram: {\r\n      miniControlComponent: createDefaultMiniControl({\r\n        buttonsSize: 30,\r\n        position: 'left-bottom',\r\n      }),\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Box className={classes.diagram}>\r\n      <Diagram />\r\n      <Box className={classes.controlPanel}>\r\n        <ControlPanel store={storeRef.current} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst initState: IDiagramInitState = {\r\n  nodes: [\r\n    {\r\n      id: 'Node 1',\r\n      position: [300, 300],\r\n      ports: [\r\n        { id: 'output_1', type: 'bottom' },\r\n      ],\r\n    },\r\n    {\r\n      id: 'Node 2',\r\n      position: [520, 400],\r\n      ports: [\r\n        { id: 'input_1', type: 'top' },\r\n        { id: 'input_2', type: 'top' },\r\n        { id: 'output_1', type: 'right' },\r\n        { id: 'output_2', type: 'right' },\r\n        { id: 'output_3', type: 'right' },\r\n      ],\r\n    },\r\n    {\r\n      id: 'Node 3',\r\n      position: [520, 200],\r\n      ports: [\r\n        { id: 'input_1', type: 'top' },\r\n        { id: 'output_1', type: 'bottom' },\r\n        { id: 'output_2', type: 'bottom' },\r\n      ],\r\n    },\r\n  ],\r\n  links: [\r\n    {\r\n      source: {\r\n        nodeId: 'Node 1',\r\n        portId: 'output_1',\r\n      },\r\n      target: {\r\n        nodeId: 'Node 2',\r\n        portId: 'input_1',\r\n      },\r\n      componentType: 'attention',\r\n    },\r\n  ],\r\n};\r\n","import React, { useMemo } from 'react';\r\nimport {\r\n  Diagram,\r\n  IDiagramInitState\r\n} from '../components/Diagram';\r\nimport { ISettings, RootStore } from '../states/rootStore';\r\nimport { useNotifyRef } from './useNotifyRef';\r\n\r\nexport const useDiagram = (\r\n  initState?: IDiagramInitState,\r\n  settings?: ISettings\r\n) => {\r\n  const storeRef = useNotifyRef<RootStore | null>(null);\r\n\r\n  const obj = useMemo(\r\n    () => ({\r\n      Diagram: () => (\r\n        <Diagram storeRef={storeRef} initState={initState} settings={settings} />\r\n      ),\r\n      storeRef,\r\n    }),\r\n    []\r\n  );\r\n\r\n  return obj;\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}