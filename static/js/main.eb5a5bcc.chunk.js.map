{"version":3,"sources":["../../src/DiagramState.ts","../../src/components/LinksLayer.tsx","../../src/components/Node.tsx","../../src/components/NodesLayer.tsx","../../src/components/DiagramInner.tsx","../../src/utils.ts","../../src/components/Diagram.tsx","ControlPanel.tsx","App.tsx","index.tsx"],"names":["nodesIdsState","atom","key","default","nodeWithIdState","atomFamily","id","position","x","y","diagramTranslateState","diagramScaleState","LinksLayerMemorized","React","NodeMemo","props","useRecoilState","node","setNode","getScale","useRecoilCallback","snapshot","scaleState","onStart","e","onStop","onDrag","scale","curValue","d","style","width","height","backgroundColor","border","bottom","left","display","flexDirection","alignItems","textAlign","margin","NodesLayerMemorized","nodes","InnerDiagram","forwardRef","translate","setTranslate","setScale","movableElementRef","useRef","addNode","set","console","newNode","v","reinitState","reset","ids","Array","newNodes","n","useImperativeHandle","transform","scalePart","translatePart","generateTransform","_","current","deltaY","ref","onWheel","transformation","rect","target","mouseXPos","mouseYPos","factor","dx","dy","computeTransformationOnScale","className","styles","Diagram","initializeState","snap","useStyles","makeStyles","form","gap","visibilityBtn","borderRadius","minWidth","padding","header","marginBottom","ControlPanel","classes","useState","row","setRow","col","setCol","visible","setVisible","Box","clone","Card","Button","variant","aria-label","onClick","Tune","Typography","noValidate","autoComplete","onSubmit","log","colNum","rowNum","i","j","push","generateLargeDiagram","preventDefault","stopPropagation","TextField","value","type","label","onChange","parseInt","diagram","backgroundImage","controlPanel","top","App","diagramRef","forceUpdate","facade","useDiagramRef","initialState","initDiagram","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb5a5bcc.chunk.js","sourcesContent":["import { atom, atomFamily } from 'recoil';\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport interface NodeState {\n  id: string;\n  position: Point;\n}\n\nexport const nodesIdsState = atom<string[]>({\n  key: 'nodesIds',\n  default: [],\n});\n\nexport const nodeWithIdState = atomFamily<NodeState, string>({\n  key: `node`,\n  default: (id) => ({ id: id, position: { x: 0, y: 0 } }),\n});\n\nexport const diagramTranslateState = atom<Point>({\n  key: 'diagramTranslate',\n  default: {\n    x: 0,\n    y: 0,\n  },\n  // effects_UNSTABLE: [\n  //   ({onSet}) => {\n  //     onSet(newState => {\n  //       console.debug(\"Current diagram transformation:\");\n  //       console.debug(newState);\n  //     });\n  //   },\n  // ],\n});\n\nexport const diagramScaleState = atom<number>({\n  key: 'diagramScale',\n  default: 1,\n});\n","import React from 'react';\n\nconst LinksLayer: React.FC = () => {\n  return <div />;\n};\n\nexport const LinksLayerMemorized = React.memo(LinksLayer);\n","import React from 'react';\nimport { DraggableCore } from 'react-draggable';\nimport { useRecoilCallback, useRecoilState } from 'recoil';\nimport { diagramScaleState, nodeWithIdState } from '../DiagramState';\n\nexport interface NodeProps {\n  id: string;\n}\n\nexport const Node: React.FC<NodeProps> = (props) => {\n  const [node, setNode] = useRecoilState(nodeWithIdState(props.id));\n\n  const getScale = useRecoilCallback(({ snapshot }) => () => {\n    const scaleState = snapshot.getLoadable(diagramScaleState).contents;\n    return typeof scaleState === 'number' ? scaleState : 1;\n  });\n\n  return (\n    <DraggableCore\n      onStart={(e) => e.stopPropagation()}\n      onStop={(e) => e.stopPropagation()}\n      onDrag={(e, d) => {\n        e.stopPropagation();\n        const scale = getScale();\n        setNode((curValue) => ({\n          ...curValue,\n          position: {\n            x: curValue.position.x + d.deltaX / scale,\n            y: curValue.position.y - d.deltaY / scale,\n          },\n        }));\n      }}\n    >\n      <div\n        style={{\n          width: '100px',\n          height: '100px',\n          backgroundColor: 'white',\n          border: '2px solid WhiteSmoke',\n          position: 'absolute',\n          bottom: node.position.y,\n          left: node.position.x,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <div\n          style={{\n            textAlign: 'center',\n            margin: 'auto',\n          }}\n        >\n          {props.id}\n        </div>\n      </div>\n    </DraggableCore>\n  );\n};\n\nexport const NodeMemo = React.memo(Node);\n","import React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { nodesIdsState } from '../DiagramState';\nimport { NodeMemo } from './Node';\n\nconst NodesLayer: React.FC = () => {\n  const [nodes] = useRecoilState(nodesIdsState);\n\n  return (\n    <React.Fragment>\n      {nodes.map((id) => (\n        <NodeMemo key={id} id={id} />\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport const NodesLayerMemorized = React.memo(NodesLayer);\n","import React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport { useRecoilCallback, useRecoilState } from 'recoil';\nimport { LinksLayerMemorized } from './LinksLayer';\nimport { NodesLayerMemorized } from './NodesLayer';\nimport {\n  diagramScaleState,\n  diagramTranslateState,\n  nodesIdsState,\n  NodeState,\n  nodeWithIdState,\n} from '../DiagramState';\nimport { DigramApi } from './Diagram';\nimport { DraggableCore, DraggableData, DraggableEvent } from 'react-draggable';\nimport { computeTransformationOnScale, generateTransform } from '../utils';\nimport styles from '../Diagram.module.css';\n\nexport const InnerDiagram = forwardRef((_props, ref) => {\n  const [translate, setTranslate] = useRecoilState(diagramTranslateState);\n  const [scale, setScale] = useRecoilState(diagramScaleState);\n  const movableElementRef = useRef<HTMLDivElement>(null);\n\n  const addNode = useRecoilCallback(({ set }) => (newNode: NodeState) => {\n    console.log(newNode);\n    set(nodeWithIdState(newNode.id), newNode);\n    set(nodesIdsState, (v) => v.concat([newNode.id]));\n  });\n\n  const reinitState = useRecoilCallback(\n    ({ set, reset, snapshot }) => (newNodes: NodeState[]) => {\n      console.log('ReinitState');\n      const ids = snapshot.getLoadable(nodesIdsState).contents;\n      if (Array.isArray(ids)) {\n        ids.forEach((id) => reset(nodeWithIdState(id)));\n      }\n\n      set(\n        nodesIdsState,\n        newNodes.map((n) => n.id)\n      );\n\n      newNodes.forEach((n) => set(nodeWithIdState(n.id), n));\n    }\n  );\n\n  useImperativeHandle(\n    ref,\n    (): DigramApi => ({\n      addNode,\n      reinitState,\n    }),\n    []\n  );\n\n  const onDrag = (_: DraggableEvent, d: DraggableData) => {\n    setTranslate((current) => ({\n      x: current.x + d.deltaX,\n      y: current.y + d.deltaY,\n    }));\n  };\n\n  const onWheel = (e: React.WheelEvent<HTMLDivElement>) => {\n    const transformation = computeTransformationOnScale(\n      movableElementRef.current,\n      e,\n      translate,\n      scale\n    );\n    if (transformation) {\n      setTranslate(transformation.translate);\n      setScale(transformation.scale);\n    }\n  };\n\n  const transform = generateTransform(translate, scale);\n\n  return (\n    <DraggableCore onDrag={onDrag}>\n      <div\n        ref={movableElementRef}\n        onWheel={onWheel}\n        className={styles.react_fast_diagram_DiagramInner}\n      >\n        <div\n          className={styles.react_fast_diagram_Movable}\n          style={{\n            transform: transform,\n          }}\n        >\n          <LinksLayerMemorized />\n          <NodesLayerMemorized />\n        </div>\n      </div>\n    </DraggableCore>\n  );\n});\n\nInnerDiagram.displayName = 'InnerDiagram';\n","import { Point } from './DiagramState';\n\nexport const generateTransform = (translate: Point, scale: number): string => {\n  const scalePart = `scale(${scale})`;\n  const translatePart = `translate(${translate.x}px, ${translate.y}px)`;\n  const transform = translatePart + ' ' + scalePart;\n  return transform;\n};\n\n// See: https://stackoverflow.com/a/30039971/9142642\nexport const computeTransformationOnScale = (\n  target: Element | null,\n  e: React.WheelEvent<HTMLDivElement>,\n  translate: Point,\n  scale: number\n): { scale: number; translate: Point } | null => {\n  // The upper left corner of the target stays in the same place while the picture is enlarged\n  const rect = target?.getBoundingClientRect();\n  if (!rect) return null;\n\n  // Get mouse position related to target\n  const mouseXPos = e.pageX - rect.left;\n  const mouseYPos = e.pageY - rect.top;\n\n  let factor = 0.9;\n  if (e.deltaY < 0) {\n    factor = 1 / factor;\n  }\n\n  // Now consider the point under the mouse cursor. Every pixel above and to the\n  // left of the cursor has become *factor* larger. This displaces the point under the\n  // cursor by *factor* downward and to the right. Meanwhile, the cursor is in the same position.\n  // Note that the target might have been moved in the canvas before the zooming operation, so the\n  // cursor's horizontal position in the target is mouseXPos - transformation.translation.x before zooming,\n  // and likewise for the vertical position.\n  const dx = (mouseXPos - translate.x) * (factor - 1);\n  const dy = (mouseYPos - translate.y) * (factor - 1);\n\n  return {\n    scale: scale * factor,\n    translate: {\n      // Compensate for the displacement by moving the point back under the cursor\n      x: translate.x - dx,\n      y: translate.y - dy,\n    },\n  };\n};\n","import React, { forwardRef, useCallback, useRef, useState } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport type { MutableSnapshot } from 'recoil';\nimport { nodesIdsState, NodeState, nodeWithIdState } from '../DiagramState';\nimport { InnerDiagram } from './DiagramInner';\n\nexport interface DiagramProps {\n  initialState?: NodeState[];\n}\n\nexport const initializeState = (\n  snap: MutableSnapshot,\n  props: DiagramProps\n): void => {\n  if (props.initialState) {\n    props.initialState.forEach((node) => {\n      snap.set(nodeWithIdState(node.id), node);\n    });\n    snap.set(\n      nodesIdsState,\n      props.initialState.map((node) => node.id)\n    );\n  }\n};\n\nexport interface DigramApi {\n  addNode(node: NodeState): void;\n  reinitState(nodes: NodeState[]): void;\n}\n\nexport const Diagram = forwardRef((props: DiagramProps, ref) => {\n  const initializeStateWrapper = (snap: MutableSnapshot) =>\n    initializeState(snap, props);\n\n  return (\n    <RecoilRoot initializeState={initializeStateWrapper}>\n      <InnerDiagram ref={ref} />\n    </RecoilRoot>\n  );\n});\n\nDiagram.displayName = 'Diagram';\n\nexport const useDiagramRef = (): React.MutableRefObject<\n  DigramApi | undefined\n> => {\n  const [_, forceUpdate] = useState(0);\n  const [ref] = useState(() => ({\n    value: undefined,\n    facade: {\n      get current() {\n        return ref.value;\n      },\n      set current(value) {\n        const last = ref.value;\n        if (last !== value) {\n          ref.value = value;\n          console.log('Force update');\n          forceUpdate((i) => i + 1);\n        }\n      },\n    },\n  }));\n\n  console.log('Facade is ' + ref.facade);\n  return ref.facade;\n};\n","import React, { useState } from 'react';\nimport { NodeState } from 'react-easy-diagram';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Tune } from '@material-ui/icons';\nimport Card from '@material-ui/core/Card';\nimport { Box, Button, TextField, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '7px',\n  },\n  visibilityBtn: {\n    borderRadius: '25px',\n    minWidth: '24px',\n    padding: '8px 8px',\n    backgroundColor: 'white'\n  },\n  header: {\n    marginBottom: '15px',\n    display: 'flex',\n    alignItems: 'center',\n    gap: '14px',\n  },\n}));\n\nconst generateLargeDiagram = (colNum: number, rowNum: number): NodeState[] => {\n  const nodes = [];\n  for (let i = 0; i < colNum; i++) {\n    for (let j = 0; j < rowNum; j++) {\n      nodes.push({\n        id: `node_${i}_${j}`,\n        position: { x: i * 120, y: j * 120 },\n      });\n    }\n  }\n\n  return nodes;\n};\n\nexport interface ControlPanelProps {\n  reinitState?(newNodes: NodeState[]): any;\n}\n\nexport const ControlPanel = (props: ControlPanelProps) => {\n  const classes = useStyles();\n\n  const [row, setRow] = useState(10);\n  const [col, setCol] = useState(10);\n\n  const [visible, setVisible] = useState(true);\n\n  const onFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    if (props.reinitState) {\n      console.log('generateLargeDiagram');\n      props.reinitState(generateLargeDiagram(row, col));\n    } else {\n      console.log('generateLargeDiagram reinitState is undefined');\n    }\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  if (visible) {\n    return (\n      <Box padding={3} clone>\n        <Card>\n          <div className={classes.header}>\n            <Button\n              className={classes.visibilityBtn}\n              variant='outlined'\n              aria-label='control-panel'\n              onClick={() => setVisible(false)}\n            >\n              <Tune />\n            </Button>\n            <Typography variant='h5'>Control Panel</Typography>\n          </div>\n          <form\n            className={classes.form}\n            noValidate\n            autoComplete='off'\n            onSubmit={onFormSubmit}\n          >\n            <TextField\n              id='rows'\n              value={row}\n              type='number'\n              label='Rows'\n              variant='outlined'\n              onChange={(e) => setRow(parseInt(e.target.value))}\n            />\n            <TextField\n              id='columns'\n              value={col}\n              type='number'\n              label='Columns'\n              variant='outlined'\n              onChange={(e) => setCol(parseInt(e.target.value))}\n            />\n            <Button variant='contained' type='submit'>\n              Generate new Diagram\n            </Button>\n          </form>\n        </Card>\n      </Box>\n    );\n  } else {\n    return (\n      <Button\n        variant='outlined'\n        className={classes.visibilityBtn}\n        aria-label='control-panel'\n        onClick={() => setVisible(true)}\n      >\n        <Tune />\n      </Button>\n    );\n  }\n};\n","import React from 'react';\nimport './App.css';\nimport { Diagram, NodeState, useDiagramRef } from 'react-easy-diagram';\nimport 'react-easy-diagram/dist/index.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\nimport { ControlPanel } from './ControlPanel';\n\nconst useStyles = makeStyles(() => ({\n  diagram: {\n    height: '100vh',\n    width: '100vw',\n    backgroundColor: '#dbdbdb',\n    backgroundImage:\n      \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.3'%3E%3Cpath opacity='.5' d='M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z'/%3E%3Cpath d='M6 5V0H5v5H0v1h5v94h1V6h94V5H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\\\")\",\n  },\n  controlPanel: {\n    position: 'absolute',\n    top: '20px',\n    left: '20px',\n  },\n}));\n\nexport const App = () => {\n  const classes = useStyles();\n  const diagramRef = useDiagramRef();\n\n  return (\n    <Box className={classes.diagram}>\n      <Diagram ref={diagramRef} initialState={initDiagram} />\n      <Box className={classes.controlPanel}>\n        <ControlPanel reinitState={diagramRef.current?.reinitState} />\n      </Box>\n    </Box>\n  );\n};\n\nconst initDiagram: NodeState[] = [\n  {\n    id: 'Node 1',\n    position: {\n      x: 300,\n      y: 300,\n    },\n  },\n  {\n    id: 'Node 2',\n    position: {\n      x: 520,\n      y: 400,\n    },\n  },\n  {\n    id: 'Node 3',\n    position: {\n      x: 520,\n      y: 200,\n    },\n  },\n];\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}