{"version":3,"sources":["../../src/components/BackgroundDefault.tsx","../../src/hooks/useNotifyRef.ts","../../src/components/LinkWrapper.tsx","../../src/components/LinksLayer.tsx","../../src/hooks/userInteractions/useDragHandlers.ts","../../src/hooks/userInteractions/useUserAbilityToSelectSwitcher.ts","../../src/components/NodeWrapper.tsx","../../src/hooks/userInteractions/useNodeUserInteraction.ts","../../src/hooks/userInteractions/common.ts","../../src/components/NodesLayer.tsx","../../src/utils.ts","../../src/hooks/userInteractions/useDiagramUserInteraction.ts","../../src/hooks/userInteractions/usePinchHandlers.ts","../../src/hooks/userInteractions/useWheelHandler.ts","../../src/components/MiniControlDefault.tsx","../../src/components/DiagramInner.tsx","../../../node_modules/style-inject/dist/style-inject.es.js","../../src/states/diagramApi.ts","../../src/states/diagramsSettings.ts","../../src/states/diagramState.ts","../../src/components/LinkDefault.tsx","../../src/types/common.ts","../../src/states/visualComponents.ts","../../src/linkConstructors/curved.ts","../../src/states/linksSettings.ts","../../src/states/linkEndpointState.ts","../../src/states/linkState.ts","../../src/states/linkCreationState.ts","../../src/states/linksStore.ts","../../src/states/htmlElementRefState.ts","../../src/states/portState.ts","../../src/states/nodeState.ts","../../src/states/nodesStore.ts","../../src/components/PortWrapper.tsx","../../src/hooks/userInteractions/usePortUserInteraction.ts","../../src/components/PortsContainerDefault.tsx","../../src/states/portsSettings.ts","../../src/components/NodeDefault.tsx","../../src/states/nodesSettings.ts","../../src/states/rootStore.ts","../../src/components/Diagram.tsx","../../src/hooks/useRootStore.ts","../../src/components/BackgroundWrapper.tsx","ControlPanel.tsx","App.tsx","../../src/hooks/useDiagram.tsx","index.tsx"],"names":["diagramOffset","digramZoom","settings","defaultSettings","className","style","backgroundColor","color","backgroundImage","imageCreator","backgroundPosition","width","height","init","forceUpdate","ref","value","facade","i","LinkWrapper","observer","link","draggableRef","Component","componentDefinition","component","path","entity","LinksLayer","linksStore","Object","values","links","map","key","id","linkCreation","useDragHandlers","activeRef","state","parentScaleGetter","cancel","onDrag","pinching","delta","current","parentScale","setOffset","offset","onDragStart","event","onDragEnd","DISABLED_USER_SELECT_CSS_CLASS","useUserAbilityToSelectSwitcher","active","elementToSwitchUserSelectOn","classList","contains","add","remove","NodeWrapper","node","userInteractionElemRef","nodeState","enable","diagramStore","dragHandlers","zoom","e","targets","composedPath","length","target","eventPathContainsClass","domTarget","eventOptions","passive","enabled","ownerDocument","body","left","top","NodesLayer","nodesStore","nodes","generateTransform","translate","scale","translatePart","MIN_SCALE","computeTransformationOnScale","midpoint","factor","currentScale","clampFactorForTransformation","rect","getBoundingClientRect","mouseXPos","mouseYPos","dx","dy","clampValue","position","roundPoint","point","Math","round","addPoints","a","b","min","max","cancelGesture","undefined","pinchHandlers","elemToAttachToRef","pinchState","distance","origin","onPinch","originDiff","diff","elWidth","clientWidth","scaleTransformation","setTransformation","onPinchStart","onPinchEnd","usePinchHandlers","wheelHandler","onWheel","direction","yDirection","clientX","clientY","newTransformation","useWheelHandler","transform","transformString","MiniControlDefault","diagramApi","bottom","onClick","zoomIn","zoomOut","InnerDiagram","props","rootStore","diagramStyles","BackgroundWrapper","displayName","css","insertAt","document","head","getElementsByTagName","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","addNode","reinitState","fromJson","reinitSettings","nodesSettings","linksSettings","changeBy","diagramState","setZoom","recalculatePortPosition","this","backgroundComponent","finaleSettings","createDefaultBackground","newOffset","newZoom","linkDefaultSettings","pathStr","d","stroke","strokeWidth","fill","hasOnlyPosition","cx","cy","r","cirleRadius","createLinkDefault","componentDefaultType","defaultComponents","defaultType","obj","initDefaultComponents","defaultNodeType","components","addComponentsFromJson","getComponent","finalComponentType","entries","forEach","curvedLinkPathConstructor","source","sourcePortType","targetPortType","sourceStr","targetStr","directionFactor","tweakDirectionFactorBasedOnDistance","sqrt","pow","getControl","endpoint","portType","portTypeToLinkDirectionMapping","defualtSettings","right","createCurvedLinkPathConstructor","pathConstructor","visualComponents","nodeId","portId","ports","port","offsetRelativeToNode","realSize","v4","componentType","segments","extra","svgPath","setSource","setTarget","targetPortCandidate","startLinking","portState","eventOffsetRelativeToTarget","setTargetPortCandidate","resetTargetPortCandidateIfSame","stopLinking","addLink","newLinks","linkState","newLink","addLinkFromJson","initValue","offsetRelativeToParent","parent","iterElement","acumLeft","acumTop","offsetLeft","offsetTop","parentElement","currentInternal","clientHeight","label","keys","portObj","newNodes","newNode","PortWrapper","releasePointerCapture","pointerId","offsetX","offsetY","onPointerEnter","onPointerLeave","portsContainerDefaultSettings","createPortsContainerDefault","gapBetweenPorts","portsContainerVisualComponents","horizontal","vertical","portsSettings","generatePortsContainer","portsType","portsToShow","filter","portsContainer","diagramSettings","DiagramApi","RootStoreContext","createContext","store","RootStore","initState","apiRef","Provider","useStyles","makeStyles","form","display","flexDirection","margin","visibilityBtn","borderRadius","minWidth","padding","header","marginBottom","alignItems","ControlPanel","classes","useState","row","setRow","col","setCol","visible","setVisible","Box","clone","Card","Button","variant","aria-label","Tune","Typography","noValidate","autoComplete","onSubmit","preventDefault","newState","colNum","rowNum","getNodeId","j","push","generateLargeDiagram","TextField","onChange","parseInt","diagram","controlPanel","App","Diagram","useDiagram","default","attention","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c743ba43.chunk.js","sourcesContent":["import React from 'react';\r\nimport { IComponentDefinition, Point } from '..';\r\nimport { IBackgroundComponentProps } from '../states/diagramsSettings';\r\n\r\nconst BackgroundDefault: React.FC<\r\n  IBackgroundComponentProps<IBackgroundDefaultSettings>\r\n> = ({ diagramOffset, digramZoom, settings }) => {\r\n  settings = settings ?? defaultSettings;\r\n\r\n  return (\r\n    <div\r\n      className='react_fast_diagram_Background_Default'\r\n      style={{\r\n        backgroundColor: settings.color,\r\n        backgroundImage: settings.imageCreator(100 * digramZoom, 100 * digramZoom),\r\n        backgroundPosition: `${diagramOffset[0]}px ${diagramOffset[1]}px`,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport const createGridImage: ImageCreator = (width, height) => {\r\n  return `url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='${width}' height='${height}' viewBox='0 0 100 100'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.3'%3E%3Cpath opacity='.5' d='M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z'/%3E%3Cpath d='M6 5V0H5v5H0v1h5v94h1V6h94V5H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")`;\r\n};\r\n\r\nconst defaultSettings: IBackgroundDefaultSettings = {\r\n  imageCreator: createGridImage,\r\n  color: '#ececec',\r\n};\r\n\r\nexport const createDefaultBackground = (\r\n  settings?: Partial<IBackgroundDefaultSettings>\r\n): IComponentDefinition<\r\n  IBackgroundComponentProps<IBackgroundDefaultSettings>,\r\n  IBackgroundDefaultSettings\r\n> => {\r\n  const finaleSettings = {\r\n    ...defaultSettings,\r\n    ...(settings ? settings : {}),\r\n  };\r\n\r\n  return {\r\n    component: BackgroundDefault,\r\n    settings: finaleSettings,\r\n  };\r\n};\r\n\r\nexport type ImageCreator = (width: number, height: number) => string;\r\n\r\nexport interface IBackgroundDefaultSettings {\r\n  imageCreator: ImageCreator;\r\n  color: string;\r\n}\r\n","import { useState } from 'react';\r\n\r\nexport const useNotifyRef = <TValue>(\r\n  init: TValue\r\n): React.MutableRefObject<TValue> => {\r\n  const [_, forceUpdate] = useState(0);\r\n  const [ref] = useState(() => ({\r\n    value: init,\r\n    facade: {\r\n      get current() {\r\n        return ref.value;\r\n      },\r\n      set current(value) {\r\n        const last = ref.value;\r\n        if (last !== value) {\r\n          ref.value = value;\r\n          forceUpdate((i) => i + 1);\r\n        }\r\n      },\r\n    },\r\n  }));\r\n\r\n  return ref.facade;\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useNotifyRef } from '../hooks/useNotifyRef';\r\nimport { LinkState } from '../states/linkState';\r\n\r\nexport const LinkWrapper = observer<{ link: LinkState }>(({ link }) => {\r\n  const draggableRef = useNotifyRef(null);\r\n  const Component = link.componentDefinition.component;\r\n  const path = link.path;\r\n  \r\n  return (\r\n    <g>\r\n      <Component\r\n        draggableRef={draggableRef}\r\n        path={link.path}\r\n        entity={link}\r\n        settings={link.componentDefinition.settings}\r\n      />\r\n    </g>\r\n  );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { LinksStore } from '../states/linksStore';\r\nimport { LinkWrapper } from './LinkWrapper';\r\n\r\nexport const LinksLayer = observer<{linksStore: LinksStore}>(({linksStore}) => {\r\n  return (\r\n    <svg>\r\n      {Object.values(linksStore.links).map((link) => (\r\n        <LinkWrapper key={link.id} link={link} />\r\n      ))}\r\n      {linksStore.linkCreation.link && <LinkWrapper key={linksStore.linkCreation.link.id} link={linksStore.linkCreation.link} />}\r\n    </svg>\r\n  );\r\n});\r\n","import { useMemo } from 'react';\r\nimport { Handler } from 'react-use-gesture/dist/types';\r\nimport { IUserInteractionOffset } from './common';\r\n\r\ntype DragEventHandler =\r\n  | Handler<'drag', React.PointerEvent<Element> | PointerEvent>\r\n  | undefined;\r\n\r\ninterface IDragHandlers {\r\n  onDrag: DragEventHandler;\r\n  onDragStart: DragEventHandler;\r\n  onDragEnd: DragEventHandler;\r\n}\r\n\r\nexport function useDragHandlers(\r\n  activeRef: React.MutableRefObject<boolean>,\r\n  state: IUserInteractionOffset,\r\n  parentScaleGetter?: () => number,\r\n  cancel?: (event: React.PointerEvent<Element> | PointerEvent) => boolean\r\n): IDragHandlers {\r\n  const handlers = useMemo<IDragHandlers>(\r\n    () => ({\r\n      onDrag: ({ pinching, delta }) => {\r\n        if (!activeRef.current || pinching) {\r\n          return;\r\n        }\r\n        const parentScale = parentScaleGetter ? parentScaleGetter() : 1;\r\n        state.setOffset([\r\n          state.offset[0] + delta[0] / parentScale,\r\n          state.offset[1] + delta[1] / parentScale,\r\n        ]);\r\n      },\r\n      onDragStart: ({ event }) => {\r\n        if (cancel && cancel(event)) {\r\n          return;\r\n        }\r\n        activeRef.current = true;\r\n      },\r\n      onDragEnd: () => (activeRef.current = false),\r\n    }),\r\n    [activeRef, state, parentScaleGetter, cancel]\r\n  );\r\n\r\n  return handlers;\r\n}\r\n","import { useEffect } from \"react\";\r\n\r\nexport const DISABLED_USER_SELECT_CSS_CLASS =\r\n  'react_fast_diagram_disabled_user_select';\r\n\r\nexport function useUserAbilityToSelectSwitcher(\r\n  active: boolean,\r\n  elementToSwitchUserSelectOn: HTMLElement | undefined\r\n) {\r\n  useEffect(() => {\r\n    if (!active || !elementToSwitchUserSelectOn) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      elementToSwitchUserSelectOn.classList.contains(\r\n        DISABLED_USER_SELECT_CSS_CLASS\r\n      )\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    elementToSwitchUserSelectOn.classList.add(DISABLED_USER_SELECT_CSS_CLASS);\r\n\r\n    return () => {\r\n      elementToSwitchUserSelectOn.classList.remove(\r\n        DISABLED_USER_SELECT_CSS_CLASS\r\n      );\r\n    };\r\n  }, [active, elementToSwitchUserSelectOn]);\r\n}\r\n","import React from 'react';\r\nimport { useNodeUserInteraction } from '../hooks/userInteractions/useNodeUserInteraction';\r\nimport { NodeState } from '../states/nodeState';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport const NodeWrapper = observer<{node: NodeState}>(({ node }) => {\r\n  const { userInteractionElemRef } = useNodeUserInteraction(node);\r\n\r\n  return (\r\n    <div\r\n      id={node.id}\r\n      className='react_fast_diagram_NodeWrapper'\r\n      style={{\r\n        left: node.offset[0],\r\n        top: node.offset[1]\r\n      }}\r\n      ref={node.ref}\r\n    >\r\n      <node.componentDefinition.component\r\n        draggableRef={userInteractionElemRef}\r\n        entity={node}\r\n        settings={node.componentDefinition.settings}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import React, { useRef } from 'react';\r\nimport { useGesture } from 'react-use-gesture';\r\nimport { NodeState } from '../../states/nodeState';\r\nimport { useNotifyRef } from '../useNotifyRef';\r\nimport { useRootStore } from '../useRootStore';\r\nimport { eventPathContainsClass } from './common';\r\nimport { useDragHandlers } from './useDragHandlers';\r\nimport { useUserAbilityToSelectSwitcher } from './useUserAbilityToSelectSwitcher';\r\n\r\nexport const useNodeUserInteraction = (\r\n  nodeState: NodeState,\r\n  enable?: boolean\r\n): IUseNodeUserInteractionResult => {\r\n  const { diagramState: diagramStore } = useRootStore();\r\n\r\n  // Should trigger rendering on change, otherwise useUserSelectSwitcher will not be invoked\r\n  const activeRef = useNotifyRef(false);\r\n  const userInteractionElemRef = useRef<HTMLElement>(null);\r\n\r\n  const dragHandlers = useDragHandlers(\r\n    activeRef,\r\n    nodeState,\r\n    () => diagramStore.zoom,\r\n    (e) => {\r\n      return eventPathContainsClass(e, 'react_fast_diagram_PortWrapper');\r\n    }\r\n  );\r\n\r\n  useGesture(dragHandlers, {\r\n    domTarget: userInteractionElemRef,\r\n    eventOptions: { passive: false },\r\n    enabled: enable,\r\n  });\r\n\r\n  useUserAbilityToSelectSwitcher(\r\n    activeRef.current,\r\n    userInteractionElemRef.current?.ownerDocument?.body\r\n  );\r\n\r\n  return {\r\n    active: activeRef.current,\r\n    userInteractionElemRef,\r\n  };\r\n};\r\n\r\nexport interface IUseNodeUserInteractionResult {\r\n  active: boolean;\r\n  userInteractionElemRef: React.RefObject<HTMLElement>;\r\n}\r\n","import { Point } from \"../../types/common\";\r\n\r\nexport const eventPathContainsClass = (event: PointerEvent | React.PointerEvent<Element>, className: string) => {\r\n  const typedEvent = event as Event;\r\n  if ('composedPath' in typedEvent) {\r\n    const targets = typedEvent.composedPath();\r\n    for (let i = 0; i < targets.length; i++) {\r\n      const target = targets[i];\r\n      if ('classList' in target) {\r\n        if ((target as Element).classList.contains(className)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function allTouchTargetsContainsClass(\r\n  event: TouchEvent | React.TouchEvent<Element>,\r\n  listenOnlyClass: string | undefined,\r\n  ignoreClass: string | undefined\r\n): boolean {\r\n  for (let i = 0; i < event.touches.length; i++) {\r\n    if (\r\n      !eventTargetContainsClass(\r\n        event.touches[i].target,\r\n        listenOnlyClass,\r\n        ignoreClass\r\n      )\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport function eventTargetContainsClass(\r\n  eventTarget: EventTarget | null,\r\n  listenOnlyClass: string | undefined,\r\n  ignoreClass: string | undefined\r\n): boolean {\r\n  if (eventTarget && 'classList' in eventTarget) {\r\n    const targetElement = eventTarget as Element;\r\n    return (\r\n      (!listenOnlyClass || targetElement.classList.contains(listenOnlyClass)) &&\r\n      (!ignoreClass || !targetElement.classList.contains(ignoreClass))\r\n    );\r\n  } else return false;\r\n}\r\n\r\nexport interface IUserInteractionOffset {\r\n  offset: Point;\r\n  setOffset: (newOffset: Point) => any;\r\n}\r\n\r\nexport interface IUserInteractionTransformation {\r\n  offset: Point;\r\n  zoom: number;\r\n  setTransformation: (newOffset: Point, zoom: number) => any;\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { NodesStore } from '../states/nodesStore';\r\nimport { NodeWrapper } from './NodeWrapper';\r\n\r\nexport const NodesLayer = observer<{nodesStore: NodesStore}>(({nodesStore}) => {\r\n  return (\r\n    <div>\r\n      {Object.values(nodesStore.nodes).map((node) => (\r\n        <NodeWrapper key={node.id} node={node} />\r\n      ))}\r\n    </div>\r\n  );\r\n});\r\n","import { Point } from './types/common';\r\n\r\nexport const generateTransform = (translate: Point, scale?: number): string => {\r\n  const translatePart = `translate(${translate[0]}px, ${translate[1]}px)`;\r\n  if (scale) {\r\n    const scalePart = `scale(${scale})`;\r\n    return translatePart + ' ' + scalePart;\r\n  } else {\r\n    return translatePart;\r\n  }\r\n};\r\n\r\nexport const MIN_SCALE = 0.1;\r\nexport const MAX_SCALE = 3;\r\n\r\n// See: https://stackoverflow.com/a/30039971/9142642\r\nexport const computeTransformationOnScale = (\r\n  target: Element,\r\n  midpoint: Point,\r\n  translate: Point,\r\n  scale: number,\r\n  factor: number\r\n): ITransformation => {\r\n  factor = clampFactorForTransformation(factor, scale);\r\n\r\n  // The upper left corner of the target stays in the same place while the picture is enlarged\r\n  const rect = target.getBoundingClientRect();\r\n\r\n  // Get mouse position related to target\r\n  const mouseXPos = midpoint[0] - rect.left;\r\n  const mouseYPos = midpoint[1] - rect.top;\r\n\r\n  // Now consider the point under the mouse cursor. Every pixel above and to the\r\n  // left of the cursor has become *factor* larger. This displaces the point under the\r\n  // cursor by *factor* downward and to the right. Meanwhile, the cursor is in the same position.\r\n  // Note that the target might have been moved in the canvas before the zooming operation, so the\r\n  // cursor's horizontal position in the target is mouseXPos - transformation.translation.x before zooming,\r\n  // and likewise for the vertical position.\r\n  const dx = (mouseXPos - translate[0]) * (factor - 1);\r\n  const dy = (mouseYPos - translate[1]) * (factor - 1);\r\n\r\n  return {\r\n    scale: clampValue(scale * factor, MIN_SCALE, MAX_SCALE),\r\n    position: [\r\n      // Compensate for the displacement by moving the point back under the cursor\r\n      translate[0] - dx,\r\n      translate[1] - dy,\r\n    ],\r\n  };\r\n};\r\n\r\nexport interface ITransformation {\r\n  scale: number;\r\n  position: Point;\r\n}\r\n\r\nfunction clampFactorForTransformation(factor: number, currentScale: number) {\r\n  if (currentScale * factor < MIN_SCALE) {\r\n    return MIN_SCALE / currentScale;\r\n  } else if (currentScale * factor > MAX_SCALE) {\r\n    return MAX_SCALE / currentScale;\r\n  } else return factor;\r\n}\r\n\r\nexport const distanceBetweenPoints = (a: Point, b: Point) : number => (\r\n  Math.sqrt(Math.pow((a[0] - b[0]), 2) + Math.pow((a[1] - b[1]), 2))\r\n)\r\n\r\nexport const roundPoint = (point: Point) =>  ([\r\n  Math.round(point[0]),\r\n  Math.round(point[1]),\r\n] as Point);\r\n\r\nexport const addPoints = (a: Point, b: Point): Point => ([\r\n  a[0] + b[0],\r\n  a[1] + b[1],\r\n]);\r\n\r\nexport const subtractPoints = (a: Point, b: Point): Point => ([\r\n  a[0] - b[0],\r\n  a[1] - b[1],\r\n]);\r\n\r\nexport const multiplyPoint = (a: Point, m: number): Point => ([\r\n  a[0] * m,\r\n  a[1] * m,\r\n]);\r\n\r\nexport const arePointsEqual = (a: Point, b: Point): boolean =>\r\n  a === b || (a && b && a[0] === b[0] && a[1] === b[1]);\r\n\r\nexport const areTranformationsEqual = (\r\n  a: ITransformation,\r\n  b: ITransformation\r\n): boolean =>\r\n  a === b ||\r\n  (a && b && a.scale === b.scale && arePointsEqual(a.position, b.position));\r\n\r\nexport function clampValue(value: number, min: number, max: number) {\r\n  return Math.min(Math.max(value, min), max);\r\n}\r\n","import React, { useCallback, useContext, useRef } from 'react';\r\nimport { useGesture } from 'react-use-gesture';\r\nimport { WebKitGestureEvent } from 'react-use-gesture/dist/types';\r\nimport { RootStoreContext } from '../../components/Diagram';\r\nimport { useNotifyRef } from '../useNotifyRef';\r\nimport { useRootStore } from '../useRootStore';\r\nimport { useDragHandlers } from './useDragHandlers';\r\nimport { usePinchHandlers } from './usePinchHandlers';\r\nimport { useUserAbilityToSelectSwitcher } from './useUserAbilityToSelectSwitcher';\r\nimport { useWheelHandler } from './useWheelHandler';\r\n\r\nexport const useDiagramUserInteraction = (\r\n  enable?: boolean\r\n): IUseDragAndZoomResult => {\r\n  const { diagramState: diagramStore } = useRootStore();\r\n  const activeRef = useNotifyRef(false);\r\n  const userInteractionElemRef = useRef<HTMLDivElement>(null);\r\n\r\n  const cancelGesture = useCallback(\r\n    (\r\n      event:\r\n        | TouchEvent\r\n        | React.TouchEvent<Element>\r\n        | React.WheelEvent<Element>\r\n        | WheelEvent\r\n        | WebKitGestureEvent\r\n        | React.PointerEvent<Element>\r\n        | PointerEvent\r\n    ) => event.target !== userInteractionElemRef.current,\r\n    [userInteractionElemRef]\r\n  );\r\n\r\n  const dragHandlers = useDragHandlers(\r\n    activeRef,\r\n    diagramStore,\r\n    undefined,\r\n    cancelGesture\r\n  );\r\n\r\n  const pinchHandlers = usePinchHandlers(\r\n    userInteractionElemRef,\r\n    activeRef,\r\n    diagramStore,\r\n    cancelGesture\r\n  );\r\n\r\n  const wheelHandler = useWheelHandler(\r\n    userInteractionElemRef,\r\n    activeRef,\r\n    diagramStore\r\n  );\r\n\r\n  useGesture(\r\n    {\r\n      ...dragHandlers,\r\n      ...pinchHandlers,\r\n      ...wheelHandler,\r\n    },\r\n    {\r\n      domTarget: userInteractionElemRef,\r\n      eventOptions: { passive: false },\r\n      enabled: enable,\r\n    }\r\n  );\r\n\r\n  useUserAbilityToSelectSwitcher(\r\n    activeRef.current,\r\n    userInteractionElemRef.current?.ownerDocument?.body\r\n  );\r\n\r\n  return {\r\n    userInteractionElemRef,\r\n    transform: diagramStore.transformString,\r\n    active: activeRef.current,\r\n  };\r\n};\r\n\r\nexport interface IUseDragAndZoomResult {\r\n  userInteractionElemRef: React.RefObject<HTMLDivElement>;\r\n  transform: string;\r\n  active: boolean;\r\n}\r\n","import { useMemo, useRef } from 'react';\r\nimport {\r\n  Handler,\r\n  Vector2,\r\n  WebKitGestureEvent,\r\n} from 'react-use-gesture/dist/types';\r\nimport {\r\n  addPoints,\r\n  computeTransformationOnScale,\r\n  ITransformation,\r\n  subtractPoints,\r\n} from '../../utils';\r\nimport { IUserInteractionTransformation } from './common';\r\n\r\ntype PinchEvent =\r\n  | React.TouchEvent\r\n  | TouchEvent\r\n  | React.WheelEvent\r\n  | WheelEvent\r\n  | WebKitGestureEvent;\r\n\r\ntype PinchEventHandler = Handler<'pinch', PinchEvent> | undefined;\r\n\r\ninterface IPinchHandlers {\r\n  onPinch: PinchEventHandler;\r\n  onPinchStart: PinchEventHandler;\r\n  onPinchEnd: PinchEventHandler;\r\n}\r\n\r\nexport function usePinchHandlers(\r\n  elemToAttachToRef: React.RefObject<HTMLElement>,\r\n  activeRef: React.MutableRefObject<boolean>,\r\n  state: IUserInteractionTransformation,\r\n  cancel?: (event: PinchEvent) => boolean\r\n): IPinchHandlers {\r\n  const pinchState = useRef<IPinchState>({\r\n    distance: 0,\r\n    origin: [0, 0],\r\n  });\r\n\r\n  const handlers = useMemo<IPinchHandlers>(\r\n    () => ({\r\n      onPinch: ({ da: [distance], origin }) => {\r\n        if (!activeRef.current || !elemToAttachToRef.current) {\r\n          return;\r\n        }\r\n\r\n        const originDiff = subtractPoints(origin, pinchState.current.origin);\r\n\r\n        const diff = distance - pinchState.current.distance;\r\n        const elWidth =\r\n          elemToAttachToRef.current.clientWidth * state.zoom;\r\n        const targetElWidth = elWidth + diff;\r\n        const factor = targetElWidth / elWidth;\r\n\r\n        const scaleTransformation = computeTransformationOnScale(\r\n          elemToAttachToRef.current,\r\n          origin,\r\n          addPoints(state.offset, originDiff),\r\n          state.zoom,\r\n          factor\r\n        );\r\n\r\n        pinchState.current = {\r\n          distance,\r\n          origin,\r\n        };\r\n\r\n        state.setTransformation(scaleTransformation.position, scaleTransformation.scale);\r\n      },\r\n      onPinchStart: ({ da: [distance], origin, event }) => {\r\n        if (cancel && cancel(event)) {\r\n          return;\r\n        }\r\n\r\n        pinchState.current = {\r\n          distance,\r\n          origin,\r\n        };\r\n        activeRef.current = true;\r\n      },\r\n      onPinchEnd: () => (activeRef.current = false),\r\n    }),\r\n    [elemToAttachToRef, activeRef, state, cancel]\r\n  );\r\n\r\n  return handlers;\r\n}\r\n\r\ninterface IPinchState {\r\n  distance: number;\r\n  origin: Vector2;\r\n}\r\n","import { useMemo } from 'react';\r\nimport { Handler } from 'react-use-gesture/dist/types';\r\nimport { computeTransformationOnScale, ITransformation } from '../../utils';\r\nimport { IUserInteractionTransformation } from './common';\r\n\r\nexport function useWheelHandler(\r\n  elemToAttachToRef: React.RefObject<HTMLElement>,\r\n  activeRef: React.MutableRefObject<boolean>,\r\n  state: IUserInteractionTransformation\r\n): IWheelHandler {\r\n  const handlers = useMemo<IWheelHandler>(\r\n    () => ({\r\n      onWheel: ({\r\n        direction: [_, yDirection],\r\n        event: { clientX, clientY },\r\n      }) => {\r\n        if (elemToAttachToRef.current) {\r\n          let factor = 0.9;\r\n          if (yDirection < 0) {\r\n            factor = 1 / factor;\r\n          }\r\n          const newTransformation = computeTransformationOnScale(\r\n            elemToAttachToRef.current,\r\n            [clientX, clientY],\r\n            state.offset,\r\n            state.zoom,\r\n            factor\r\n          );\r\n          state.setTransformation(newTransformation.position, newTransformation.scale);\r\n        }\r\n      },\r\n    }),\r\n    [elemToAttachToRef, activeRef, state]\r\n  );\r\n\r\n  return handlers;\r\n}\r\n\r\ntype WheelEventHandler =\r\n  | Handler<'wheel', React.WheelEvent<Element> | WheelEvent>\r\n  | undefined;\r\n\r\ninterface IWheelHandler {\r\n  onWheel: WheelEventHandler;\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useRootStore } from '../hooks/useRootStore';\r\n\r\nexport const MiniControlDefault = observer(() => {\r\n  const { diagramApi } = useRootStore();\r\n\r\n  return (\r\n    <div className='react_fast_diagram_Minicontrol_Default'\r\n    style={{\r\n      bottom: 2 * 20 + 20\r\n    }}\r\n    >\r\n      <div\r\n        onClick={() => diagramApi.zoomIn()}\r\n        className='react_fast_diagram_Minicontrol_Default_Btn'\r\n      >\r\n        +\r\n      </div>\r\n      <div\r\n        onClick={() => diagramApi.zoomOut()}\r\n        className='react_fast_diagram_Minicontrol_Default_Btn'\r\n      >\r\n        -\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport { LinksLayer } from './LinksLayer';\r\nimport { NodesLayer } from './NodesLayer';\r\nimport { useDiagramUserInteraction } from '../hooks/userInteractions/useDiagramUserInteraction';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useRootStore } from '../hooks/useRootStore';\r\nimport { BackgroundWrapper } from './BackgroundWrapper';\r\nimport { MiniControlDefault } from './MiniControlDefault';\r\n\r\nexport interface IDiagramInnerProps {\r\n  diagramStyles?: React.CSSProperties;\r\n}\r\n\r\nexport const InnerDiagram = observer<IDiagramInnerProps>((props) => {\r\n  const rootStore = useRootStore();\r\n  const { transform, userInteractionElemRef } = useDiagramUserInteraction();\r\n\r\n  return (\r\n    <div\r\n      ref={userInteractionElemRef}\r\n      style={{ ...props.diagramStyles }}\r\n      className='react_fast_diagram_DiagramInner'\r\n    >\r\n      <BackgroundWrapper />\r\n      <MiniControlDefault />\r\n      <div\r\n        className='react_fast_diagram_DiagramInner_DraggablePart'\r\n        style={{\r\n          transform: transform,\r\n        }}\r\n      >\r\n        <LinksLayer linksStore={rootStore.linksStore} />\r\n        <NodesLayer nodesStore={rootStore.nodesStore} />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nInnerDiagram.displayName = 'InnerDiagram';\r\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { ILinksSettings, INodesSettings } from '.';\r\nimport { ILinkState } from './linkState';\r\nimport { INodeState } from './nodeState';\r\nimport { RootStore } from './rootStore';\r\n\r\nexport class DiagramApi {\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  addNode = (node: INodeState) => {\r\n    this.rootStore.nodesStore.addNode(node);\r\n  }\r\n\r\n  reinitState = (nodes: INodeState[], links: ILinkState[]) => {\r\n    this.rootStore.nodesStore.fromJson(nodes);\r\n    this.rootStore.linksStore.fromJson(links);\r\n  }\r\n\r\n  reinitSettings = (settings: IDiagramSetting) => {\r\n    settings.nodes && this.rootStore.nodesSettings.fromJson(settings.nodes);\r\n    settings.links && this.rootStore.linksSettings.fromJson(settings.links);\r\n  }\r\n\r\n  zoom = (changeBy: number) => {\r\n    this.rootStore.diagramState.setZoom(this.rootStore.diagramState.zoom + changeBy);\r\n  }\r\n\r\n  zoomIn = () => this.zoom(0.2);\r\n  zoomOut = () => this.zoom(-0.2);\r\n\r\n  recalculatePortPosition = () => {\r\n    // \r\n  }\r\n}\r\n\r\nexport interface IDiagramSetting {\r\n  // common?: ICommonSettings;\r\n  nodes?: INodesSettings;\r\n  links?: ILinksSettings;\r\n}","import { LinkDefault } from '../components/LinkDefault';\r\nimport {\r\n  IComponentDefinition,\r\n  IVisualComponentProps,\r\n  IVisualComponentsObject,\r\n  VisualComponents,\r\n} from './visualComponents';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { LinkState } from './linkState';\r\nimport { createCurvedLinkPathConstructor } from '../linkConstructors/curved';\r\nimport { componentDefaultType, Point } from '../types/common';\r\nimport { createDefaultBackground } from '../components/BackgroundDefault';\r\n\r\nexport class DiagramsSettings {\r\n  backgroundComponent: IComponentDefinition<IBackgroundComponentProps> = createDefaultBackground();\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n}\r\n\r\nexport interface IBackgroundComponentProps<TSettings = {}> {\r\n  diagramOffset: Point,\r\n  digramZoom: number,\r\n  settings?: TSettings\r\n}","import { Point } from '../types/common';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { RootStore } from './rootStore';\r\nimport { IUserInteractionTransformation } from '../hooks/userInteractions/common';\r\nimport { clampValue, generateTransform, MAX_SCALE, MIN_SCALE } from '../utils';\r\n\r\nexport class DiagramState implements IUserInteractionTransformation {\r\n  offset: Point = [0, 0];\r\n  zoom: number = 1;\r\n  \r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    makeAutoObservable(this)\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  setOffset = (newOffset: Point) => {\r\n    this.offset = newOffset\r\n  }\r\n\r\n  setTransformation = (newOffset: Point, newZoom: number) => {\r\n    this.setOffset(newOffset);\r\n    this.setZoom(newZoom);\r\n  }\r\n\r\n  setZoom = (newZoom: number) => {\r\n    this.zoom = clampValue(newZoom, MIN_SCALE, MAX_SCALE);\r\n  }\r\n\r\n  get transformString() {\r\n    return generateTransform(this.offset, this.zoom);\r\n  }\r\n}\r\n\r\nexport interface ICommonSettings {\r\n  readonly: boolean; // TODO: allow to make readonly specific components, such as nodes, links.\r\n}\r\n","import React from 'react';\r\nimport { ILinkVisualComponentProps } from '../states/linksSettings';\r\nimport { IComponentDefinition } from '../states/visualComponents';\r\n\r\nexport const LinkDefault: React.FC<\r\n  ILinkVisualComponentProps<ILinkDefaultSettings>\r\n> = (props) => {\r\n  const settings = props.settings ?? linkDefaultSettings;\r\n  const { svgPath: pathStr, target } = props.path;\r\n\r\n  return (\r\n    <g>\r\n      <path\r\n        ref={props.draggableRef}\r\n        d={pathStr}\r\n        stroke={settings.color}\r\n        strokeWidth={settings.strokeWidth}\r\n        fill='none'\r\n      />\r\n      {props.entity.target.hasOnlyPosition && (\r\n        <circle\r\n          cx={target[0]}\r\n          cy={target[1]}\r\n          r={settings.cirleRadius}\r\n          fill='orange'\r\n        />\r\n      )}\r\n    </g>\r\n  );\r\n};\r\n\r\nexport interface ILinkDefaultSettings {\r\n  color: string;\r\n  strokeWidth: number;\r\n  cirleRadius: number;\r\n}\r\n\r\nconst linkDefaultSettings: ILinkDefaultSettings = {\r\n  color: 'LightBlue',\r\n  strokeWidth: 3,\r\n  cirleRadius: 3,\r\n};\r\n\r\nexport function createLinkDefault(\r\n  settings?: Partial<ILinkDefaultSettings>\r\n): IComponentDefinition<ILinkVisualComponentProps, ILinkDefaultSettings> {\r\n  const finaleSettings = {\r\n    ...linkDefaultSettings,\r\n    ...(settings ? settings : {}),\r\n  };\r\n\r\n  return {\r\n    component: LinkDefault,\r\n    settings: finaleSettings,\r\n  };\r\n}\r\n\r\n// <g>\r\n//       {/* Main line */}\r\n//       <path d={points} stroke={linkColor} strokeWidth=\"3\" fill=\"none\" />\r\n//       {/* Thick line to make selection easier */}\r\n//       <path\r\n//         d={points}\r\n//         stroke={linkColor}\r\n//         strokeWidth=\"20\"\r\n//         fill=\"none\"\r\n//         strokeLinecap=\"round\"\r\n//         strokeOpacity={isHovered || isSelected ? 0.1 : 0}\r\n//         onMouseEnter={() => onLinkMouseEnter({ config, linkId: link.id })}\r\n//         onMouseLeave={() => onLinkMouseLeave({ config, linkId: link.id })}\r\n//         onClick={(e) => {\r\n//           onLinkClick({ config, linkId: link.id })\r\n//           e.stopPropagation()\r\n//         }}\r\n//       />\r\n//     </g>\r\n","export type Point = [number,number];\r\n\r\nexport interface Dictionary<TValue> {\r\n  [key: string]: TValue;\r\n}\r\n\r\nexport type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\r\n\r\nexport const componentDefaultType = 'default';","import { makeAutoObservable } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { componentDefaultType, Dictionary } from '../types/common';\r\n\r\nexport class VisualComponents<\r\n  TEntity,\r\n  TComponentProps extends IVisualComponentProps<TEntity>\r\n> {\r\n  defaultType: string = componentDefaultType;\r\n  defaultComponents: Dictionary<\r\n    IComponentDefinition<TComponentProps> | VisualComponent<TComponentProps>\r\n  >;\r\n  components: Dictionary<IComponentDefinition<TComponentProps>>;\r\n\r\n  constructor(\r\n    defaultComponents: Dictionary<\r\n      IComponentDefinition<TComponentProps> | VisualComponent<TComponentProps>\r\n    >\r\n  ) {\r\n    this.defaultComponents = defaultComponents;\r\n    this.initDefaultComponents();\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  fromJson = (\r\n    obj: IVisualComponentsObject<TComponentProps>,\r\n    initDefaultComponents: boolean = true\r\n  ) => {\r\n    this.defaultType = obj.defaultNodeType ?? componentDefaultType;\r\n\r\n    if (initDefaultComponents) {\r\n      this.initDefaultComponents();\r\n    } else {\r\n      this.components = {};\r\n    }\r\n\r\n    this.addComponentsFromJson(obj.components);\r\n  };\r\n\r\n  getComponent = (\r\n    type: string | undefined | null\r\n  ): IComponentDefinition<TComponentProps> => {\r\n    const finalComponentType = type ?? this.defaultType;\r\n    return (\r\n      this.components[finalComponentType] ?? this.components[this.defaultType]\r\n    );\r\n  };\r\n\r\n  private initDefaultComponents() {\r\n    this.components = {};\r\n    this.addComponentsFromJson(this.defaultComponents);\r\n  }\r\n\r\n  private addComponentsFromJson(components: Dictionary<\r\n    IComponentDefinition<TComponentProps> | VisualComponent<TComponentProps>\r\n  >) {\r\n    Object.entries(components).forEach(([key, value]) => {\r\n      if ('component' in value) {\r\n        this.components[key] = {\r\n          component: observer(value.component),\r\n          settings: value.settings,\r\n        };\r\n      } else {\r\n        this.components[key] = {\r\n          component: observer(value),\r\n        };\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport interface IVisualComponentsObject<TComponentProps> {\r\n  defaultNodeType?: string;\r\n  components: Dictionary<\r\n    IComponentDefinition<TComponentProps> | VisualComponent<TComponentProps>\r\n  >;\r\n}\r\n\r\nexport interface IComponentDefinition<\r\n  TComponentProps,\r\n  TSettings extends {} = {}\r\n> {\r\n  component: VisualComponent<TComponentProps>;\r\n  settings?: TSettings;\r\n}\r\n\r\nexport interface IVisualComponentProps<TEntity, TSettings extends {} = {}> {\r\n  entity: TEntity;\r\n  settings?: TSettings;\r\n}\r\n\r\nexport type VisualComponent<\r\n  TComponentProps\r\n> = React.FunctionComponent<TComponentProps>;\r\n","import { ILinkPathConstructor } from '../states/linksSettings';\r\nimport { Point } from '../types/common';\r\nimport { distanceBetweenPoints, roundPoint } from '../utils';\r\n\r\nfunction curvedLinkPathConstructor(\r\n  source: Point,\r\n  target: Point,\r\n  sourcePortType: string | undefined,\r\n  targetPortType: string | undefined,\r\n  settings: ICurvedLinkPathConstructorSettings\r\n): string {\r\n  if (!source || !target) return '';\r\n  source = roundPoint(source);\r\n  target = roundPoint(target);\r\n\r\n  const sourceStr = `${source[0]}, ${source[1]}`;\r\n  const targetStr = `${target[0]}, ${target[1]}`;\r\n\r\n  const directionFactor = settings.tweakDirectionFactorBasedOnDistance(\r\n    distanceBetweenPoints(source, target),\r\n    settings.directionFactor\r\n  );\r\n\r\n  function getControl(endpoint: Point, portType: string | undefined): string {\r\n    const linkDirection =\r\n      portType && settings.portTypeToLinkDirectionMapping[portType];\r\n    switch (linkDirection) {\r\n      case 'left':\r\n        return `${endpoint[0] - directionFactor}, ${endpoint[1]}`;\r\n      case 'up':\r\n        return `${endpoint[0]}, ${endpoint[1] - directionFactor}`;\r\n      case 'right':\r\n        return `${endpoint[0] + directionFactor}, ${endpoint[1]}`;\r\n      case 'down':\r\n        return `${endpoint[0]}, ${endpoint[1] + directionFactor}`;\r\n      default:\r\n        return `${endpoint[0]}, ${endpoint[1]}`;\r\n    }\r\n  }\r\n\r\n  if (sourcePortType || targetPortType) {\r\n    const sourceControl = getControl(source, sourcePortType);\r\n    const targetControl = getControl(target, targetPortType);\r\n    return `M ${sourceStr} C ${sourceControl} ${targetControl}, ${targetStr}`;\r\n  } else {\r\n    return `M ${sourceStr} Q ${target[0]}, ${source[1]}, ${targetStr}`;\r\n  }\r\n}\r\n\r\nexport interface ICurvedLinkPathConstructorSettings {\r\n  portTypeToLinkDirectionMapping: {\r\n    [key: string]: 'left' | 'right' | 'up' | 'down';\r\n  };\r\n  directionFactor: number;\r\n  tweakDirectionFactorBasedOnDistance: (\r\n    distance: number,\r\n    directionFactor: number\r\n  ) => number;\r\n}\r\n\r\nconst defualtSettings: ICurvedLinkPathConstructorSettings = {\r\n  portTypeToLinkDirectionMapping: {\r\n    left: 'left',\r\n    right: 'right',\r\n    top: 'up',\r\n    bottom: 'down',\r\n  },\r\n  directionFactor: 60,\r\n  tweakDirectionFactorBasedOnDistance: (distance, directionFactor) => {\r\n    if (distance < 100) {\r\n      return directionFactor * (distance / 100);\r\n    }\r\n    return directionFactor;\r\n  },\r\n};\r\n\r\nexport function createCurvedLinkPathConstructor(\r\n  settings?: Partial<ICurvedLinkPathConstructorSettings>\r\n): ILinkPathConstructor {\r\n  return (\r\n    source: Point,\r\n    target: Point,\r\n    sourcePortType: string | undefined,\r\n    targetPortType: string | undefined\r\n  ) =>\r\n    curvedLinkPathConstructor(\r\n      source,\r\n      target,\r\n      sourcePortType,\r\n      targetPortType,\r\n      settings ? { ...defualtSettings, ...settings } : defualtSettings\r\n    );\r\n}\r\n","import { LinkDefault } from '../components/LinkDefault';\r\nimport {\r\n  IVisualComponentProps,\r\n  IVisualComponentsObject,\r\n  VisualComponents,\r\n} from './visualComponents';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { LinkState } from './linkState';\r\nimport { createCurvedLinkPathConstructor } from '../linkConstructors/curved';\r\nimport { componentDefaultType, Point } from '../types/common';\r\nimport { ILinkPath } from '.';\r\n\r\nexport class LinksSettings {\r\n  pathConstructor: ILinkPathConstructor = createCurvedLinkPathConstructor();\r\n  visualComponents: VisualComponents<\r\n    LinkState,\r\n    ILinkVisualComponentProps\r\n  > = new VisualComponents<LinkState, ILinkVisualComponentProps>({\r\n    [componentDefaultType]: LinkDefault,\r\n  });\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  fromJson = (obj: ILinksSettings) => {\r\n    this.visualComponents.fromJson(obj);\r\n    this.pathConstructor = obj.pathConstructor;\r\n  };\r\n}\r\n\r\nexport interface ILinkVisualComponentProps<TSettings extends {} = {}>\r\n  extends IVisualComponentProps<LinkState, TSettings> {\r\n  draggableRef: React.RefObject<any>;\r\n  path: ILinkPath;\r\n}\r\n\r\nexport interface ILinksSettings\r\n  extends IVisualComponentsObject<ILinkVisualComponentProps> {\r\n  pathConstructor: ILinkPathConstructor;\r\n}\r\n\r\nexport type ILinkPathConstructor = (\r\n  source: Point,\r\n  target: Point,\r\n  sourcePortType: string | undefined,\r\n  targetPortType: string | undefined\r\n) => string;\r\n","import { makeAutoObservable } from 'mobx';\r\nimport { Point } from '../types/common';\r\nimport { RootStore } from './rootStore';\r\nimport { PortState } from './portState';\r\n\r\nexport class LinkEndpointState {\r\n  position: Point | null = null;\r\n  nodeId: string | null = null;\r\n  portId: string | null = null;\r\n\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    makeAutoObservable(this);\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  fromJson = (obj: LinkEndpoint) => {\r\n    if ('position' in obj) {\r\n      this.position = obj.position;\r\n      this.nodeId = null;\r\n      this.portId = null;\r\n    }\r\n    else {\r\n      this.position= null;\r\n      this.nodeId = obj.nodeId;\r\n      this.portId = obj.portId ?? null;\r\n    }\r\n  };\r\n\r\n  get port(): PortState | undefined {\r\n    if (this.nodeId && this.portId) {\r\n      const node = this.rootStore.nodesStore.nodes[this.nodeId];\r\n      if (node?.ports) {\r\n        return node.ports[this.portId];\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  get point(): Point {\r\n    if (this.nodeId) {\r\n      const node = this.rootStore.nodesStore.nodes[this.nodeId];\r\n\r\n      if (this.portId) {\r\n        const port = node.ports[this.portId];\r\n\r\n        if (port && port.offsetRelativeToNode && port.realSize) {\r\n          return [\r\n            node.offset[0] + port.offsetRelativeToNode[0] + port.realSize[0]/2,\r\n            node.offset[1] + port.offsetRelativeToNode[1] + port.realSize[1]/2\r\n          ];\r\n        }\r\n      }\r\n\r\n      if (node.realSize) {\r\n        return [\r\n          node.offset[0] + (node.realSize[0] / 2),\r\n          node.offset[1] + (node.realSize[1] / 2)\r\n        ];\r\n      }\r\n      else return node.offset;\r\n    } \r\n\r\n    return this.position ?? [0,0];\r\n  }\r\n\r\n  get hasOnlyPosition() : boolean {\r\n    return !!this.position && !this.nodeId;\r\n  }\r\n}\r\n\r\nexport interface ILinkNodeEndpoint {\r\n  nodeId: string;\r\n  portId?: string;\r\n}\r\n\r\nexport interface ILinkPointEndpoint {\r\n  position: Point;\r\n}\r\n\r\nexport type LinkEndpoint = ILinkNodeEndpoint | ILinkPointEndpoint;\r\n","import { makeAutoObservable, trace } from 'mobx';\r\nimport { componentDefaultType, Point } from '../types/common';\r\nimport { v4 } from 'uuid';\r\nimport { RootStore } from './rootStore';\r\nimport { addPoints, multiplyPoint } from '../utils';\r\nimport { LinkEndpoint, LinkEndpointState } from './linkEndpointState';\r\n\r\nexport class LinkState {\r\n  id: string;\r\n  componentType: string = componentDefaultType;\r\n  source: LinkEndpointState;\r\n  target: LinkEndpointState;\r\n  segments?: ILinkSegment[] = [];\r\n  extra?: any = null;\r\n\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore, id: string = v4()) {\r\n    this.id = id;\r\n    this.source = new LinkEndpointState(rootStore);\r\n    this.target = new LinkEndpointState(rootStore);\r\n    makeAutoObservable(this);\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  fromJson = (obj: ILinkState) => {\r\n    this.componentType = obj.componentType ?? componentDefaultType;\r\n    this.source.fromJson(obj.source);\r\n    this.target.fromJson(obj.target);\r\n    this.segments = obj.segments;\r\n    this.extra = obj.extra;\r\n  };\r\n\r\n  get path(): ILinkPath {\r\n    const { linksSettings } = this.rootStore;\r\n    const pathStr = linksSettings.pathConstructor(\r\n      this.source.point,\r\n      this.target.point,\r\n      this.source.port?.type,\r\n      this.target.port?.type\r\n    );\r\n\r\n    return {\r\n      svgPath: pathStr,\r\n      source: this.source.point,\r\n      target: this.target.point\r\n    }\r\n  }\r\n\r\n  get componentDefinition() {\r\n    const { visualComponents } = this.rootStore.linksSettings;\r\n    return visualComponents.getComponent(this.componentType);\r\n  }\r\n\r\n  setSource(source: LinkEndpoint) {\r\n    this.source.fromJson(source);\r\n  }\r\n\r\n  setTarget(target: LinkEndpoint) {\r\n    this.target.fromJson(target);\r\n  }\r\n}\r\n\r\nexport interface ILinkState {\r\n  id?: string;\r\n  componentType?: string;\r\n  source: LinkEndpoint;\r\n  target: LinkEndpoint;\r\n  segments?: ILinkSegment[];\r\n  extra?: any;\r\n}\r\n\r\nexport interface ILinkStateObjectWithId extends ILinkState {\r\n  id: string;\r\n}\r\n\r\nexport interface ILinkSegment {\r\n  position: Point;\r\n}\r\n\r\nexport interface ILinkPath {\r\n  svgPath: string,\r\n  source: Point,\r\n  target: Point\r\n}","import { makeAutoObservable, observable } from 'mobx';\r\nimport { Point } from '..';\r\nimport { addPoints } from '../utils';\r\nimport { LinkState } from './linkState';\r\nimport { PortState } from './portState';\r\nimport { RootStore } from './rootStore';\r\n\r\nexport class LinkCreationState {\r\n  link: LinkState | null = null;\r\n  targetPortCandidate: PortState | null = null;\r\n\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    makeAutoObservable(this, {\r\n      link: observable,\r\n      targetPortCandidate: observable,\r\n    });\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  startLinking(\r\n    portState: PortState,\r\n    eventOffsetRelativeToTarget: Point | undefined\r\n  ) {\r\n    this.link = new LinkState(this.rootStore);\r\n    this.link.setSource({\r\n      nodeId: portState.nodeId,\r\n      portId: portState.id,\r\n    });\r\n    this.link.setTarget({\r\n      position:\r\n        portState.offsetRelativeToNode &&\r\n        portState.node &&\r\n        eventOffsetRelativeToTarget\r\n          ? addPoints(\r\n              addPoints(portState.offsetRelativeToNode, portState.node.offset),\r\n              eventOffsetRelativeToTarget\r\n            )\r\n          : this.link.source.point,\r\n    });\r\n  }\r\n\r\n  setTargetPortCandidate(portState: PortState) {\r\n    if (this.link?.source && 'portId' in this.link.source) {\r\n      if (this.link.source.nodeId !== portState.nodeId) {\r\n        this.targetPortCandidate = portState;\r\n      }\r\n    }\r\n  }\r\n\r\n  resetTargetPortCandidateIfSame(portState: PortState) {\r\n    if (this.targetPortCandidate === portState) {\r\n      this.targetPortCandidate = null;\r\n    }\r\n  }\r\n\r\n  stopLinking() {\r\n    if (this.targetPortCandidate && this.link) {\r\n      this.link.setTarget({\r\n        nodeId: this.targetPortCandidate.nodeId,\r\n        portId: this.targetPortCandidate.id,\r\n      });\r\n      this.rootStore.linksStore.addLink(this.link);\r\n    }\r\n    this.targetPortCandidate = null;\r\n    this.link = null;\r\n  }\r\n}\r\n","import { makeAutoObservable } from 'mobx';\r\nimport { v4 } from 'uuid';\r\nimport { Dictionary } from '../types/common';\r\nimport { LinkCreationState } from './linkCreationState';\r\nimport { ILinkState, LinkState } from './linkState';\r\nimport { RootStore } from './rootStore';\r\n\r\nexport class LinksStore {\r\n  links: Dictionary<LinkState> = {};\r\n  linkCreation: LinkCreationState;\r\n\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.linkCreation = new LinkCreationState(rootStore);\r\n    makeAutoObservable(this);\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  fromJson = (newLinks: ILinkState[]) => {\r\n    this.links = {};\r\n    if (newLinks) {\r\n      newLinks.forEach((linkState) => {\r\n        const newLink = new LinkState(this.rootStore, linkState.id);\r\n        newLink.fromJson(linkState);\r\n        this.links[newLink.id] = newLink;\r\n      });\r\n    }\r\n  };\r\n\r\n  addLinkFromJson = (link: ILinkState) => {\r\n    const id = link.id ?? v4();\r\n\r\n    if (!this.links[id]) {\r\n      this.links[id] = new LinkState(this.rootStore, id);\r\n    }\r\n\r\n    this.links[id].fromJson(link);\r\n  };\r\n\r\n  addLink = (link: LinkState) => {\r\n    this.links[link.id] = link;\r\n  };\r\n}\r\n","import { makeAutoObservable } from 'mobx';\r\nimport { Point } from '..';\r\n\r\nexport class HtmlElementRefState {\r\n  currentInternal: HTMLDivElement | null;\r\n\r\n  constructor(initValue: HTMLDivElement | null) {\r\n    this.currentInternal = initValue;\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  get current() {\r\n    return this.currentInternal;\r\n  }\r\n\r\n  set current(value: HTMLDivElement | null) {\r\n    this.currentInternal = value;\r\n  }\r\n\r\n  offsetRelativeToParent = (parent: HTMLElement) : Point | null => {\r\n    if (this.current){\r\n      let iterElement = this.current as HTMLElement | null;\r\n      let acumLeft = 0;\r\n      let acumTop = 0;\r\n\r\n      while(parent !== iterElement && iterElement) {\r\n        acumLeft += iterElement.offsetLeft;\r\n        acumTop += iterElement.offsetTop;\r\n        iterElement = iterElement.parentElement;\r\n      }\r\n\r\n      return [acumLeft, acumTop];\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  get realSize() : Point | null {\r\n    if (this.current) {\r\n      return [this.current.clientWidth, this.current.clientHeight];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport interface IHtmlElementRect {\r\n  left: number;\r\n  top: number;\r\n  width: number;\r\n  height: number;\r\n}\r\n","import { componentDefaultType, Point } from '../types/common';\r\nimport { v4 } from 'uuid';\r\nimport { autorun, makeAutoObservable } from 'mobx';\r\nimport { HtmlElementRefState } from './htmlElementRefState';\r\nimport { NodeState, RootStore } from '.';\r\n\r\nexport class PortState {\r\n  id: string = '';\r\n  nodeId: string = ''\r\n  label?: string = '';\r\n  type: string = '';\r\n  ref: HtmlElementRefState;\r\n\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore, id: string = v4(), nodeId : string = v4()) {\r\n    this.id = id;\r\n    this.nodeId = nodeId;\r\n    this.ref = new HtmlElementRefState(null);\r\n    makeAutoObservable(this);\r\n    this.rootStore = rootStore;\r\n    // autorun(() => {\r\n    //   console.log(`Port '${this.nodeId + ' - ' + this.id}'. Offset: ${JSON.stringify(this.offsetRelativeToNode)}. Size: ${JSON.stringify(this.realSize)}`)\r\n    // })\r\n  }\r\n\r\n  fromJson = (obj: IPortState) => {\r\n    this.type = obj.type ?? componentDefaultType;\r\n    this.label = obj.label;\r\n  }\r\n\r\n  get node() : NodeState | undefined {\r\n    return this.rootStore.nodesStore.nodes[this.nodeId];\r\n  }\r\n  \r\n  get offsetRelativeToNode(): Point | null {\r\n    if (this.node?.ref.current) {\r\n      return this.ref.offsetRelativeToParent(this.node.ref.current);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  get realSize() : Point | null {\r\n    return this.ref.realSize;\r\n  }\r\n}\r\n\r\nexport interface IPortState {\r\n  label?: string;\r\n  type?: string;\r\n}\r\n","import { componentDefaultType, Dictionary, Point } from '../types/common';\r\nimport { autorun, makeAutoObservable } from 'mobx';\r\nimport { IPortState, PortState } from './portState';\r\nimport { v4 } from 'uuid';\r\nimport { generateTransform } from '../utils';\r\nimport { RootStore } from './rootStore';\r\nimport { HtmlElementRefState } from './htmlElementRefState';\r\n\r\nexport class NodeState {\r\n  id: string = '';\r\n  offset: Point = [0,0];\r\n  ports: Dictionary<PortState> = {};\r\n  ref: HtmlElementRefState;\r\n  componentType: string = componentDefaultType;\r\n  extra?: any = null;\r\n\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore, id: string = v4()) { \r\n    this.id = id;\r\n    this.ref = new HtmlElementRefState(null);\r\n    makeAutoObservable(this);\r\n    this.rootStore = rootStore;\r\n    // autorun(() => {\r\n    //   console.log(`Node '${this.id}'. Offset: ${JSON.stringify(this.offset)}. Size: ${JSON.stringify(this.realSize)}`)\r\n    // })\r\n  }\r\n\r\n  setOffset = (newOffset: Point) => {\r\n    this.offset = newOffset;\r\n  }\r\n\r\n  fromJson = (obj: INodeState) => {\r\n    this.offset = obj.position;\r\n    this.componentType = obj.componentType ?? componentDefaultType;\r\n    this.extra = obj.extra;\r\n\r\n    this.ports = {};\r\n    if (obj.ports && Object.keys(obj.ports).length > 0) {\r\n      Object.entries(obj.ports).forEach(([portId, portObj]) => {\r\n        const portState = new PortState(this.rootStore, portId, this.id);\r\n        portState.fromJson(portObj);\r\n        this.ports[portId] = portState;\r\n      });\r\n    }\r\n  }\r\n\r\n  get transformString() {\r\n    return generateTransform(this.offset);\r\n  }\r\n\r\n  get componentDefinition() {\r\n    const { visualComponents } = this.rootStore.nodesSettings;\r\n    return visualComponents.getComponent(this.componentType);\r\n  }\r\n\r\n  get realSize() : Point | null {\r\n    return this.ref.realSize;\r\n  }\r\n}\r\n\r\nexport interface INodeState {\r\n  id?: string;\r\n  position: Point;\r\n  ports?: Dictionary<IPortState>;\r\n  componentType?: string;\r\n  extra?: any;\r\n}\r\n","import { Dictionary } from '../types/common';\r\nimport { makeAutoObservable, observable } from 'mobx';\r\nimport { INodeState, NodeState } from './nodeState';\r\nimport { RootStore } from './rootStore';\r\nimport { v4 } from 'uuid';\r\n\r\nexport class NodesStore {\r\n  nodes: Dictionary<NodeState> = {};\r\n\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    makeAutoObservable(this);\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  fromJson = (newNodes: INodeState[]) => {\r\n    this.nodes = {};\r\n    if (newNodes) {\r\n      newNodes.forEach(node => {\r\n        const newNode = new NodeState(this.rootStore, node.id);\r\n        newNode.fromJson(node);\r\n        this.nodes[newNode.id] = newNode;\r\n      });\r\n    }\r\n  }\r\n\r\n  addNode = (node: INodeState) => {\r\n    const id = node.id ?? v4();\r\n\r\n    if (!this.nodes[id]) {\r\n      this.nodes[id] = new NodeState(this.rootStore, id);\r\n    }\r\n    \r\n    this.nodes[id].fromJson(node);\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { PortState } from '../states';\r\nimport { usePortUserInteraction } from '../hooks/userInteractions/usePortUserInteraction';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport const PortWrapper: React.FC<{ port: PortState }> = observer(({ port }) => {\r\n  const { userInteractionElemRef } = usePortUserInteraction(port);\r\n\r\n  return (\r\n    <div\r\n      ref={{\r\n        set current(value: HTMLDivElement) {\r\n          userInteractionElemRef.current = value;\r\n          port.ref.current = value;\r\n        },\r\n      }}\r\n      id={port.nodeId + ':' + port.id}\r\n      className='react_fast_diagram_PortWrapper'\r\n    >\r\n      <div\r\n        style={{\r\n          width: 10,\r\n          height: 10,\r\n          backgroundColor: 'green',\r\n        }}\r\n      ></div>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useRef } from 'react';\r\nimport { useGesture } from 'react-use-gesture';\r\nimport { Point } from '../..';\r\nimport { PortState } from '../../states/portState';\r\nimport { useNotifyRef } from '../useNotifyRef';\r\nimport { useRootStore } from '../useRootStore';\r\nimport { useUserAbilityToSelectSwitcher } from './useUserAbilityToSelectSwitcher';\r\n\r\nexport const usePortUserInteraction = (\r\n  portState: PortState,\r\n  enable?: boolean\r\n): IUsePortUserInteractionResult => {\r\n  const {\r\n    linksStore: { linkCreation },\r\n    diagramState,\r\n  } = useRootStore();\r\n\r\n  // Should trigger rendering on change, otherwise useUserSelectSwitcher will not be invoked\r\n  const activeRef = useNotifyRef(false);\r\n  const userInteractionElemRef = useRef<HTMLDivElement>(\r\n    null\r\n  ) as React.MutableRefObject<HTMLDivElement | null>;\r\n\r\n  useGesture(\r\n    {\r\n      onDrag: ({ pinching, delta }) => {\r\n        if (!activeRef.current || pinching || !linkCreation.link) {\r\n          return;\r\n        }\r\n        const parentScale = diagramState.zoom;\r\n        linkCreation.link.setTarget({\r\n          position: [\r\n            linkCreation.link.target.point[0] + delta[0] / parentScale,\r\n            linkCreation.link.target.point[1] + delta[1] / parentScale,\r\n          ],\r\n        });\r\n      },\r\n      onDragStart: ({ event }) => {\r\n        // Important! Otherwise on touch display onPointerEnter will not work!\r\n        const portHtmlElement = event.target as Element;\r\n        portHtmlElement.releasePointerCapture(event.pointerId);\r\n\r\n        activeRef.current = true;\r\n\r\n        let eventOffsetRelativeToTarget;\r\n        // On the old browser these properties could be not available\r\n        if('offsetX' in event && 'offsetY' in event) {\r\n          eventOffsetRelativeToTarget = [event.offsetX, event.offsetY] as Point\r\n        }\r\n\r\n        linkCreation.startLinking(portState, eventOffsetRelativeToTarget);\r\n      },\r\n      onDragEnd: () => {\r\n        activeRef.current = false;\r\n        linkCreation.stopLinking();\r\n      },\r\n      onPointerEnter: () => {\r\n        linkCreation.setTargetPortCandidate(portState);\r\n      },\r\n      onPointerLeave: () => {\r\n        linkCreation.resetTargetPortCandidateIfSame(portState);\r\n      },\r\n    },\r\n    {\r\n      domTarget: userInteractionElemRef,\r\n      eventOptions: { passive: false },\r\n      enabled: enable,\r\n    }\r\n  );\r\n\r\n  useUserAbilityToSelectSwitcher(\r\n    activeRef.current,\r\n    userInteractionElemRef.current?.ownerDocument?.body\r\n  );\r\n\r\n  return {\r\n    active: activeRef.current,\r\n    userInteractionElemRef,\r\n  };\r\n};\r\n\r\nexport interface IUsePortUserInteractionResult {\r\n  active: boolean;\r\n  userInteractionElemRef: React.MutableRefObject<HTMLDivElement | null>;\r\n}\r\n","import React from 'react';\r\nimport { IComponentDefinition } from '../states/visualComponents';\r\nimport { PortWrapper } from './PortWrapper';\r\nimport { IPortsContainerVisualComponentProps } from '../states/portsSettings';\r\n\r\nexport interface IPortsContainerDefaultSettings {\r\n  style?: React.CSSProperties;\r\n  direction: 'horizontal' | 'vertical';\r\n  gapBetweenPorts: number | string;\r\n}\r\n\r\nexport const PortsContainerDefault: React.FC<\r\n  IPortsContainerVisualComponentProps<IPortsContainerDefaultSettings>\r\n> = ({ entity, settings }) => {\r\n  const finalSettings = {\r\n    ...portsContainerDefaultSettings,\r\n    ...settings,\r\n  };\r\n\r\n  let className = 'react_fast_diagram_flex_gap ';\r\n  if (finalSettings.direction === 'horizontal') {\r\n    className += 'react_fast_diagram_flex_gap_x'\r\n  }\r\n  else {\r\n    className += 'react_fast_diagram_flex_gap_y';\r\n  }\r\n\r\n  return (\r\n    <div className={className} style={{\r\n      // @ts-ignore\r\n      '--gap': '5px'\r\n    }}>\r\n      {Object.values(entity).map((port) => (\r\n        <PortWrapper key={port.id} port={port} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport function createPortsContainerDefault(\r\n  settings?: Partial<IPortsContainerDefaultSettings>\r\n): IComponentDefinition<\r\n  IPortsContainerVisualComponentProps<IPortsContainerDefaultSettings>,\r\n  IPortsContainerDefaultSettings\r\n> {\r\n  return {\r\n    component: PortsContainerDefault,\r\n    settings: {\r\n      ...portsContainerDefaultSettings,\r\n      ...settings\r\n    }\r\n  };\r\n}\r\n\r\nconst portsContainerDefaultSettings: IPortsContainerDefaultSettings = {\r\n  direction: 'horizontal',\r\n  gapBetweenPorts: 8,\r\n};\r\n","import {\r\n  IVisualComponentProps,\r\n  IVisualComponentsObject,\r\n  VisualComponents,\r\n} from './visualComponents';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { Point } from '../types/common';\r\nimport { PortState } from './portState';\r\nimport { createPortsContainerDefault } from '../components/PortsContainerDefault';\r\n\r\nexport class PortsSettings {\r\n  portsContainerVisualComponents: VisualComponents<\r\n    PortState[],\r\n    IPortsContainerVisualComponentProps\r\n  > = new VisualComponents<PortState[], IPortsContainerVisualComponentProps>({\r\n    horizontal: createPortsContainerDefault({ direction: 'horizontal' }),\r\n    vertical: createPortsContainerDefault({ direction: 'vertical' }),\r\n  });\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  fromJson = (obj: IPortsSettings) => {\r\n    this.portsContainerVisualComponents.fromJson(obj);\r\n  };\r\n}\r\n\r\nexport interface IPortsContainerVisualComponentProps<TSettings extends {} = {}>\r\n  extends IVisualComponentProps<PortState[], TSettings> {}\r\n\r\nexport interface IPortsSettings\r\n  extends IVisualComponentsObject<IPortsContainerVisualComponentProps> {}\r\n","import React, { useEffect } from 'react';\r\nimport { IComponentDefinition } from '../states/visualComponents';\r\nimport { INodeVisualComponentProps } from '../states/nodesSettings';\r\nimport { PortWrapper } from './PortWrapper';\r\nimport { useRootStore } from '../hooks/useRootStore';\r\nimport { PortsSettings } from '../states/portsSettings';\r\nimport { PortState } from '../states';\r\nimport { Dictionary } from '..';\r\n\r\nexport interface INodeDefaultSettings {\r\n  style: React.CSSProperties;\r\n}\r\n\r\nexport const NodeDefault: React.FC<\r\n  INodeVisualComponentProps<INodeDefaultSettings>\r\n> = ({ entity, settings, draggableRef }) => {\r\n  const { portsSettings } = useRootStore();\r\n\r\n  return (\r\n    <div\r\n      ref={draggableRef}\r\n      className='react_fast_diagram_Node_Default'\r\n      style={settings?.style}\r\n    >\r\n      <span>{entity.id}</span>\r\n\r\n      {generatePortsContainer(portsSettings, entity.ports, 'left', 'left')}\r\n      {generatePortsContainer(portsSettings, entity.ports, 'top', 'top')}\r\n      {generatePortsContainer(portsSettings, entity.ports, 'right', 'right')}\r\n      {generatePortsContainer(portsSettings, entity.ports, 'bottom', 'bottom')}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport function generatePortsContainer(\r\n  portsSettings: PortsSettings,\r\n  ports: Dictionary<PortState>,\r\n  portsType: string,\r\n  position: 'left' | 'top' | 'right' | 'bottom'\r\n) {\r\n  const portsToShow = Object.values(ports).filter(\r\n    (port) => port.type === portsType\r\n  );\r\n  const portsContainer = portsSettings.portsContainerVisualComponents.getComponent(\r\n    (position === 'left' || position === 'right') ? 'vertical' : 'horizontal'\r\n  );\r\n\r\n  return (\r\n    portsToShow && (\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          left: position === 'left' ? 0 : undefined,\r\n          top: (position === 'left' || position === 'right' || position === 'top') ? 0 : undefined,\r\n          right: position === 'right' ? 0 : undefined,\r\n          bottom: position === 'bottom' ? 0 : undefined,\r\n          height: (position === 'left' || position === 'right') ? '100%' : undefined,\r\n          width: (position === 'top' || position === 'bottom') ? '100%' : undefined\r\n        }}\r\n      >\r\n        <portsContainer.component\r\n          entity={portsToShow}\r\n          settings={portsContainer.settings}\r\n        />\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport function createNodeDefault(\r\n  settings?: INodeDefaultSettings\r\n): IComponentDefinition<\r\n  INodeVisualComponentProps<INodeDefaultSettings>,\r\n  INodeDefaultSettings\r\n> {\r\n  return {\r\n    component: NodeDefault,\r\n    settings,\r\n  };\r\n}\r\n\r\n// export const NodeDefault = forwardRef<\r\n//   HTMLDivElement,\r\n//   IComponentProps<NodeState, INodeDefaultSettings>\r\n// >(observable(() => {\r\n","import { makeAutoObservable } from 'mobx';\r\nimport { componentDefaultType } from '..';\r\nimport { NodeDefault } from '../components/NodeDefault';\r\nimport { NodeState } from './nodeState';\r\nimport {\r\n  IVisualComponentProps,\r\n  IVisualComponentsObject,\r\n  VisualComponents,\r\n} from './visualComponents';\r\n\r\nexport class NodesSettings {\r\n  visualComponents: VisualComponents<\r\n    NodeState,\r\n    INodeVisualComponentProps\r\n  > = new VisualComponents<NodeState, INodeVisualComponentProps>({\r\n    [componentDefaultType]: NodeDefault,\r\n  });\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  fromJson = (obj: INodesSettings) => {\r\n    this.visualComponents.fromJson(obj);\r\n  };\r\n}\r\n\r\nexport interface INodeVisualComponentProps<TSettings extends {} = {}>\r\n  extends IVisualComponentProps<NodeState, TSettings> {\r\n  draggableRef: React.RefObject<any>;\r\n}\r\n\r\nexport interface INodesSettings\r\n  extends IVisualComponentsObject<INodeVisualComponentProps> {}\r\n","import { DiagramApi } from './diagramApi';\r\nimport { DiagramsSettings } from './diagramsSettings';\r\nimport { DiagramState } from './diagramState';\r\nimport { LinksSettings } from './linksSettings';\r\nimport { LinksStore } from './linksStore';\r\nimport { NodesSettings } from './nodesSettings';\r\nimport { NodesStore } from './nodesStore';\r\nimport { PortsSettings } from './portsSettings';\r\n\r\nexport class RootStore {\r\n  diagramState: DiagramState;\r\n  \r\n  nodesStore: NodesStore;\r\n  linksStore: LinksStore;\r\n  \r\n  diagramSettings: DiagramsSettings;\r\n  nodesSettings: NodesSettings;\r\n  portsSettings: PortsSettings;\r\n  linksSettings: LinksSettings;\r\n  \r\n  diagramApi: DiagramApi;\r\n\r\n  constructor() {\r\n    this.diagramState = new DiagramState(this);\r\n\r\n    this.nodesStore = new NodesStore(this);\r\n    this.linksStore = new LinksStore(this);\r\n\r\n    this.diagramSettings = new DiagramsSettings();\r\n    this.nodesSettings = new NodesSettings();\r\n    this.linksSettings = new LinksSettings();\r\n    this.portsSettings = new PortsSettings();\r\n\r\n    this.diagramApi = new DiagramApi(this);\r\n  }\r\n}\r\n","import React, { useEffect, useMemo } from 'react';\r\nimport { InnerDiagram } from './DiagramInner';\r\nimport '../Diagram.css';\r\nimport { RootStore } from '../states/rootStore';\r\nimport { DiagramApi, IDiagramSetting } from '../states/diagramApi';\r\nimport { INodeState } from '../states/nodeState';\r\nimport { ILinkState } from '../states/linkState';\r\n\r\nimport '../Diagram.css';\r\n\r\nexport const RootStoreContext = React.createContext<RootStore | null>(null);\r\n\r\nexport const Diagram: React.FC<IDiagramProps> = (props) => {\r\n  const rootStore = useMemo(() => {\r\n    const store = new RootStore();\r\n    store.diagramApi.reinitState(\r\n      props.initState?.nodes ?? [],\r\n      props.initState?.links ?? []\r\n    );\r\n    props.settings && store.diagramApi.reinitSettings(props.settings);\r\n    return store;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.apiRef) {\r\n      props.apiRef.current = rootStore.diagramApi;\r\n    }\r\n  }, [rootStore, props.apiRef]);\r\n\r\n  return (\r\n    <RootStoreContext.Provider value={rootStore}>\r\n      <InnerDiagram />\r\n    </RootStoreContext.Provider>\r\n  );\r\n};\r\n\r\nexport interface IDiagramProps {\r\n  settings?: IDiagramSetting;\r\n  initState?: IDiagramInitState;\r\n  apiRef?: React.MutableRefObject<DiagramApi | null>;\r\n}\r\n\r\nexport interface IDiagramInitState {\r\n  nodes: INodeState[];\r\n  links: ILinkState[];\r\n}\r\n\r\nDiagram.displayName = 'Diagram';\r\n","import { useContext } from \"react\";\r\nimport { RootStoreContext } from \"../components/Diagram\";\r\nimport { RootStore } from \"../states/rootStore\";\r\n\r\nexport const useRootStore = () => useContext(RootStoreContext) as RootStore;","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { IComponentDefinition, Point } from '..';\r\nimport { useRootStore } from '../hooks/useRootStore';\r\n\r\nexport const BackgroundWrapper = observer(() => {\r\n  const { diagramSettings, diagramState } = useRootStore();\r\n\r\n  return (\r\n    <div className='react_fast_diagram_BackgroundWrapper'>\r\n      <diagramSettings.backgroundComponent.component\r\n        diagramOffset={diagramState.offset}\r\n        digramZoom={diagramState.zoom}\r\n        settings={diagramSettings.backgroundComponent.settings}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Tune } from '@material-ui/icons';\r\nimport Card from '@material-ui/core/Card';\r\nimport { Box, Button, TextField, Typography } from '@material-ui/core';\r\nimport { IDiagramInitState, ILinkState, INodeState } from '@react-easy-diagram/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    margin: '-8px 0',\r\n    '& > *': {\r\n      margin: '8px 0'\r\n    }\r\n  },\r\n  visibilityBtn: {\r\n    borderRadius: '25px',\r\n    minWidth: '24px',\r\n    padding: '8px 8px',\r\n    backgroundColor: 'white',\r\n  },\r\n  header: {\r\n    marginBottom: '15px',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    margin: '0 -14px',\r\n    '& > *': {\r\n      margin: '0 14px'\r\n    }\r\n  },\r\n}));\r\n\r\nconst generateLargeDiagram = (colNum: number, rowNum: number): IDiagramInitState => {\r\n  const nodes : INodeState[] = [];\r\n  const links : ILinkState[] = [];\r\n  const getNodeId = (i: number,j: number) => `node_${i}_${j}`;\r\n\r\n  for (let i = 0; i < colNum; i++) {\r\n    for (let j = 0; j < rowNum; j++) {\r\n      nodes.push({\r\n        id: getNodeId(i,j),\r\n        position: [i * 120, j * 120 ],\r\n        ports: {\r\n          left: {type: 'left'},\r\n          top: {type: 'top'},\r\n          right: {type: 'right'},\r\n          bottom: {type: 'bottom'},\r\n        }\r\n      });\r\n      if (i - 1 >= 0) {\r\n        links.push({\r\n          source: {\r\n            nodeId: getNodeId(i - 1,j),\r\n            portId: 'right'\r\n          },\r\n          target: {\r\n            nodeId: getNodeId(i,j),\r\n            portId: 'left'\r\n          }\r\n        });\r\n      }\r\n      if (j - 1 >= 0) {\r\n        links.push({\r\n          source: {\r\n            nodeId: getNodeId(i,j - 1),\r\n            portId: 'bottom'\r\n          },\r\n          target: {\r\n            nodeId: getNodeId(i,j),\r\n            portId: 'top'\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return {nodes,links};\r\n};\r\n\r\nexport interface ControlPanelProps{\r\n  reinitState?(nodes: INodeState[], links: ILinkState[]): void;\r\n}\r\n\r\nexport const ControlPanel = (props: ControlPanelProps) => {\r\n  const classes = useStyles();\r\n\r\n  const [row, setRow] = useState(10);\r\n  const [col, setCol] = useState(10);\r\n\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const onFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (props.reinitState) {\r\n      const newState = generateLargeDiagram(row, col);\r\n      props.reinitState(newState.nodes, newState.links);\r\n    }\r\n  };\r\n\r\n  if (visible) {\r\n    return (\r\n      <Box padding={3} clone>\r\n        <Card>\r\n          <div className={classes.header}>\r\n            <Button\r\n              className={classes.visibilityBtn}\r\n              variant='outlined'\r\n              aria-label='control-panel'\r\n              onClick={() => setVisible(false)}\r\n            >\r\n              <Tune />\r\n            </Button>\r\n            <Typography variant='h5'>Control Panel</Typography>\r\n          </div>\r\n          <form\r\n            className={classes.form}\r\n            noValidate\r\n            autoComplete='off'\r\n            onSubmit={onFormSubmit}\r\n          >\r\n            <TextField\r\n              id='rows'\r\n              value={row}\r\n              type='number'\r\n              label='Rows'\r\n              variant='outlined'\r\n              onChange={(e) => setRow(parseInt(e.target.value))}\r\n            />\r\n            <TextField\r\n              id='columns'\r\n              value={col}\r\n              type='number'\r\n              label='Columns'\r\n              variant='outlined'\r\n              onChange={(e) => setCol(parseInt(e.target.value))}\r\n            />\r\n            <Button variant='contained' type='submit'>\r\n              Generate new Diagram\r\n            </Button>\r\n          </form>\r\n        </Card>\r\n      </Box>\r\n    );\r\n  } else {\r\n    return (\r\n      <Button\r\n        variant='outlined'\r\n        className={classes.visibilityBtn}\r\n        aria-label='control-panel'\r\n        onClick={() => setVisible(true)}\r\n      >\r\n        <Tune />\r\n      </Button>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { createCurvedLinkPathConstructor, createLinkDefault, IDiagramInitState, useDiagram } from '@react-easy-diagram/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Box } from '@material-ui/core';\r\nimport { ControlPanel } from './ControlPanel';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  diagram: {\r\n    height: '100vh',\r\n    width: '100vw',\r\n  },\r\n  controlPanel: {\r\n    position: 'absolute',\r\n    top: '20px',\r\n    left: '20px',\r\n  },\r\n}));\r\n\r\nexport const App = () => {\r\n  const classes = useStyles();\r\n  const { Diagram, apiRef } = useDiagram(initState, {\r\n    links: {\r\n      components: {\r\n        default: createLinkDefault(),\r\n        attention: createLinkDefault({color: 'red'})\r\n      },\r\n      pathConstructor: createCurvedLinkPathConstructor()\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Box className={classes.diagram}>\r\n      <Diagram />\r\n      <Box className={classes.controlPanel}>\r\n        <ControlPanel reinitState={apiRef.current?.reinitState} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst initState: IDiagramInitState = {\r\n  nodes: [\r\n    {\r\n      id: 'Node 1',\r\n      position: [300, 300],\r\n      ports: {\r\n        'output_1': {type: 'bottom'}, \r\n      }\r\n    },\r\n    {\r\n      id: 'Node 2',\r\n      position: [520, 400],\r\n      ports: {\r\n        'input_1': {type: 'top'}, \r\n        'input_2': {type: 'top'}, \r\n        'output_1': {type: 'right'}, \r\n        'output_2': {type: 'right'}, \r\n        'output_3': {type: 'right'}, \r\n      }\r\n    },\r\n    {\r\n      id: 'Node 3',\r\n      position: [520, 200],\r\n      ports: {\r\n        'input_1': {type: 'top'}, \r\n        'output_1': {type: 'bottom'}, \r\n        'output_2': {type: 'bottom'}, \r\n      }\r\n    },\r\n  ],\r\n  links: [\r\n    {\r\n      source: {\r\n        nodeId: 'Node 2',\r\n      },\r\n      target: {\r\n        nodeId: 'Node 1',\r\n      },\r\n      componentType: 'attention',\r\n    },\r\n  ],\r\n};\r\n","import React, { useMemo } from 'react';\r\nimport {\r\n  Diagram,\r\n  IDiagramInitState\r\n} from '../components/Diagram';\r\nimport { DiagramApi, IDiagramSetting } from '../states/diagramApi';\r\nimport { useNotifyRef } from './useNotifyRef';\r\n\r\nexport const useDiagram = (\r\n  initState?: IDiagramInitState,\r\n  settings?: IDiagramSetting\r\n) => {\r\n  const apiRef = useNotifyRef<DiagramApi | null>(null);\r\n\r\n  const obj = useMemo(\r\n    () => ({\r\n      Diagram: () => (\r\n        <Diagram apiRef={apiRef} initState={initState} settings={settings} />\r\n      ),\r\n      apiRef,\r\n    }),\r\n    []\r\n  );\r\n\r\n  return obj;\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}