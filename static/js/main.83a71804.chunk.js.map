{"version":3,"sources":["../../src/DiagramState.ts","../../src/components/LinksLayer.tsx","../../src/components/Node.tsx","../../src/components/NodesLayer.tsx","../../src/components/DiagramInner.tsx","../../src/utils.ts","../../src/components/Diagram.tsx","App.tsx","index.tsx"],"names":["nodesIdsState","atom","key","default","nodeWithIdState","atomFamily","id","position","x","y","diagramTranslateState","diagramScaleState","LinksLayerMemorized","React","NodeMemo","props","useRecoilState","getScale","useRecoilCallback","snapshot","scaleState","onStart","e","onStop","onDrag","scale","setNode","curValue","d","style","width","height","backgroundColor","bottom","node","left","NodesLayerMemorized","nodes","InnerDiagram","forwardRef","movableElementRef","useRef","addNode","set","newNode","console","v","reinitState","newNodes","ids","Array","reset","n","useImperativeHandle","transform","translate","scalePart","translatePart","generateTransform","_","setTranslate","current","deltaY","ref","onWheel","transformation","rect","target","mouseXPos","mouseYPos","factor","dx","dy","computeTransformationOnScale","setScale","className","styles","Diagram","initializeState","snap","btnStyle","padding","liStyle","float","gap","generateLargeDiagram","colNum","rowNum","i","j","push","App","diagramRef","useState","row","setRow","col","setCol","useEffect","display","flexDirection","listStyleType","margin","overflow","onClick","Math","floor","random","type","onChange","parseInt","value","flexGrow","initialState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83a71804.chunk.js","sourcesContent":["import { atom, atomFamily } from 'recoil';\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport interface NodeState {\n  id: string;\n  position: Point;\n}\n\nexport const nodesIdsState = atom<string[]>({\n  key: 'nodesIds',\n  default: [],\n});\n\nexport const nodeWithIdState = atomFamily<NodeState, string>({\n  key: `node`,\n  default: (id) => ({ id: id, position: { x: 0, y: 0 } }),\n});\n\nexport const diagramTranslateState = atom<Point>({\n  key: 'diagramTranslate',\n  default: {\n    x: 0,\n    y: 0,\n  },\n  // effects_UNSTABLE: [\n  //   ({onSet}) => {\n  //     onSet(newState => {\n  //       console.debug(\"Current diagram transformation:\");\n  //       console.debug(newState);\n  //     });\n  //   },\n  // ],\n});\n\nexport const diagramScaleState = atom<number>({\n  key: 'diagramScale',\n  default: 1,\n});\n","import React from 'react';\n\nconst LinksLayer: React.FC = () => {\n  return <div />;\n};\n\nexport const LinksLayerMemorized = React.memo(LinksLayer);\n","import React from 'react';\nimport { DraggableCore } from 'react-draggable';\nimport { useRecoilCallback, useRecoilState } from 'recoil';\nimport { diagramScaleState, nodeWithIdState } from '../DiagramState';\n\nexport interface NodeProps {\n  id: string;\n}\n\nexport const Node: React.FC<NodeProps> = (props) => {\n  const [node, setNode] = useRecoilState(nodeWithIdState(props.id));\n\n  const getScale = useRecoilCallback(({ snapshot }) => () => {\n    const scaleState = snapshot.getLoadable(diagramScaleState).contents;\n    return typeof scaleState === 'number' ? scaleState : 1;\n  });\n\n  return (\n    <DraggableCore\n      onStart={(e) => e.stopPropagation()}\n      onStop={(e) => e.stopPropagation()}\n      onDrag={(e, d) => {\n        e.stopPropagation();\n        const scale = getScale();\n        setNode((curValue) => ({\n          ...curValue,\n          position: {\n            x: curValue.position.x + d.deltaX / scale,\n            y: curValue.position.y - d.deltaY / scale,\n          },\n        }));\n      }}\n    >\n      <div\n        style={{\n          width: '100px',\n          height: '100px',\n          backgroundColor: 'gray',\n          position: 'absolute',\n          bottom: node.position.y,\n          left: node.position.x,\n        }}\n      >\n        {props.id}\n      </div>\n    </DraggableCore>\n  );\n};\n\nexport const NodeMemo = React.memo(Node);\n","import React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { nodesIdsState } from '../DiagramState';\nimport { NodeMemo } from './Node';\n\nconst NodesLayer: React.FC = () => {\n  const [nodes] = useRecoilState(nodesIdsState);\n\n  return (\n    <React.Fragment>\n      {nodes.map((id) => (\n        <NodeMemo key={id} id={id} />\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport const NodesLayerMemorized = React.memo(NodesLayer);\n","import React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport { useRecoilCallback, useRecoilState } from 'recoil';\nimport { LinksLayerMemorized } from './LinksLayer';\nimport { NodesLayerMemorized } from './NodesLayer';\nimport {\n  diagramScaleState,\n  diagramTranslateState,\n  nodesIdsState,\n  NodeState,\n  nodeWithIdState,\n} from '../DiagramState';\nimport { DigramApi } from './Diagram';\nimport { DraggableCore, DraggableData, DraggableEvent } from 'react-draggable';\nimport { computeTransformationOnScale, generateTransform } from '../utils';\nimport styles from '../Diagram.module.css';\n\nexport const InnerDiagram = forwardRef((_props, ref) => {\n  const [translate, setTranslate] = useRecoilState(diagramTranslateState);\n  const [scale, setScale] = useRecoilState(diagramScaleState);\n  const movableElementRef = useRef<HTMLDivElement>(null);\n\n  const addNode = useRecoilCallback(({ set }) => (newNode: NodeState) => {\n    console.log(newNode);\n    set(nodeWithIdState(newNode.id), newNode);\n    set(nodesIdsState, (v) => v.concat([newNode.id]));\n  });\n\n  const reinitState = useRecoilCallback(\n    ({ set, reset, snapshot }) => (newNodes: NodeState[]) => {\n      const ids = snapshot.getLoadable(nodesIdsState).contents;\n      if (Array.isArray(ids)) {\n        ids.forEach((id) => reset(nodeWithIdState(id)));\n      }\n\n      set(\n        nodesIdsState,\n        newNodes.map((n) => n.id)\n      );\n\n      newNodes.forEach((n) => set(nodeWithIdState(n.id), n));\n    }\n  );\n\n  useImperativeHandle(\n    ref,\n    (): DigramApi => ({\n      addNode,\n      reinitState,\n    })\n  );\n\n  const onDrag = (_: DraggableEvent, d: DraggableData) => {\n    setTranslate((current) => ({\n      x: current.x + d.deltaX,\n      y: current.y + d.deltaY,\n    }));\n  };\n\n  const onWheel = (e: React.WheelEvent<HTMLDivElement>) => {\n    const transformation = computeTransformationOnScale(\n      movableElementRef.current,\n      e,\n      translate,\n      scale\n    );\n    if (transformation) {\n      setTranslate(transformation.translate);\n      setScale(transformation.scale);\n    }\n  };\n\n  const transform = generateTransform(translate, scale);\n\n  return (\n    <DraggableCore onDrag={onDrag}>\n      <div\n        ref={movableElementRef}\n        onWheel={onWheel}\n        className={styles.react_fast_diagram_DiagramInner}\n      >\n        <div\n          className={styles.react_fast_diagram_Movable}\n          style={{\n            transform: transform,\n          }}\n        >\n          <LinksLayerMemorized />\n          <NodesLayerMemorized />\n        </div>\n      </div>\n    </DraggableCore>\n  );\n});\n\nInnerDiagram.displayName = 'InnerDiagram';\n","import { Point } from './DiagramState';\n\nexport const generateTransform = (translate: Point, scale: number): string => {\n  const scalePart = `scale(${scale})`;\n  const translatePart = `translate(${translate.x}px, ${translate.y}px)`;\n  const transform = translatePart + ' ' + scalePart;\n  return transform;\n};\n\n// See: https://stackoverflow.com/a/30039971/9142642\nexport const computeTransformationOnScale = (\n  target: Element | null,\n  e: React.WheelEvent<HTMLDivElement>,\n  translate: Point,\n  scale: number\n): { scale: number; translate: Point } | null => {\n  // The upper left corner of the target stays in the same place while the picture is enlarged\n  const rect = target?.getBoundingClientRect();\n  if (!rect) return null;\n\n  // Get mouse position related to target\n  const mouseXPos = e.pageX - rect.left;\n  const mouseYPos = e.pageY - rect.top;\n\n  let factor = 0.9;\n  if (e.deltaY < 0) {\n    factor = 1 / factor;\n  }\n\n  // Now consider the point under the mouse cursor. Every pixel above and to the\n  // left of the cursor has become *factor* larger. This displaces the point under the\n  // cursor by *factor* downward and to the right. Meanwhile, the cursor is in the same position.\n  // Note that the target might have been moved in the canvas before the zooming operation, so the\n  // cursor's horizontal position in the target is mouseXPos - transformation.translation.x before zooming,\n  // and likewise for the vertical position.\n  const dx = (mouseXPos - translate.x) * (factor - 1);\n  const dy = (mouseYPos - translate.y) * (factor - 1);\n\n  return {\n    scale: scale * factor,\n    translate: {\n      // Compensate for the displacement by moving the point back under the cursor\n      x: translate.x - dx,\n      y: translate.y - dy,\n    },\n  };\n};\n","import React, { forwardRef, useRef } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport type { MutableSnapshot } from 'recoil';\nimport { nodesIdsState, NodeState, nodeWithIdState } from '../DiagramState';\nimport { InnerDiagram } from './DiagramInner';\n\nexport interface DiagramProps {\n  initialState?: NodeState[];\n}\n\nexport const initializeState = (\n  snap: MutableSnapshot,\n  props: DiagramProps\n): void => {\n  if (props.initialState) {\n    props.initialState.forEach((node) => {\n      snap.set(nodeWithIdState(node.id), node);\n    });\n    snap.set(\n      nodesIdsState,\n      props.initialState.map((node) => node.id)\n    );\n  }\n};\n\nexport interface DigramApi {\n  addNode(node: NodeState): void;\n  reinitState(nodes: NodeState[]): void;\n}\n\nexport const Diagram = forwardRef((props: DiagramProps, ref) => {\n  const initializeStateWrapper = (snap: MutableSnapshot) =>\n    initializeState(snap, props);\n\n  return (\n    <RecoilRoot initializeState={initializeStateWrapper}>\n      <InnerDiagram ref={ref} />\n    </RecoilRoot>\n  );\n});\n\nDiagram.displayName = 'Diagram';\n\nexport const useDiagramRef = (): React.MutableRefObject<\n  DigramApi | undefined\n> => useRef<DigramApi>();\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Diagram, useDiagramRef, NodeState } from \"react-easy-diagram\";\nimport 'react-easy-diagram/dist/index.css'\n\nconst btnStyle: React.CSSProperties = {\n  padding: \"14px 16px\",\n};\n\nconst liStyle: React.CSSProperties = {\n  float: \"left\",\n  gap: '10px'\n};\n\nconst generateLargeDiagram = (colNum: number, rowNum: number) : NodeState[] => {\n  const nodes = [];\n  for(let i = 0; i < colNum; i++) {\n    for(let j = 0; j < rowNum; j++) {\n      nodes.push({ id: `node_${i}_${j}`, position: { x: i * 120, y: j * 120 } })\n    }\n  }\n\n  return nodes;\n}\n\nexport const App = () => {\n  const diagramRef = useDiagramRef();\n  const [row, setRow] = useState(10);\n  const [col, setCol] = useState(10);\n\n  useEffect(() => {\n    diagramRef.current?.reinitState(generateLargeDiagram(row,col))\n  }, [diagramRef, row,col])\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        height: \"100vh\",\n        width: \"100vw\",\n        display: \"flex\",\n        flexDirection: \"column\",\n      }}\n    >\n      <ul\n        style={{\n          listStyleType: \"none\",\n          margin: 0,\n          padding: 0,\n          overflow: \"hidden\",\n          backgroundColor: \"pink\",\n        }}\n      >\n        <li style={liStyle}>\n          <div\n            style={btnStyle}\n            onClick={() =>\n              diagramRef.current?.addNode({\n                id: \"\" + Math.floor(Math.random() * 100000),\n                position: {\n                  x: Math.floor(Math.random() * 300),\n                  y: Math.floor(Math.random() * 300),\n                },\n              })\n            }\n          >\n            Add rand node\n          </div>\n        </li>\n        <li style={liStyle}>\n          <div style={btnStyle}>Second</div>\n        </li>\n        <li style={liStyle}>\n          <input type=\"number\" onChange={(e) => setRow(parseInt(e.target.value))} value={row} />\n        </li>\n        <li style={liStyle}>\n          <input type=\"number\" onChange={(e) => setCol(parseInt(e.target.value))} value={col} />\n        </li>\n      </ul>\n      <div\n        style={{\n          flexGrow: 1,\n          backgroundColor: \"lightgray\",\n        }}\n      >\n        <Diagram\n          ref={diagramRef}\n          initialState={generateLargeDiagram(row,col)}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}