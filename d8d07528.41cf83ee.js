(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{78:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return s})),t.d(e,"metadata",(function(){return a})),t.d(e,"toc",(function(){return d})),t.d(e,"default",(function(){return c}));var o=t(3),i=t(7),r=(t(0),t(89)),s={title:"Performance",hide_table_of_contents:!0,hide_title:!0},a={unversionedId:"examples/perf",id:"examples/perf",isDocsHomePage:!1,title:"Performance",description:"`js live noInline",source:"@site/docs\\examples\\perf.mdx",slug:"/examples/perf",permalink:"/docs/examples/perf",editUrl:"https://github.com/tokarchyn/react-easy-diagram/edit/main/website/docs/examples/perf.mdx",version:"current",sidebar:"docs",previous:{title:"Basic",permalink:"/docs/examples/basic"},next:{title:"Configure Default Link",permalink:"/docs/examples/configureDefaultLink"}},d=[],p={toc:d};function c(n){var e=n.components,t=Object(i.a)(n,["components"]);return Object(r.b)("wrapper",Object(o.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},"const generateState = (colNum, rowNum) => {\n  const nodes = [];\n  const links = [];\n  const getNodeId = (i, j) => `node_${i}_${j}`;\n\n  for (let i = 0; i < colNum; i++) {\n    for (let j = 0; j < rowNum; j++) {\n      nodes.push({\n        id: getNodeId(i, j),\n        position: [i * 120, j * 120],\n        ports: [\n          { id: 'left', type: 'left' },\n          { id: 'top', type: 'top' },\n          { id: 'right', type: 'right' },\n          { id: 'bottom', type: 'bottom' },\n        ],\n      });\n      if (i - 1 >= 0) {\n        links.push({\n          source: {\n            nodeId: getNodeId(i - 1, j),\n            portId: 'right',\n          },\n          target: {\n            nodeId: getNodeId(i, j),\n            portId: 'left',\n          },\n        });\n      }\n      if (j - 1 >= 0) {\n        links.push({\n          source: {\n            nodeId: getNodeId(i, j - 1),\n            portId: 'bottom',\n          },\n          target: {\n            nodeId: getNodeId(i, j),\n            portId: 'top',\n          },\n        });\n      }\n    }\n  }\n\n  return { nodes, links };\n};\n\nconst App = () => (\n  <Diagram\n    initState={generateState(10, 10)}\n    settings={{\n      links: {\n        components: {\n          attention: createLinkDefault({ color: 'red' }),\n        },\n        pathConstructor: createCurvedLinkPathConstructor(),\n      },\n      diagram: {\n        miniControlComponent: createDefaultMiniControl({\n          buttonsSize: 30,\n          position: 'left-bottom',\n        }),\n      },\n    }}\n  />\n);\n\nrender(App);\n")))}c.isMDXComponent=!0}}]);