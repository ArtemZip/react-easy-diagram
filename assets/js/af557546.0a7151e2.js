(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{85:function(t,n,r){"use strict";r.r(n),r.d(n,"default",(function(){return p}));var e=r(0),o=r.n(e),i=r(96),a=r(93),d=r(97),s=r(94);const c=(t,n)=>{const r=[],e=[],o=(t,n)=>`node_${t}_${n}`;for(let i=0;i<t;i++)for(let t=0;t<n;t++)r.push({id:o(i,t),position:[120*i,120*t],ports:[{id:"left",type:"left"},{id:"top",type:"top"},{id:"right",type:"right"},{id:"bottom",type:"bottom"}]}),i-1>=0&&e.push({source:{nodeId:o(i-1,t),portId:"right"},target:{nodeId:o(i,t),portId:"left"}}),t-1>=0&&e.push({source:{nodeId:o(i,t-1),portId:"bottom"},target:{nodeId:o(i,t),portId:"top"}});return{nodes:r,links:e}};var l=()=>o.a.createElement(s.Diagram,{initState:c(10,10),settings:{links:{components:{attention:Object(s.createLinkDefault)({color:"red"})},pathConstructor:Object(s.createCurvedLinkPathConstructor)()},diagram:{miniControlComponent:Object(s.createDefaultMiniControl)({buttonsSize:30,position:"left-bottom"})}}});function p(){return o.a.createElement(i.a,{title:"Performance Example"},o.a.createElement(d.a,null,o.a.createElement(l,null)),o.a.createElement(a.a,{className:"language-jsx"},"import React from 'react';\r\nimport {\r\n  createCurvedLinkPathConstructor,\r\n  createDefaultMiniControl,\r\n  createLinkDefault,\r\n  Diagram,\r\n  ILinkState,\r\n  INodeState,\r\n} from '@react-easy-diagram/core';\r\n\r\nconst generateState = (colNum: number, rowNum: number) => {\r\n  const nodes: INodeState[] = [];\r\n  const links: ILinkState[] = [];\r\n  const getNodeId = (i: number, j: number) => `node_${i}_${j}`;\r\n\r\n  for (let i = 0; i < colNum; i++) {\r\n    for (let j = 0; j < rowNum; j++) {\r\n      nodes.push({\r\n        id: getNodeId(i, j),\r\n        position: [i * 120, j * 120],\r\n        ports: [\r\n          { id: 'left', type: 'left' },\r\n          { id: 'top', type: 'top' },\r\n          { id: 'right', type: 'right' },\r\n          { id: 'bottom', type: 'bottom' },\r\n        ],\r\n      });\r\n      if (i - 1 >= 0) {\r\n        links.push({\r\n          source: {\r\n            nodeId: getNodeId(i - 1, j),\r\n            portId: 'right',\r\n          },\r\n          target: {\r\n            nodeId: getNodeId(i, j),\r\n            portId: 'left',\r\n          },\r\n        });\r\n      }\r\n      if (j - 1 >= 0) {\r\n        links.push({\r\n          source: {\r\n            nodeId: getNodeId(i, j - 1),\r\n            portId: 'bottom',\r\n          },\r\n          target: {\r\n            nodeId: getNodeId(i, j),\r\n            portId: 'top',\r\n          },\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return { nodes, links };\r\n};\r\n\r\nexport default () => (\r\n  <Diagram\r\n    initState={generateState(10, 10)}\r\n    settings={{\r\n      links: {\r\n        components: {\r\n          attention: createLinkDefault({ color: 'red' }),\r\n        },\r\n        pathConstructor: createCurvedLinkPathConstructor(),\r\n      },\r\n      diagram: {\r\n        miniControlComponent: createDefaultMiniControl({\r\n          buttonsSize: 30,\r\n          position: 'left-bottom',\r\n        }),\r\n      },\r\n    }}\r\n  />\r\n);\r\n"))}}}]);