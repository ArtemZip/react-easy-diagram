(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[13],{

/***/ 88:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "default", function() { return /* binding */ Example; });

// EXTERNAL MODULE: ../node_modules/react/index.js
var react = __webpack_require__(0);
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// EXTERNAL MODULE: ./src/pages/examples/_exampleWrapper.jsx
var _exampleWrapper = __webpack_require__(96);

// EXTERNAL MODULE: ../node_modules/@docusaurus/theme-live-codeblock/src/theme/CodeBlock/index.js + 9 modules
var CodeBlock = __webpack_require__(94);

// EXTERNAL MODULE: ./src/pages/examples/_diagramContainer.jsx
var _diagramContainer = __webpack_require__(97);

// CONCATENATED MODULE: ../node_modules/raw-loader/dist/cjs.js!./src/pages/examples/_updatePortsPositionDiagram.tsx
/* harmony default export */ var _updatePortsPositionDiagram = ("import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Diagram,\r\n  INodeVisualComponentProps,\r\n  Port,\r\n} from '@react-easy-diagram/core';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { action } from 'mobx';\r\n\r\nconst NodeWithExternalData = observer<INodeVisualComponentProps>(\r\n  ({ draggableRef, entity }) => {\r\n    const [fieldsNumber, setFieldsNumber] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n      // Size and position changes in DOM element are not reported to the library, so it is\r\n      // required to trigger recalculation if you think size or position is changed. There is also\r\n      // possibility to store your data that could change size or position in port's or node's \"extra\" property,\r\n      // changes in these properties along with the other are already handled by library.\r\n      entity.recalculatePortsSizeAndPosition();\r\n    }, [fieldsNumber]);\r\n\r\n    return (\r\n      <div className='react_fast_diagram_Node_Default' ref={draggableRef}>\r\n        <div>Node with external state that cause node resize</div>\r\n        <div>Fields:</div>\r\n\r\n        {[...Array(fieldsNumber)].map((v, i) => (\r\n          <span key={i}>\r\n            <input\r\n              type='number'\r\n              style={{ width: 100 }}\r\n              defaultValue={`Text field #${i}`}\r\n            />\r\n          </span>\r\n        ))}\r\n\r\n        <div>\r\n          <button type='button' onClick={() => setFieldsNumber((c) => c + 1)}>\r\n            Add field\r\n          </button>\r\n        </div>\r\n\r\n        <Port id='left' position='left-center' />\r\n        <Port id='top' position='center-top' linkDirection='up' />\r\n        <Port id='right' position='right-center' />\r\n        <Port id='bottom' position='center-bottom' linkDirection='down' />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nconst NodeWithInternalData = observer<INodeVisualComponentProps>(\r\n  ({ draggableRef, entity: node }) => {\r\n    const fieldsNumber = node.extra ?? 0;\r\n    return (\r\n      <div className='react_fast_diagram_Node_Default' ref={draggableRef}>\r\n        <div>Node with internal state that cause node resize</div>\r\n        <div>Fields:</div>\r\n\r\n        {[...Array(fieldsNumber)].map((v, i) => (\r\n          <span key={i}>\r\n            <input\r\n              type='number'\r\n              style={{ width: 100 }}\r\n              defaultValue={`Text field #${i}`}\r\n            />\r\n          </span>\r\n        ))}\r\n\r\n        <div>\r\n          <button type='button' onClick={() => node.setExtra(fieldsNumber + 1)}>\r\n            Add field\r\n          </button>\r\n        </div>\r\n\r\n        <Port id='left' position='left-center' />\r\n        <Port id='top' position='center-top' linkDirection='up' />\r\n        <Port id='right' position='right-center' />\r\n        <Port id='bottom' position='center-bottom' linkDirection='down' />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default () => (\r\n  <Diagram\r\n    initState={{\r\n      nodes: [\r\n        {\r\n          id: 'external',\r\n          position: [0, 0],\r\n          componentType: 'external',\r\n        },\r\n        {\r\n          id: 'internal',\r\n          position: [400, 0],\r\n          componentType: 'internal',\r\n        },\r\n        {\r\n          id: 'left_node',\r\n          position: [-200, 100],\r\n          ports: [\r\n            {\r\n              id: 'port',\r\n              type: 'right',\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 'top_node',\r\n          position: [300, -200],\r\n          ports: [\r\n            {\r\n              id: 'port',\r\n              type: 'bottom',\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 'right_node',\r\n          position: [800, 100],\r\n          ports: [\r\n            {\r\n              id: 'port',\r\n              type: 'left',\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 'bottom_node',\r\n          position: [300, 300],\r\n          ports: [\r\n            {\r\n              id: 'port',\r\n              type: 'top',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n      links: [\r\n        {\r\n          source: {\r\n            nodeId: 'internal',\r\n            portId: 'left',\r\n          },\r\n          target: {\r\n            nodeId: 'external',\r\n            portId: 'right',\r\n          },\r\n        },\r\n        {\r\n          source: {\r\n            nodeId: 'internal',\r\n            portId: 'top',\r\n          },\r\n          target: {\r\n            nodeId: 'top_node',\r\n            portId: 'port',\r\n          },\r\n        },\r\n        {\r\n          source: {\r\n            nodeId: 'internal',\r\n            portId: 'right',\r\n          },\r\n          target: {\r\n            nodeId: 'right_node',\r\n            portId: 'port',\r\n          },\r\n        },\r\n        {\r\n          source: {\r\n            nodeId: 'internal',\r\n            portId: 'bottom',\r\n          },\r\n          target: {\r\n            nodeId: 'bottom_node',\r\n            portId: 'port',\r\n          },\r\n        },\r\n\r\n        {\r\n          source: {\r\n            nodeId: 'external',\r\n            portId: 'left',\r\n          },\r\n          target: {\r\n            nodeId: 'left_node',\r\n            portId: 'port',\r\n          },\r\n        },\r\n        {\r\n          source: {\r\n            nodeId: 'external',\r\n            portId: 'top',\r\n          },\r\n          target: {\r\n            nodeId: 'top_node',\r\n            portId: 'port',\r\n          },\r\n        },\r\n        {\r\n          source: {\r\n            nodeId: 'external',\r\n            portId: 'bottom',\r\n          },\r\n          target: {\r\n            nodeId: 'bottom_node',\r\n            portId: 'port',\r\n          },\r\n        },\r\n      ],\r\n    }}\r\n    settings={{\r\n      nodes: {\r\n        components: {\r\n          internal: NodeWithInternalData,\r\n          external: NodeWithExternalData,\r\n        },\r\n      },\r\n    }}\r\n  />\r\n);\r\n");
// EXTERNAL MODULE: ../lib_core/dist/index.esm.js + 1 modules
var index_esm = __webpack_require__(95);

// EXTERNAL MODULE: ../node_modules/mobx-react-lite/es/observer.js + 9 modules
var observer = __webpack_require__(195);

// CONCATENATED MODULE: ./src/pages/examples/_updatePortsPositionDiagram.tsx
const NodeWithExternalData=Object(observer["a" /* observer */])(({draggableRef,entity})=>{const[fieldsNumber,setFieldsNumber]=Object(react["useState"])(0);Object(react["useEffect"])(()=>{// Size and position changes in DOM element are not reported to the library, so it is
// required to trigger recalculation if you think size or position is changed. There is also
// possibility to store your data that could change size or position in port's or node's "extra" property,
// changes in these properties along with the other are already handled by library.
entity.recalculatePortsSizeAndPosition();},[fieldsNumber]);return/*#__PURE__*/react_default.a.createElement("div",{className:"react_fast_diagram_Node_Default",ref:draggableRef},/*#__PURE__*/react_default.a.createElement("div",null,"Node with external state that cause node resize"),/*#__PURE__*/react_default.a.createElement("div",null,"Fields:"),[...Array(fieldsNumber)].map((v,i)=>/*#__PURE__*/react_default.a.createElement("span",{key:i},/*#__PURE__*/react_default.a.createElement("input",{type:"number",style:{width:100},defaultValue:`Text field #${i}`}))),/*#__PURE__*/react_default.a.createElement("div",null,/*#__PURE__*/react_default.a.createElement("button",{type:"button",onClick:()=>setFieldsNumber(c=>c+1)},"Add field")),/*#__PURE__*/react_default.a.createElement(index_esm["Port"],{id:"left",position:"left-center"}),/*#__PURE__*/react_default.a.createElement(index_esm["Port"],{id:"top",position:"center-top",linkDirection:"up"}),/*#__PURE__*/react_default.a.createElement(index_esm["Port"],{id:"right",position:"right-center"}),/*#__PURE__*/react_default.a.createElement(index_esm["Port"],{id:"bottom",position:"center-bottom",linkDirection:"down"}));});const NodeWithInternalData=Object(observer["a" /* observer */])(({draggableRef,entity:node})=>{var _node$extra;const fieldsNumber=(_node$extra=node.extra)!==null&&_node$extra!==void 0?_node$extra:0;return/*#__PURE__*/react_default.a.createElement("div",{className:"react_fast_diagram_Node_Default",ref:draggableRef},/*#__PURE__*/react_default.a.createElement("div",null,"Node with internal state that cause node resize"),/*#__PURE__*/react_default.a.createElement("div",null,"Fields:"),[...Array(fieldsNumber)].map((v,i)=>/*#__PURE__*/react_default.a.createElement("span",{key:i},/*#__PURE__*/react_default.a.createElement("input",{type:"number",style:{width:100},defaultValue:`Text field #${i}`}))),/*#__PURE__*/react_default.a.createElement("div",null,/*#__PURE__*/react_default.a.createElement("button",{type:"button",onClick:()=>node.setExtra(fieldsNumber+1)},"Add field")),/*#__PURE__*/react_default.a.createElement(index_esm["Port"],{id:"left",position:"left-center"}),/*#__PURE__*/react_default.a.createElement(index_esm["Port"],{id:"top",position:"center-top",linkDirection:"up"}),/*#__PURE__*/react_default.a.createElement(index_esm["Port"],{id:"right",position:"right-center"}),/*#__PURE__*/react_default.a.createElement(index_esm["Port"],{id:"bottom",position:"center-bottom",linkDirection:"down"}));});/* harmony default export */ var examples_updatePortsPositionDiagram = (()=>/*#__PURE__*/react_default.a.createElement(index_esm["Diagram"],{initState:{nodes:[{id:'external',position:[0,0],componentType:'external'},{id:'internal',position:[400,0],componentType:'internal'},{id:'left_node',position:[-200,100],ports:[{id:'port',type:'right'}]},{id:'top_node',position:[300,-200],ports:[{id:'port',type:'bottom'}]},{id:'right_node',position:[800,100],ports:[{id:'port',type:'left'}]},{id:'bottom_node',position:[300,300],ports:[{id:'port',type:'top'}]}],links:[{source:{nodeId:'internal',portId:'left'},target:{nodeId:'external',portId:'right'}},{source:{nodeId:'internal',portId:'top'},target:{nodeId:'top_node',portId:'port'}},{source:{nodeId:'internal',portId:'right'},target:{nodeId:'right_node',portId:'port'}},{source:{nodeId:'internal',portId:'bottom'},target:{nodeId:'bottom_node',portId:'port'}},{source:{nodeId:'external',portId:'left'},target:{nodeId:'left_node',portId:'port'}},{source:{nodeId:'external',portId:'top'},target:{nodeId:'top_node',portId:'port'}},{source:{nodeId:'external',portId:'bottom'},target:{nodeId:'bottom_node',portId:'port'}}]},settings:{nodes:{components:{internal:NodeWithInternalData,external:NodeWithExternalData}}}}));
// CONCATENATED MODULE: ./src/pages/examples/updatePortsPosition.jsx
function Example(){return/*#__PURE__*/react_default.a.createElement(_exampleWrapper["a" /* ExampleWrapper */],{title:"Update ports position example"},/*#__PURE__*/react_default.a.createElement(_diagramContainer["a" /* DiagramContainer */],null,/*#__PURE__*/react_default.a.createElement(examples_updatePortsPositionDiagram,null)),/*#__PURE__*/react_default.a.createElement(CodeBlock["a" /* default */],{className:"language-jsx"},_updatePortsPositionDiagram));}

/***/ })

}]);