(self["webpackChunkwebsite"] = self["webpackChunkwebsite"] || []).push([[132],{

/***/ 7116:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return /* binding */ Example; }
});

// EXTERNAL MODULE: ../node_modules/react/index.js
var react = __webpack_require__(7378);
// EXTERNAL MODULE: ./src/pages/examples/_exampleWrapper.jsx
var _exampleWrapper = __webpack_require__(1713);
// EXTERNAL MODULE: ../node_modules/@docusaurus/theme-live-codeblock/src/theme/CodeBlock/index.js + 11 modules
var CodeBlock = __webpack_require__(842);
// EXTERNAL MODULE: ./src/pages/examples/_diagramContainer.jsx + 1 modules
var _diagramContainer = __webpack_require__(9339);
;// CONCATENATED MODULE: ../node_modules/raw-loader/dist/cjs.js!./src/pages/examples/_updatePortsPositionDiagram.tsx
/* harmony default export */ var _updatePortsPositionDiagram = ("import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Diagram,\r\n  disableNodeUserInteractionClassName,\r\n  INodeVisualComponentProps,\r\n  Port,\r\n} from '@react-easy-diagram/core';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst NodeWithExternalData = observer<INodeVisualComponentProps>(\r\n  ({ draggableRef, entity: node }) => {\r\n    const [linesNumber, setLinesNumber] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n      // Size and position changes in DOM element are not reported to the library, so it is\r\n      // required to trigger recalculation if you think size or position is changed. There is also\r\n      // possibility to store your data that could change size or position in port's or node's \"extra\" property,\r\n      // changes in these properties along with the other are already handled by library.\r\n      node.recalculatePortsSizeAndPosition();\r\n    }, [linesNumber]);\r\n\r\n    return (\r\n      <div\r\n        className='react_fast_diagram_Node_Default'\r\n        ref={draggableRef}\r\n        style={{ padding: 15, border: node.selected ? '#6eb7ff solid 1px' : '' }}\r\n      >\r\n        <div>Node with external state that cause node resize</div>\r\n        <div>Fields:</div>\r\n\r\n        {[...Array(linesNumber)].map((v, i) => (\r\n          <span key={i}>Line {i}</span>\r\n        ))}\r\n\r\n        <div>\r\n          <button\r\n            className={disableNodeUserInteractionClassName}\r\n            type='button'\r\n            onClick={() => setLinesNumber((c) => c + 1)}\r\n          >\r\n            Add line\r\n          </button>\r\n        </div>\r\n\r\n        <Port id='left' position='left-center' />\r\n        <Port id='top' position='center-top' linkDirection='up' />\r\n        <Port id='right' position='right-center' />\r\n        <Port id='bottom' position='center-bottom' linkDirection='down' />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nconst NodeWithInternalData = observer<INodeVisualComponentProps>(\r\n  ({ draggableRef, entity: node }) => {\r\n    const linesNumber = node.extra ?? 0;\r\n    return (\r\n      <div\r\n        className='react_fast_diagram_Node_Default'\r\n        ref={draggableRef}\r\n        style={{ padding: 15, border: node.selected ? '#6eb7ff solid 1px' : '' }}\r\n      >\r\n        <div>Node with internal state that cause node resize</div>\r\n        <div>Fields:</div>\r\n\r\n        {[...Array(linesNumber)].map((v, i) => (\r\n          <span key={i}>Line {i}</span>\r\n        ))}\r\n\r\n        <div>\r\n          <button\r\n            className={disableNodeUserInteractionClassName}\r\n            type='button'\r\n            onClick={() => node.setExtra(linesNumber + 1)}\r\n          >\r\n            Add line\r\n          </button>\r\n        </div>\r\n\r\n        <Port id='left' position='left-center' />\r\n        <Port id='top' position='center-top' linkDirection='up' />\r\n        <Port id='right' position='right-center' />\r\n        <Port id='bottom' position='center-bottom' linkDirection='down' />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default () => (\r\n  <Diagram\r\n    initState={{\r\n      nodes: [\r\n        {\r\n          id: 'external',\r\n          position: [0, 0],\r\n          componentType: 'external',\r\n        },\r\n        {\r\n          id: 'internal',\r\n          position: [400, 0],\r\n          componentType: 'internal',\r\n        },\r\n        {\r\n          id: 'left_node',\r\n          position: [-200, 100],\r\n          componentType: 'output_horizontal',\r\n        },\r\n        {\r\n          id: 'top_node',\r\n          position: [300, -200],\r\n          componentType: 'output_vertical',\r\n        },\r\n        {\r\n          id: 'right_node',\r\n          position: [800, 100],\r\n          componentType: 'input_horizontal',\r\n        },\r\n        {\r\n          id: 'bottom_node',\r\n          position: [300, 300],\r\n          componentType: 'input_vertical',\r\n        },\r\n      ],\r\n      links: [\r\n        {\r\n          source: {\r\n            nodeId: 'internal',\r\n            portId: 'left',\r\n          },\r\n          target: {\r\n            nodeId: 'external',\r\n            portId: 'right',\r\n          },\r\n        },\r\n        {\r\n          source: {\r\n            nodeId: 'internal',\r\n            portId: 'top',\r\n          },\r\n          target: {\r\n            nodeId: 'top_node',\r\n            portId: 'output',\r\n          },\r\n        },\r\n        {\r\n          source: {\r\n            nodeId: 'internal',\r\n            portId: 'right',\r\n          },\r\n          target: {\r\n            nodeId: 'right_node',\r\n            portId: 'input',\r\n          },\r\n        },\r\n        {\r\n          source: {\r\n            nodeId: 'internal',\r\n            portId: 'bottom',\r\n          },\r\n          target: {\r\n            nodeId: 'bottom_node',\r\n            portId: 'input',\r\n          },\r\n        },\r\n\r\n        {\r\n          source: {\r\n            nodeId: 'external',\r\n            portId: 'left',\r\n          },\r\n          target: {\r\n            nodeId: 'left_node',\r\n            portId: 'output',\r\n          },\r\n        },\r\n        {\r\n          source: {\r\n            nodeId: 'external',\r\n            portId: 'top',\r\n          },\r\n          target: {\r\n            nodeId: 'top_node',\r\n            portId: 'output',\r\n          },\r\n        },\r\n        {\r\n          source: {\r\n            nodeId: 'external',\r\n            portId: 'bottom',\r\n          },\r\n          target: {\r\n            nodeId: 'bottom_node',\r\n            portId: 'input',\r\n          },\r\n        },\r\n      ],\r\n    }}\r\n    settings={{\r\n      nodes: {\r\n        components: {\r\n          internal: NodeWithInternalData,\r\n          external: NodeWithExternalData,\r\n        },\r\n      },\r\n    }}\r\n  />\r\n);\r\n");
// EXTERNAL MODULE: ../lib_core/dist/index.esm.js + 1 modules
var index_esm = __webpack_require__(1943);
// EXTERNAL MODULE: ../node_modules/mobx-react-lite/es/index.js + 17 modules
var es = __webpack_require__(5479);
;// CONCATENATED MODULE: ./src/pages/examples/_updatePortsPositionDiagram.tsx
var NodeWithExternalData=(0,es/* observer */.Pi)(function(_ref){var draggableRef=_ref.draggableRef,node=_ref.entity;var _useState=(0,react.useState)(0),linesNumber=_useState[0],setLinesNumber=_useState[1];(0,react.useEffect)(function(){// Size and position changes in DOM element are not reported to the library, so it is
// required to trigger recalculation if you think size or position is changed. There is also
// possibility to store your data that could change size or position in port's or node's "extra" property,
// changes in these properties along with the other are already handled by library.
node.recalculatePortsSizeAndPosition();},[linesNumber]);return/*#__PURE__*/react.createElement("div",{className:"react_fast_diagram_Node_Default",ref:draggableRef,style:{padding:15,border:node.selected?'#6eb7ff solid 1px':''}},/*#__PURE__*/react.createElement("div",null,"Node with external state that cause node resize"),/*#__PURE__*/react.createElement("div",null,"Fields:"),[].concat(Array(linesNumber)).map(function(v,i){return/*#__PURE__*/react.createElement("span",{key:i},"Line ",i);}),/*#__PURE__*/react.createElement("div",null,/*#__PURE__*/react.createElement("button",{className:index_esm.disableNodeUserInteractionClassName,type:"button",onClick:function onClick(){return setLinesNumber(function(c){return c+1;});}},"Add line")),/*#__PURE__*/react.createElement(index_esm.Port,{id:"left",position:"left-center"}),/*#__PURE__*/react.createElement(index_esm.Port,{id:"top",position:"center-top",linkDirection:"up"}),/*#__PURE__*/react.createElement(index_esm.Port,{id:"right",position:"right-center"}),/*#__PURE__*/react.createElement(index_esm.Port,{id:"bottom",position:"center-bottom",linkDirection:"down"}));});var NodeWithInternalData=(0,es/* observer */.Pi)(function(_ref2){var _node$extra;var draggableRef=_ref2.draggableRef,node=_ref2.entity;var linesNumber=(_node$extra=node.extra)!=null?_node$extra:0;return/*#__PURE__*/react.createElement("div",{className:"react_fast_diagram_Node_Default",ref:draggableRef,style:{padding:15,border:node.selected?'#6eb7ff solid 1px':''}},/*#__PURE__*/react.createElement("div",null,"Node with internal state that cause node resize"),/*#__PURE__*/react.createElement("div",null,"Fields:"),[].concat(Array(linesNumber)).map(function(v,i){return/*#__PURE__*/react.createElement("span",{key:i},"Line ",i);}),/*#__PURE__*/react.createElement("div",null,/*#__PURE__*/react.createElement("button",{className:index_esm.disableNodeUserInteractionClassName,type:"button",onClick:function onClick(){return node.setExtra(linesNumber+1);}},"Add line")),/*#__PURE__*/react.createElement(index_esm.Port,{id:"left",position:"left-center"}),/*#__PURE__*/react.createElement(index_esm.Port,{id:"top",position:"center-top",linkDirection:"up"}),/*#__PURE__*/react.createElement(index_esm.Port,{id:"right",position:"right-center"}),/*#__PURE__*/react.createElement(index_esm.Port,{id:"bottom",position:"center-bottom",linkDirection:"down"}));});/* harmony default export */ var examples_updatePortsPositionDiagram = (function(){return/*#__PURE__*/react.createElement(index_esm.Diagram,{initState:{nodes:[{id:'external',position:[0,0],componentType:'external'},{id:'internal',position:[400,0],componentType:'internal'},{id:'left_node',position:[-200,100],componentType:'output_horizontal'},{id:'top_node',position:[300,-200],componentType:'output_vertical'},{id:'right_node',position:[800,100],componentType:'input_horizontal'},{id:'bottom_node',position:[300,300],componentType:'input_vertical'}],links:[{source:{nodeId:'internal',portId:'left'},target:{nodeId:'external',portId:'right'}},{source:{nodeId:'internal',portId:'top'},target:{nodeId:'top_node',portId:'output'}},{source:{nodeId:'internal',portId:'right'},target:{nodeId:'right_node',portId:'input'}},{source:{nodeId:'internal',portId:'bottom'},target:{nodeId:'bottom_node',portId:'input'}},{source:{nodeId:'external',portId:'left'},target:{nodeId:'left_node',portId:'output'}},{source:{nodeId:'external',portId:'top'},target:{nodeId:'top_node',portId:'output'}},{source:{nodeId:'external',portId:'bottom'},target:{nodeId:'bottom_node',portId:'input'}}]},settings:{nodes:{components:{internal:NodeWithInternalData,external:NodeWithExternalData}}}});});
;// CONCATENATED MODULE: ./src/pages/examples/updatePortsPosition.jsx
function Example(){return/*#__PURE__*/react.createElement(_exampleWrapper/* ExampleWrapper */.U,{title:"Update ports position example"},/*#__PURE__*/react.createElement(_diagramContainer/* DiagramContainer */.G,null,/*#__PURE__*/react.createElement(examples_updatePortsPositionDiagram,null)),/*#__PURE__*/react.createElement(CodeBlock/* default */.Z,{className:"language-jsx"},_updatePortsPositionDiagram));}

/***/ })

}]);